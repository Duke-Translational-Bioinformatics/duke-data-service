<!--API features for future sprints...
## Group Tags
A tag is a term (i.e. word or phrase) that can be associated to a DDS object to faciliate classification and searching. 

## Tags collection [/tags]

### Create tag [POST]
>**Permission:** [object.kind in (dds-folder, dds-file)] create_file 
- - - - -

>**Properties**
- - - - -
+ **object.kind (string, required)** - The kind of object to tag.
+ **object.id (string, required)** - The unique id of the object to tag.
+ **term (string, required)** - The textual tag content.

>**Rules**
- - - - -
+ Supported objects are folder (i.e. `dds-folder`) and file (i.e. `dds-file`).
+ The `tag.term` must be unique withing the context of the tagged `object`.

+ Request (application/json)

        { 
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "term": "SMRT sequencing"
        }
    
+ Response 201 (application/json)

        { 
            "id": "66211c4e-a49e-42d7-9793-87989d56e1e3",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "term": "SMRT sequencing",
            "audit": { }
        }

### List object tags [GET /tags/{?object_kind,object_id}]
Get a list of tags for an object.

>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Parameters
    + object_kind (string, required, `dds-file`) ... The kind of object.
    + object_id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique id of the object.
    
+ Response 200 (application/json)

        {
            "results": [
                { 
                    "id": "66211c4e-a49e-42d7-9793-87989d56e1e3",
                    "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
                    "term": "SMRT sequencing",
                    "audit": { }
                }
            ]
        }

### List distinct tag terms [GET /tags/terms{?term_contains,object_kind}]
Get list of all the **distinct** `tag.term` values for objects the current user has permission to view.  Web and native UX client apps can use this endpoint to allow users to apply an exisiting term to another object via a type-ahead widget.

>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Parameters
    + term_contains (string, optional, `sequen`) ... If provided, searches for tags that contain this text fragment.
    + object_kind (string, optional, `dds-file`) ... If provided, this narrows the search context to tags for this kind of object.


+ Response 200 (application/json)

        {
            "results": [
                "SMRT sequencing",
                "Polony sequencing",
                "DNA nanoball sequencing"
            ]

        }

## Tag instance [/tags/{id}]
+ Parameters
    + id (string, required, `66211c4e-a49e-42d7-9793-87989d56e1e3`) ... The unique id of the tag.

### View tag [GET]
>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Response 200 (application/json)

        { 
            "id": "66211c4e-a49e-42d7-9793-87989d56e1e3",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "term": "SMRT sequencing",
            "audit": { }
        }

### Delete tag [DELETE]
>**Permission:** [object.kind in (dds-folder, dds-file)] create_file
- - - - -

+ Response 204 

## Group Properties
A property is a key/value pair that can be associated to a DDS object; this allows the storage of additional structured metadata about objects.

<h3 style="color:blue;">Design Considerations</h3>
<ul>
<li>
Should we allow users to create a "metadata template (i.e. schema) for properties" at the project level? A template instance could be associated to all files in a project, or all files in a folder or a specific file?  The template would define the valid property keys, a display label for each key, and perhaps a simple type (string, number, date, enum).  This may improve the quality of metatdata captured?
</li>
</ul>

## Properties collection [/properties]

### Create property [POST]
>**Permission:** [object.kind in (dds-folder, dds-file)] create_file 
- - - - -

>**Properties**
- - - - -
+ **object.kind (string, required)** - The kind of object to add property to.
+ **object.id (string, required)** - The unique id of the object to add property to.
+ **key (string, required)** - The key of this property.
+ **value (string, required)** - The value of this property; set to `null` to specifiy no value. 

>**Rules**
- - - - -
+ Supported objects are folder (i.e. `dds-folder`) and file (i.e. `dds-file`).
+ The `property.key` must be unique withing the context of the `object`.

+ Request (application/json)

        { 
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball"
        }
    
+ Response 201 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball",
            "audit": { }
        }

### List object properties [GET /properties/{?object_kind,object_id}]
Get a list of properties for an object.

>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Parameters
    + object_kind (string, required, `dds-file`) ... The kind of object.
    + object_id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique id of the object.
    
+ Response 200 (application/json)

        {
            "results": [
                { 
                    "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
                    "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
                    "key": "sequencing_method",
                    "value": "DNA nanoball",
                    "audit": { }
                }
            ]
        }

### List distinct keys [GET /properties/keys{?key_contains,object_kind}]
Get list of all the **distinct** `property.key` values for objects the current user has permission to view.  Web and native UX client applications can use this endpoint to allow users to specify an exisiting key for another object via a type-ahead widget.

>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Parameters
    + key_contains (string, optional, `sequenc`) ... If provided, searches for keys that contain this text fragment.
    + object_kind (string, optional, `dds-file`) ... If provided, this narrows the search context to keys for this kind of object.

+ Response 200 (application/json)

        {
            "results": [
                "sequencing_method",
                "sequencing_platform"
            ]

        }

### List distinct values for key [GET /properties/values{?key,value_contains,object_kind}]
Get list of all the **distinct** `property.value` values that have been assigned to a `property.key`, for objects the current user has permission to view.  Web and native UX client applications can use this endpoint to allow users to specify an exisiting value for another object via a type-ahead widget.

>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Parameters
    + key (string, required, `sequencing_platform`) ... The key to search within for distinct values.
    + value_contains (string, optional, `illum`) ... If provided, searches for values that contain this text fragment.
    + object_kind (string, optional, `dds-file`) ... If provided, this narrows the search context to values for this kind of object.

+ Response 200 (application/json)

        {
            "results": [
                "illumina MiSeq",
                "illumina MiSeqDx"
            ]

        }

## Property instance [/properties/{id}]
+ Parameters
    + id (string, required, `246a4a86-5c79-48bb-b5e6-85b8014cb778`) ... The unique id of the property.

### View property [GET]
>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Response 200 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball",
            "audit": { }
        }

### View property by key [GET /properties{?object_kind,object_id,key}]
Get a property for an object by key.

>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Parameters
    + object_kind (string, required, `dds-file`) ... The kind of object.
    + object_id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique id of the object.
    + key (string, required, `sequencing_method`) ... The key to get.

+ Response 200 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball",
            "audit": { }
        }

### Update property [PUT]
>**Permission:** [object.kind in (dds-folder, dds-file)]] create_file
- - - - -

>**Rules**
- - - - -
+ Only `key` and `value` properties may be updated; this endpoint supports PATCH semantics.

+ Request (application/json)

        { 
            "value": "Polony"
        }
    
+ Response 201 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "Polony",
            "audit": { }
        }


### Delete property [DELETE]
>**Permission:** [object.kind in (dds-folder, dds-file)]] create_file
- - - - -

+ Response 204 

## Group Activities
An activity is something that occurs over a period of time and acts upon or with DDS entities, such as files; it may include consuming, processing, transforming, modifying, relocating, using, or generating objects.  These are activities recorded/tracked by researchers and their software agents (i.e. pipelines) with the intent of maintaining comprehensive data provenance.

## Activities collection [/activities]

### Create activity [POST]
>**Permission:** authenticated
- - - - -

>**Properties**
- - - - -
+ **name (string, required)** - A short name for this activity.
+ **description (string, optional)** - A verbose description of this activity.
+ **started_on (string, optional)** - The datetime this activity was started; defaults to the current datetime if not specified.
+ **ended_on (string, optional)** - The datetime this activity ended.

>**Rules**
- - - - -
+ The `ended_on` datetime must be greater than or equal to the `started_on` datetime. 

+ Request (application/json)

        { 
            "name": "RF PI3-Kinase",
            "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": null,
            "is_deleted": false,
            "audit": { }
        }

### List activities [GET]
>**Permission:** 
- - - - -
+ Current user owns (i.e. created) the activity OR 
+ Current user has view permission (i.e. view_project) for a project folder/file the activity has a provenace relation with; this can be a "used" (i.e. `dds-relation-used`) or "generated" (i.e. `dds-relation-generated`) relation.

>**Rules**
- - - - -
+ Activities that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-activity",
                    "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                    "name": "RF PI3-Kinase",
                    "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
                    "started_on": "2015-01-01T12:00:00Z",
                    "ended_on": null,
                    "is_deleted": false,
                    "audit": { }
                }
            ]
        }

## Activities instance [/activities/{id}]

### View activity [GET]
>**Permission:** 
- - - - -
+ Current user owns (i.e. created) the activity OR 
+ Current user `view_project` for project folder/file the activity has a provenace relation with; this can be a "used" (i.e. `dds-relation-used`) or "generated" (i.e. `dds-relation-generated`) relation.

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": null,
            "is_deleted": false,
            "audit": { }
        }

### Update activity [PUT]
>**Permission:** 
- - - - -
+ Current user owns (i.e. created) the activity OR 
+ Current user has `create_file` for project folder/file the activity has a provenace relation with; this can be a "used" (i.e. `dds-relation-used`) or "generated" (i.e. `dds-relation-generated`) relation.

>**Rules**
- - - - -
+ Only `name`, `description`, `started_on`, and `updated_on` properties may be updated; this endpoint supports PATCH semantics.

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Request (application/json)

        {
            "ended_on": "2015-01-01T114:30:00"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": "2015-01-01T114:30:00Z",
            "is_deleted": false,
            "audit": { }
        }

### Update activity started date [PUT /activities/{id}/started]
A convenience action to set started date to current system date.

>**Permission:** Same as "Update activity" action
- - - - -

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": "2015-01-01T114:30:00Z",
            "is_deleted": false,
            "audit": { }
        }

### Update activity ended date [PUT /activities/{id}/ended]
A convenience action to set ended date to current system date.

>**Permission:** Same as "Update activity" action
- - - - -

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": "2015-01-01T114:30:00Z",
            "is_deleted": false,
            "audit": { }
        }

### Delete activity [DELETE]
>**Permission:** Same as "Update activity" action
- - - - -

>**Rules**
- - - - -
+ Logically deletes activity (i.e. sets `"is_deleted": true`).

+ Response 204

## Group Events
This API provides insight to users about what key events have occurred.  This is a read-only API to view the events; events of interest are derived from the execution of other API actions. 

<h3 style="color:blue;">Design Considerations</h3>
<ul>
<li>
What events do we want to publish/expose via this endpoint?
</li>
</ul>

>**Event Properties**
- - - - -
+ **published_on (string, required)** - The datetime of the event.
+ **kind (string, required)** - Defines the kind or type of event; these are expressed in the standard format: `<dds-object>-<verb>`. 
+ **actor (object, required)** - The entity that triggered the event; currently this is always a user (i.e. `dds-user`).
+ **object (object, required)** - The primary object of the event; for example this may be a `folder` or a `file`, etc.
+ **target (object, optional)** - The indirect object, or target, of the event. The precise meaning of the target is largely dependent on the `kind` of event being described, but will often be the object of the English preposition "to". For instance, the event "Erich Huang moved folder: Sequenceng_Raw to folder: Sequencing_Raw_Archive" - the target of this event is `folder: Sequencing_Raw_Archive`.
+ **message (string, required)** - The message rendered based on a `message_template` specific to the `kind` of event.
+ **context (object, required)** - The context (or scope) of the event; currently this is always a project (i.e. `dds-project`).

>**Supported Events (Some proposed examples)** 

| kind | actor | object | target | message_template |
|:------------|:------------|:------------|:------------|:------------|
| **dds-project-permission-granted** | `dds-user` | `dds-project-permission` | `null` | "Granted role { `primary.auth_role.name` } to { `primary.user.full_name` }" |
| **dds-project-permission-revoked** | `dds-user` | `dds-project-permission` | `null` | "Revoked role { `primary.auth_role.name` } from { `primary.user.full_name` }" |
| **dds-upload-started** | `dds-user` | `dds-upload` | `null` | "Upload initiated for file { `primary.name` }" |
| **dds-upload-completed** | `dds-user` | `dds-upload` | `null` | "Upload completed for file { `primary.name` }" |
| **dds-file-move** | `dds-user` | `dds-file` | `dds-file` | "File { `primary.name` } moved from { `primary.parent.name` } to { `target.parent.name` }"" |

*For the objects:* **actor**, **primary** and **target** *abbreviated JSON representations are used in the API examples herein, not the complete resource payload.*

## List events [GET /events]
List the events; most recent events are sorted to the top of the list.

>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {   
            "results": [
                {
                    "published_on": "2016-01-01T12:45:00Z",
                    "kind": "dds-upload-completed",
                    "actor": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "full_name": "Matthew Gardner"
                    },
                    "object": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                        "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata"
                    },
                    "target": null,
                    "message": "Upload completed for file RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "context": { "kind": "dds-project", "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" }
                },
                {
                    "published_on": "2016-01-01T12:00:00Z",
                    "kind": "dds-upload-started",
                    "actor": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "full_name": "Matthew Gardner"
                    },
                    "object": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                        "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata"
                    },
                    "target": null,
                    "message": "Upload initiated for file RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "context": { "kind": "dds-project", "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" }
                }        
            ]
        }

## Group Full-Text Search 
The Search API is optimized to help you find the specific DDS objects you're looking for (e.g., a specific project, a specific folder, or a specific file, etc.). Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for).

### Search project children [GET /search/projects/children]
Find folders and files that current user has permission to view; this is a recursive search.

<h3 style="color:blue;">Design Considerations</h3>
<ul>
<li>
Perhaps we should deprecate the <code>name_contains</code> parameter in <code>GET /projects/{id}/children{?name_contains,kind}</code> and <code>GET /folders/{id}/children{?name_contains,kind}</code>; all recursive project/folder searches would be performed via this search endpoint. 
</li>
<li>
Search criteria are passed as JSON payload in POST body.  Pagination is controlled via URL query parameters (i.e. <code>POST /search/project/children?per_page=25</code>)
</li>
<li>
We will incorporate more complex search features, such as faceting, after an initial pass at the basics.
</li>
<li>
We will support searching tags initially, and then extend to support searching properties (i.e. key/value metadata).
</li>
</ul>

>**Permission:** view_project
- - - - -

>**Search Criteria Properties**
- - - - -
+ **parent_context (object, optional)** - Specify to scope the query to children of this parent.
    + **kind (string, required)** - The kind of object (one of `dds-folder` or `dds-file`).
    + **id (string, required)** - Unique id of the object.
+ **query_text (object, optional)** - Specify to perform full text search.
    + **term (string, required)** - The words or phrases to search for; by default searches in fields `name` and related `tags_term` values. 
    + **in_fields (string[ ], optional)** - The list of fields to search in. This overrides the default; for example: `"in_fields": ["name"]`.
+ **query_bool (object[ ], optional)** - An array of predicate objects expressed in the format: `{ "<field>": { "<operator>": "<value>" }}` - these are combined with the conjunction `AND`.
    + **field (string, required)** - The attribute of the folder/file that is searched. 
    + **operator (string, required)** - The match test that is performed on the data.
    + **value (string|number, required)** - The content of the attribute that is tested.
+ **sort (object, optional)** - Specify a custom sort order.
    + **field (string, required)** - The field to sort by; one of `created_on`, `last_updated_on`.
    + **order (string, required)** - The sort order; one of `asc` or `desc`.
+ **include_related (string[ ], optional)** - List of related resources to include in results; supported resources are `tags` and `properties`.

>**Rules**
- - - - -
+ One of `query_text` or `query_bool` must be specified in the search criteria.
+ The default operator used for `query_text.term` is `OR`; for example, the query `Erich Huang sequencing` is translated to `Erich OR Huang OR sequencing`.  To search fo an exact phrase, enclose phrase in quotes, for example: `"Erich Huang" sequencing`.
+ If `sort` is not specified, sort is based on `best match` ranking (i.e. scoring) of the underlying search engine.  This is a computed value representing the relevance of an item relative to the other items in the result set.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

>**Supported Boolean Query Predicates (Some proposed examples)**  

| field | operators | description |
|:------------|:------------|:------------|
| **kind (string)** | eq | Limit query to only folders (i.e. `dds-folder`) or files (i.e. `dds-file`) |
| **created_on (string)** | lt, lte, eq, neq, gt, gte | Date folder/file was created. |
| **last_updated_on (string)** | lt, lte, eq, neq, gt, gte | Date folder/file was last updated. |

**Dates** *must follow the* **ISO8601** *standard, which is YYYY-MM-DD--that's year-month-day. You may also add some optional time information, formatted as THH:MM:SS+07:00--that's hour-minutes-seconds (HH:MM:SS), followed by a UTC offset (+07:00).**

+ Request (application/json)

        { 
            "query_text": {
                "term": "DNA nano"
            },
            "query_boolean": [
                { "created_on": { "gte", "2015-01-01" }},
                { "created_on": { "lte", "2015-12-31" }}
            ],
            "sort": { "field": "created_on", "order": "desc" },
            "include_related": ["tags"]
        }

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                        { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
                    ],
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                        "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                    },
                    "audit": { },
                    "tags": [ { "id": "4cc2a079-51e4-4a35-b70e-6aae96d52a62", "term": "DNA nanoball" } ]
                }
            ]
        }
-->