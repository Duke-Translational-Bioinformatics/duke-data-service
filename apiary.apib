FORMAT: 1A
HOST: https://dukeds-dev.herokuapp.com/api/v1/

# Duke Data Services

The Duke Data Service (DDS) API allows Duke researchers to store, organize, retrieve and share data.

This the documentation for the Data Service API. Key focuses are on API endpoints that enhance usability for "shallow end of the pool" users, endpoints that support the needs of investigators for managing their research groups, endpoints that accommodate shared resource and core facility needs, endpoints that support SOM administration of data resources, and endpoints that facilitate reproducible scientific workflows. There are tensions to resolve to meet these needs, and we should consider whether the API might be broken up into multiple APIs, whether some business logic be pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design) requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a Request-id in each response header, among others.

## Group API Usage

Client API Key
--------------
Authorized users may generate a secret API key via the Web interface.  This will not be part of the initial API release, referred to herein as the "Minimally Viable Product" (MVP).

User Authentication
--------------
Users will be required to authenticate via a trusted authentication provider (i.e. Duke Shibboleth for MVP).

**Some design assumptions for the MVP:**
* A authentication token (i.e. JWT) will be generated for client applications via a successful HTTPS callback from Duke Shibboleth single sign-on service.  This token must be supplied in header for subsequent API calls.
* Tokens will have an expiration policy of X hours/days.
* When a user authenticates successfully for the fist time via Duke Shibboleth, their user profile will be created in the DDS local user data store.

Collection Pagination
--------------
For endpoints that return a collection of resources/objects, the number of objects returned will be paginated. The number of objects returned per page, and the desired page can be controlled using the query parameters 'page', and 'per_page'.  For example: `/projects?per_page=25`; would return the first 25 projects, and `/projects?page=3&per_page=25` would return the third batch of 25 projects.  Collection payloads will always be returned in an envelope with the 'results' key tied to an array of objects.

    {
        "results": [
            { },
            { },
        ]
    }

To make it easy for clients to manage pagination, the following headers will always be included in the response:

* X-Total: The total number of objects that would be returned by the query unpaginated
* X-Total-Pages: The total number of pages given X-Total and X-Per-Page
* X-Page: Current Page (passed in as query parameter)
* X-Per-Page: per_page (passed in as query parameter)
* X-Next-Page: Next page to be collected
* X-Prev-Page: Previous page (will be empty on first page)

Audit Object
--------------
Resource payloads may include a composite audit object. An example structure of that object is represented here and will be referenced as `<audit_object>` in resource specific payloads.

    {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": {
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner"
        },
        "last_updated_on": "2015-01-01T13:00:00Z",
        "last_updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner"
        },
        "deleted_on": null,
        "deleted_by": null
    }

API Errors
----------------
We should respond with context appropriate error codes, especially for 400 class errors, using the [Standard List](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)

* 400: no API token, validation errors
* 401: bad API token
* 403: user performing request which they do not have permission to perform
* 404: user requesting resource that does not exist

All error responses should include a JSON response that provides the HTTP status code, details of the error that occurred, and possible steps to address the problem. For example:

    {
        "error": "404",
        "reason": "Project does not exist",
        "suggestion": "You may have chosen the wrong ID."
    }

Validation errors require a field-level breakdown with an array of errors (even if multiple errors occur for the same field), each describing the field with the error, and message describing the
error encountered.

    {
        "error": "400",
        "reason": "validation failed",
        "suggestion": "Fix the following invalid fields and resubmit"
        "errors" : [
            {
                "field" : "name",
                "message" : "Project needs a name."
            },
            {
                "field" : "principal_investigator",
                "message" : "Principal Investigator must be specified for each project."
            }
        ]
    }

## Group Authorization Roles
Represents set of discrete permissions that may be granted to a user.

**Authorization Roles:**

| role | name | description | permission(s) |
|:-----|:-----|:------------|:--------------|
| **system_admin** | System Admin | Can manage system level permissions and perform all operations across all projects | system_admin |
| **project_admin** | Project Admin | Can update project details, delete project, manage project level permissions and perform all file operations | view_project, update_project, delete_project, manage_project_permissions, download_file, create_file, update_file, delete_file |
| **project_viewer** | Project Viewer | Can only view project and file metadata | view_project |
| **file_downloader** | File Downloader | Can download files | view_project, download_file |
| **file_uploader** | File Uploader | Can upload files | view_project, create_file |
| **file_editor** | File Editor | Can view, download, create, update and delete files | view_project, download_file, create_file, update_file, delete_file |


**Permissions:**

| permission | description |
|:------------|:------------|
| **system_admin** | Can manage system level permissions and perform all operations across all projects |
| **view_project** | Can view project and file metadata |
| **update_project** | Can update project header details and project affiliations |
| **delete_project** | Can delete project |
| **manage_project_permissions** | Can grant/revoke project level permissions |
| **download_file** | Can download file |
| **create_file** | Can upload new file |
| **update_file** | Can upload new version of existing file |
| **delete_file** | Can delete a file |

## Authorization Roles collection [/auth_roles{?context}]
+ Parameters
    + context (string, optional, `system`) ... The `context` or scope in which permission can be granted; valid context values are "system" or "project".

### List roles [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "system_admin",
                    "name": "System Admin",
                    "description": "Can manage system level permissions and perform all operations across all projects",
                    "permissions": [ { "id": "system_admin" } ],
                    "contexts": [ "system" ],
                    "is_deprecated": false
                }
            ]
        }

## Authorization Role instance [/auth_roles/{id}]
+ Parameters
    + id (string, required, `file_editor`) ... The unique `id` for an authorization role.

### View role [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "file_editor",
            "name": "File Editor",
            "description": "Can view, download, create, update and delete files",
            "permissions": [ { "id": "view_project" }, { "id": "download_file" } ],
            "contexts": [ "project" ],
            "is_deprecated": false
        }

## Group Software Agents
Represents a software agent and associated secret that can be used to access the API endpoints from programmatic clients, such as research core pipelines, or background jobs/tasks (e.g. hash computations, deletion of failed upload storage, etc.).  In an effort to promote provenance, all programmatic access to the API must be via an agent secret in tandem with a user level secret (see `Current User Secret Key`).

## Software Agents collection [/software_agents]

## Create software agent [POST]
Creates software agent and an associated secret API key; the secret key is visible and managed through the `/software_agents/{id}/api_key` action.

>**Permission:** authenticated
- - - - -

>**Request Properties**
- - - - -
+ **name (string)** - A short name for the software agent.
+ **description (string, optional)** - A verbose description for the software agent.
+ **repo_url (string, optional)** - The url of the repository (e.g. Git, Bitbucket, etc.) that contains the agent source code.

+ Request (application/json)

        {
            "name": "Hash computation agent"
        }

+ Response 200 (application/json)

        {
            "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
            "name": "Hash computation agent",
            "description": null,
            "repo_url": null,
            "created_by": {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",   
                "full_name": "Matthew Gardner", 
                "email": "mrgardner01@duke.edu"
            },
            "is_deleted": false,
            "audit": { }
        }

## List software agents [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [ 
                {
                    "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
                    "name": "Hash computation agent",
                    "description": null,
                    "repo_url": null,
                    "created_by": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "username": "mrgardner01",   
                        "full_name": "Matthew Gardner", 
                        "email": "mrgardner01@duke.edu"
                    },
                    "is_deleted": false,
                    "audit": { }
                } 
            ]
        }

## Software Agent instance [/software_agents/{id}]
+ Parameters
    + id (string, required, `9a4c28a2-ec18-40ed-b75c-3bf5b309715`) ... The unique `id` for a software agent.

## View software agent [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

           {
                "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
                "name": "Hash computation agent",
                "description": null,
                "repo_url": null,
                "created_by": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",   
                    "full_name": "Matthew Gardner", 
                    "email": "mrgardner01@duke.edu"
                },
                "is_deleted": false,
                "audit": { }
            }

## Update software agent [PUT]
>**Permission:** owner or system_admin
- - - - -

+ Request (application/json)

        {
            "repo_url": "https://github.com/mgardnerpsu/dukeds-dredd"
        }

+ Response 200 (application/json)

            {
                "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
                "name": "Hash computation agent",
                "description": null,
                "repo_url": "https://github.com/mgardnerpsu/dukeds-dredd",
                "created_by": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",   
                    "full_name": "Matthew Gardner", 
                    "email": "mrgardner01@duke.edu"
                },
                "is_deleted": false,
                "audit": { }
            }

## Delete software agent [DELETE]
>**Permission:** owner or system_admin

>**Rules**
- - - - -
+ Logically deletes software agent (i.e. sets `"is_deleted": true`); deleted agents are not returned by list/view endpoints.

+ Response 204

## Software Agent Secret Key [/software_agents/{id}/api_key]
+ Parameters
    + id (string, required, `9a4c28a2-ec18-40ed-b75c-3bf5b309715`) ... The unique `id` for a software agent.

## View software agent API key [GET]
Shows the secret key for the software agent.

>**Permission:** owner or system_admin
- - - - -

>**Response Properties**
- - - - -
+ **api_key.key (string)** - A secret key that can be used in tandem with a user secret key to obtain an API access token.
+ **api_key.created_on (datetime)** - The date the software agent key was generated.

>**Rules**
- - - - -
+ For this initial implementation, only the agent owner (creator) and users with the system_admin permissions have visibility to the secret key for the agent.

+ Response 200 (application/json)

            {
                "api_key": { 
                    "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ...",
                    "created_on": "2015-01-01T12:00:00Z"
                }
            }

## Re-generates software agent API key [PUT]
Generates a new secret key for the software agent.

>**Permission:** owner or system_admin
- - - - -

+ Response 200 (application/json)

        {
            "api_key": { 
                "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "created_on": "2015-06-01T12:00:00Z"
            }
        }

## Software Agent Access Token [/software_agents/api_token]

## Get software agent access token [GET]
Using a software agent secret key and a user secret key, get an access token (i.e. JWT) that can be specified in the request authorization header.

>**Permission:** public
- - - - -

>**Request Properties**
- - - - -
+ **agent_key (string)** - The secret key for a software agent.
+ **user_key (string)** - The secret key for a user.
+ **accept_ips (string[], optional)** - Array of ip addresses that API will accept HTTPS requests from for this instance of a software agent.  If not specified, then all ip addresses are accepted.  For production software agents, this is recommended.

>**Response Properties**
- - - - -
+ **api_token (string)** - The api token (i.e. JWT) for request authorization.

>**Rules**
- - - - -
+ The agent associated with the agent key must not be logically deleted.

+ Request 

        { 
            "agent_key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "user_key": "klmOiJKV1QiLYHkl098EfNiJJIUzI1NiJ93R..."
        }

+ Response 200 (application/json)

        {
            "api_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6I...",
            "expire_on": 1455571739
        }

## Group Current User
Represents the currently authenticated user.

## Current User instance [/current_user]

### View current user [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100"
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": { }
        }

## Current user usage [GET /current_user/usage]
View summary usage for current user across all projects.

>**Permission:** view_project
- - - - -

>**Response Properties**
- - - - -
+ **project_count (number)** - Total number of projects where the user has been granted a project level authorization role.
+ **file_count (integer)** - Total number of files the user has created (i.e. uploaded) across all projects.
+ **storage_bytes (integer)** - Total bytes for files the user has created (i.e. uploaded) across all projects.

>**Rules**
- - - - -
+ Deleted objects (i.e. `"is_deleted": true`) should be excluded from all counts/totals.
+ Counts/totals are only for objects user has visibility to via the view_project permission.

+ Response 200 (application/json)

        {
            "project_count": 10,
            "file_count": 126,
            "storage_bytes": 304006007009
        }

## Current User Secret Key [/current_user/api_key]

## Generate current user API key [PUT]
Generates a secret key for the current user that can be used to access the API endpoints from a scripting context (i.e. bash, python, R, etc...); this secret key must be used in tandem with a valid software agent secret key (see `Software Agent Secret Key`).

>**Permission:** authenticated
- - - - -

>**Response Properties**
- - - - -
+ **api_key.key (string)** - A secret key that can be used in tandem with a software agent secret key to obtain an API access token.
+ **api_key.created_on (datetime)** - The date the user key was generated.

>**Rules**
- - - - -
+ If the current user already has an API key, invoking this endpoint deletes their exisiting key and generates a new key.

+ Response 200 (application/json)

        {
            "api_key": {
                "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "created_on": "2015-01-01T12:00:00Z"
            }
        }

## View current user API key [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "api_key": {
                "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjY...",
                "created_on": "2015-01-01T12:00:00Z"
            }
        }

## Delete current user API key [DELETE]
>**Permission:** authenticated
- - - - -

+ Response 204 

## Group Users
Represents registered users.

## Users collection [/users{?full_name_contains,first_name_begins_with,last_name_begins_with}]

### List users [GET]
>**Permission:** authenticated
- - - - -

+ Parameters
    + full_name_contains (string, optional, `gardner`) ... Returns users where their `full_name` contains the specified string.
    + first_name_begins_with (string, optional, `mat`) ... Returns users where their `first_name` begins with the specified string.
    + last_name_begins_with (string, optional, `gar`) ... Returns users where their `last_name` begins with the specified string.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "first_name": "Matthew",
                    "last_name": "Gardner",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu",
                    "auth_provider": {
                        "source": "duke_shibboleth",
                        "uid": "gardner100"
                    },
                    "last_login_on": "2015-01-01T12:00:00Z",
                    "audit": { }
                }
            ]
        }

## User instance [/users/{id}]
+ Parameters
    + id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `id` for a user.

### View user [GET]
>**Permission:** authenticated
- - - - -

+ Response 200

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100"
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": { }
        }

## Group System Permissions
Represents system level authorization roles that have been granted to a user.

## System Permissions collection [/system/permissions]

### List system permissions [GET]
>**Permission:** system_admin
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "username": "mrgardner01",
                        "full_name": "Matthew Gardner"
                    },
                    "auth_role": { "id": "system_admin", "name": "System Admin", "description": "Can manage system level permissions and perform all operations across all projects" }
                }
            ]
        }

## System Permission instance [/system/permissions/{user_id}]
+ Parameters
    + user_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "system_admin", "name": "System Admin", "description": "Can manage system level permissions and perform all operations across all projects" }
            }

### Grant system permission [PUT]
>**Permission:** system_admin
- - - - -

>**Rules**
- - - - -
+ Revokes (deletes) any existing system level authorization role for the user and grants new role.
+ The role specified must be a system level authorization role (i.e. "system" in `auth_role.contexts`).

+ Request (application/json)

        {
            "auth_role": { "id": "system_admin" }
        }

+ Response 200

    [System Permission instance][]

### View system permission [GET]
>**Permission:** system_admin OR system permissions are for the current user
- - - - -

+ Response 200

    [System Permission instance][]

### Revoke system permission [DELETE]
>**Permission:** system_admin
- - - - -

+ Response 204

## Group Projects
Represents a container for storing, organizing, retrieving and sharing research data files and their associated metadata.

## Projects collection [/projects]

### Create project [POST]
>**Permission:** authenticated
- - - - -

>**Rules**
- - - - -
+ User who creates project is granted the `project_admin` authorization role.
+ The `project.name` must be unique.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 201 (application/json)

        {
            "kind": "dds-project",
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false,
            "audit": { }
        }

### List projects [GET]
>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Projects that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)",
                    "description": "Goal of generating a targeted knockout mutation...",
                    "is_deleted": false,
                    "audit": { }
                }
            ]
        }

## Project instance [/projects/{id}]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

+ Model (application/json)

    + Body

            {
                "kind": "dds-project",
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "audit": { }
            }

### View project [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Project instance][]

### Update project [PUT]
>**Permission:** update_project
- - - - -

>**Rules**
- - - - -
+ Only `name` and `description` properties may be updated; this endpoint supports PATCH semantics.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 200

    [Project instance][]

### Delete project [DELETE]
>**Permission:** delete_project
- - - - -

>**Rules**
- - - - -
+ Logically deletes project (i.e. sets `"is_deleted": true`).
+ This operation recursively deletes (logical delete) all of the project children (folders and files).

+ Response 204

## Group Project Permissions
Represents project level authorization roles that have been granted to a user.

## Project Permissions collection [/projects/{id}/permissions]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

### List project permissions [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "username": "mrgardner01",
                        "full_name": "Matthew Gardner"
                    },
                    "auth_role": { "id": "file_editor", "name": "File Editor", "description": "Can view, download, create, update and delete files" }
                }
            ]
        }

## Project Permission instance [/projects/{project_id}/permissions/{user_id}]
+ Parameters
    + project_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `project_id` of the project.
    + user_id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

             {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "file_editor", "name": "File Editor", "description": "Can view, download, create, update and delete files" }
            }

### Grant project permission [PUT]
>**Permission:** manage_project_permissions
- - - - -

>**Rules**
- - - - -
+ Revokes (deletes) any existing project level authorization role for the user and grants new role.
+ The role specified must be a project level authorization role (i.e. "project" in `auth_role.contexts`).
+ The project must have at least one user with the `project_admin` role.
+ The current user cannot grant or revoke their own project level role.

+ Request (application/json)

        {
            "auth_role": { "id": "file_editor" }
        }

+ Response 200

    [Project Permission instance][]

### View project permission [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Project Permission instance][]

### Revoke project permission [DELETE]
>**Permission:** manage_project_permissions
- - - - -

>**Rules**
- - - - -
+ The project must have at least one user with the `project_admin` role.
+ The current user cannot revoke their own project level role.

+ Response 204

## Group Project Roles
Represents an organizational role that an individual (i.e. user) may assume in the context of a project.  These organizational roles have no relationship to authorization roles.

**Project Roles:**

| role | name | description |
|:-----|:-----|:------------|
| **principal_investigator** | Principal Investigator | Lead investigator for the research project |
| **research_coordinator** | Research Coordinator | Coordinator for the research project |

## Project Roles collection [/project_roles]

### List project roles [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "principal_investigator",
                    "name": "Principal Investigator",
                    "description": "Lead investigator for the research project",
                    "is_deprecated": false
                },
                {
                    "id": "research_coordinator",
                    "name": "Research Coordinator",
                    "description": "Coordinator for the research project",
                    "is_deprecated": false
                }
            ]
        }

## Project Role instance [/project_roles/{id}]
+ Parameters
    + id (string, required, `principal_investigator`) ... The unique `id` for a project role.

### View project role [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "principal_investigator",
            "name": "Principal Investigator",
            "description": "Lead investigator for the research project",
            "is_deprecated": false
        }

### Group Affiliates
Represents an individual that plays some project level role of interest from a collaboration perspective.  The affiliate may be internal (i.e. a DDS user) or external (i.e. non-DDS user).  For the MVP, we will assume all affiliates must be a DDS user.

## Affiliates collection [/projects/{id}/affiliates]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

### List affiliates [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "full_name": "Matthew Gardner",
                        "email": "mrgardner01@duke.edu"
                    },
                    "project_role": { "id": "principal_investigator", "name": "Principal Investigator" }
                }
            ]
        }

## Affiliate instance [/projects/{project_id}/affiliates/{user_id}]
+ Parameters
    + project_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `project_id` of the project.
    + user_id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu"
                },
                "project_role": { "id": "principal_investigator", "name": "Principal Investigator" }
            }

### Associate affiliate [PUT]
>**Permission:** update_project
- - - - -

>**Rules**
- - - - -
+ Deletes any existing project role for the user and assigns new role.

+ Request (application/json)

        {
            "project_role": { "id": "principal_investigator" }
        }

+ Response 200

    [Affiliate instance][]

### View affiliate [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Affiliate instance][]

### Delete affiliate [DELETE]
>**Permission:** update_project
- - - - -

+ Response 204

## Group Storage Providers
Represents an external service that provides physical storage space for DDS files.

## Storage Providers collection [/storage_providers]

### List storage providers [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                    "name": "duke_oit_swift",
                    "description": "Duke OIT Storage",
                    "default_hash_algorithm": "md5",
                    "is_deprecated": false
                },
                {
                    "id": "t4479f73-0774-4f96-afc7-9d251e65by88",
                    "name": "amazon_s3_glacier",
                    "description": "Amazon Glacier Cloud Storage",
                    "default_hash_algorithm": "sha1",
                    "is_deprecated": false
                }
            ]
        }

## Storage Provider instance [/storage_providers/{id}]
+ Parameters
    + id (string, required, `g5579f73-0558-4f96-afc7-9d251e65bv33`) ... The unique `id` of the storage provider.


### View storage provider [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
            "name": "duke_oit_swift",
            "description": "Duke Office of Information Technology Storage",
            "default_hash_algorithm": "md5",
            "is_deprecated": false
        }

## Group Folders
A folder is a container for files and sub-folders; folders are located in the top-level project root or a a parent folder.

## Folders collection [/folders]

### Create folder [POST]
>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **parent.kind (string, required)** - The kind of parent container for the folder; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ **parent.id (string, required)** - The unique id of the parent.
+ **name (string, required)** - A short name for the folder.

>**Response Properties**
- - - - -
+ **ancestors (object[ ])** - Represents entire ancestral path, from the root node (project or folder), down to its parent, in hierarchical order.

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Folder instance [/folders/{id}]
+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

### View folder [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

### Delete folder [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ Logically deletes folder (i.e. sets `"is_deleted": true`).
+ This operation recursively deletes (logical delete) all of the folder children (folders and files).

+ Response 204

## Move folder [PUT /folders/{id}/move]
>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ Folders can only be moved within the context of the current project - cross project moves are currently not supported.
+ The destination folder cannot be a child of the folder being moved.

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc", "name": "Flow Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Rename folder [PUT /folders/{id}/rename]
>**Permission:** create_file
- - - - -

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "name": "Model Data"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Model Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc", "name": "Flow Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Group Uploads
All files must be uploaded using a multi-part/chunked upload process.  Although this places more burden on clients to divide larger files into chunks and send each chunk separately, the result is a more robust process that allows failed chunks to be resent.  The following endpoints must be used by the client to manage the chunked upload process.

## Uploads collection [/projects/{id}/uploads]
+ Parameters
    + id (required, string, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... Globally unique `id` of the project.

### Initiate chunked upload [POST]
This is the first step in uploading a large file. An upload objects is created along with a composite status object that can be polled by client to track the progress of the chunked upload.

>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **name (string, required)** - The name of the client file to upload.
+ **content_type (string, optional)** - Valid content type per [media types](https://en.wikipedia.org/wiki/Internet_media_type).
+ **size (number, required)** - The size in bytes of entire file (computed by client).
+ **hash.value (number, required)** - The entire file hash (computed by client).
+ **hash.algorithm (string, required)** - The algorithm used to compute entire file hash (i.e. md5, sha256, sha1, etc.) - only `sha1` is currently supported.

>**Response Properties**
- - - - -
+ **chunks (object)** - The chunks the client has requested to upload.
+ **storage_location (object)** - Object that contains physical file storage details.
+ **status (object)** - Object used to track status of overall file upload.

>**Rules**
- - - - -
+ The client reported hash of entire file must be a `sha1`; the server reported hash will be computed as a `sha1` - this will allow client reported hash verification.

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                "algorithm": "sha1" 
            }
        }

+ Response 201 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "client_reported": {
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "sha1"
                },
                "server_reported": null
            },
            "chunks": [ ],
            "storage_provider": { 
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                "name": "duke_oit_swift", "description": 
                "Duke OIT Storage" 
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

### List chunked uploads [GET]
>**Permission:** create_file
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "content_type": "application/octet-stream",
                    "hash": { 
                        "client_reported": {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                            "algorithm": "sha1"
                        },
                        "server_reported": null
                    },
                    "chunks": [ ],
                    "storage_provider": { 
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                        "name": "duke_oit_swift", 
                        "description": "Duke OIT Storage" 
                    },
                    "status": {
                        "initiated_on": "2015-07-10T13:00:00Z",
                        "completed_on": null,
                        "error_on": null,
                        "error_message": null
                    },
                    "audit": { }
                }
            ]
        }

## Upload instance [/uploads/{id}]
+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

## View chunked upload [GET]
>**Permission:** create_file
- - - - -

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "client_reported": {
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "sha1"
                },
                "server_reported": null
            },
            "chunks": [
                {
                    "number": 1,
                    "size": 10000,
                    "hash": { 
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                        "algorithm": "md5" 
                    }
                }
            ],
            "storage_provider": { 
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                "name": "duke_oit_swift", 
                "description": 
                "Duke OIT Storage" 
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Get pre-signed chunk URL  [PUT /uploads/{id}/chunks]
Generates and returns a pre-signed URL that can be used by client to upload a file chunk to the storage provider. This step is repeated for each chunk.  If the chunk uploads fails, the client must call this endpoint again to get a new pre-signed URL for the chunk number, then retry the upload.

>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **number (number, required)** - The chunk number.
+ **size (number, required)** - The size of the chunk in bytes (computed by client).
+ **hash.value (string, required)** - The chunk hash (computed by client).
+ **hash.algorithm (string, required)** - The hash algorithm used (i.e. md5, sha256, sha1, etc.) - this must be the default algorithm supported by storage provider (i.e. `storage_provider.default_hash_algorithm`)

>**Response Properties**
- - - - -
+ **http_verb (string)** - The http verb to use for uploading the next chunk.
+ **host (string)** - The storage provider host.
+ **url (string)** - The signed URL endpoint for uploading the next chunk to the storage provider.
+ **http_headers (object[ ])** - Array of headers (i.e. key/value pairs) that must be included in the client upload request.

>**Rules**
- - - - -
+ The client specified `hash.algorithm` must match the `storage_provider.default_hash_algorithm`.

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Request (application/json)

        {
            "number": 1,
            "size": 5024000,
            "hash": { 
                "value": "ey23df2207d99a74fbe169e3eba035e633b65d76", 
                "algorithm": "md5" 
            }
        }

+ Response 200 (application/json)

        {
            "http_verb": "PUT",
            "host": "duke_data_service_prod.s3.amazonaws.com",
            "url": "/666be35a-98e0-4c2e-9a17-7bc009f9bb23?partNumber=1&uploadId=EXAMPLEJZ6e0YupT2...&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN...",
            "http_headers": [
                { "Content-Length": "5024000" }
            ]
        }

## Complete chunked file upload [PUT /uploads/{id}/complete]
This operation is called by the client after all file chunks have been successfully uploaded to the storage provider.

>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ If the storage provider requires the individual chunks to be assembled, such as Amazon S3, this operation will call the storage provider endpoint to assemble the parts into a single file object.
+ The client reported file hash for each chunk must equal the storage provider computed file hash for the same chunk, or an upload error is reported.
+ The client reported file size (bytes) must equal the storage provider reported file size, or an upload error is reported.
+ If there are no errors, the `upload_status.complete_on` is set to the current timestamp.

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "client_reported": {
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "sha1"
                },
                "server_reported": null
            },
            "chunks": [
                {
                    "number": 1,
                    "size": 5024000,
                    "hash": { 
                        "value": "jw23df2207d99a74fbe169e3eba035e633b65d88", 
                        "algorithm": "md5" 
                    }
                },
                {
                    "number": 2,
                    "size": 5024000,
                    "hash": { 
                        "value": "ry23df2207d99a74fbe169e3eba035e633b65dkq", 
                        "algorithm": "md5" 
                    }
                }
            ],
            "storage_provider": { 
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                "name": "duke_oit_swift", 
                "description": "Duke OIT Storage" 
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": "2015-07-10T13:00:00Z",
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Report server computed hash [PUT /uploads/{id}/server_hash]
This action is called by a background task that computes a `sha1` hash for completed file uploads.

>**Permission:** system_admin
- - - - -

>**Request Properties**
- - - - -
+ **hash.value (string, required)** - The entire file hash (computed by server task).
+ **hash.algorithm (string, required)** - The hash algorithm used (i.e. md5, sha256, sha1, etc.) - only `sha1` is currenlty supported.

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Request (application/json)

        {
            "hash": { 
                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                "algorithm": "sha1" 
            }
        }

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "client_reported": {
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "sha1"
                },
                "server_reported": {
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "sha1"
                }
            },
            "chunks": [
                {
                    "number": 1,
                    "size": 5024000,
                    "hash": { 
                        "value": "jw23df2207d99a74fbe169e3eba035e633b65d88", 
                        "algorithm": "md5" 
                    }
                },
                {
                    "number": 2,
                    "size": 5024000,
                    "hash": { 
                        "value": "ry23df2207d99a74fbe169e3eba035e633b65dkq", 
                        "algorithm": "md5" 
                    }
                }
            ],
            "storage_provider": { 
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                "name": "duke_oit_swift", 
                "description": "Duke OIT Storage" 
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": "2015-07-10T13:00:00Z",
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Group Search Uploads
Represents endpoints for searching uploads across projects.

## Search uploads [GET /uploads{?server_hash_pending}]
Search for project uploads; this endpoint will facilitate finding uploads that are the target of background jobs/tasks (e.g. hash computation, etc.).  This endpoint may be deprecated when we integrate queueing framework.

>**Permission:** system_admin
- - - - -

+ Parameters
    + server_hash_pending (boolean, required, `true`) ... If true specified, returns all completed uploads (`status.completed_on is not null`) that have not had their server hash computed (`hash.server_reported is null`).
   
+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "content_type": "application/octet-stream",
                    "hash": { 
                        "client_reported": {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                            "algorithm": "sha1"
                        },
                        "server_reported": null
                    },
                    "chunks": [ ],
                    "storage_provider": { 
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                        "name": "duke_oit_swift", 
                        "description": "Duke OIT Storage" 
                    },
                    "status": {
                        "initiated_on": "2015-07-10T13:00:00Z",
                        "completed_on": null,
                        "error_on": null,
                        "error_message": null
                    },
                    "audit": { }
                }
            ]
        }

## Group Files
A research data file; a file resource represents the descriptive metadata about a physical data file.

## Files collection [/files]

### Create file [POST]
Creates a file metadata object; The client is responsible for the creation of this object after confirming the associated physical file has been successfully uploaded to a storage provider (see `Uploads`).

>**Permission:** create_file
- - - - -

>**Properties**
- - - - -
+ **parent.kind (string, required)** - The kind of parent container for the file; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ **parent.id (string, required)** - The unique id of the parent.
+ **upload.id (string, required)** - The unique id for an upload that completed successfully.

>**Rules**
- - - - -
+ The current user must be the user who uploaded the file.
+ The parent object (`dds-project` or `dds-folder`) must be associated with the same project that the upload object is associated with.
+ The upload must be in a completed state (i.e. `upload.completed_on != null`).

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "ad9115b8-1e4a-4399-b606-56622eb462e1" },
            "upload": { "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23" }
        }

+ Response 201 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                    "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                },
            "audit": { }
        }

## File instance [/files/{id}]
+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

### View file [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                    "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                },
            "audit": { }
        }

### Delete file [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ Logically deletes file (i.e. sets `"is_deleted": true`).

+ Response 204

## Get pre-signed download URL [GET /files/{id}/url]
Generates and returns a storage provider specific pre-signed URL that client can use to download file.

>**Permission:** download_file
- - - - -

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

+ Response 200 (application/json)

        {
            "http_verb": "GET",
            "host": "swift.oit.duke.edu",
            "url": "/v1/AUTH_dev/418da9e8-7d01-4761-982c-811d95ac6653/0618a1bc-5042-48d2-af66-ed171354bf6b?temp_url_sig=93b5c5a2c920f0d4962c391d932e4054ec76916c&temp_url_expires=1448918738",
            "http_headers": []
        }

## Move file [PUT /files/{id}/move]
>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ Files can only be moved within the context of the current project - cross project moves are currently not supported.

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
            ],
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
            },
            "audit": { }
        }

## Rename file [PUT /files/{id}/rename]
>**Permission:** create_file
- - - - -

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.


+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
            ],
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
            },
            "audit": { }
        }

## Group Search Children
Search for the children (i.e. folders and files) of a project or folder.

## Search project children [GET /projects/{id}/children{?name_contains,kind}]

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the project unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the project hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
                    "name": "Raw Data",
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                        { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                        { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
                    ],
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                        "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                    },
                    "audit": { }
                }
            ]
        }

## Search folder children [GET /folders/{id}/children{?name_contains,kind}]

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the folder unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the folder hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the folder.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                 {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
                    "name": "Raw Data",
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                        { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" },
                        { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
                    ],
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                        "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                    },
                    "audit": { }
                }
            ]
        }

<!--API features for future sprints...
## Group Tags
A tag is a term (i.e. word or phrase) that can be associated to a DDS object to faciliate classification and searching. 

## Tags collection [/tags]

### Create tag [POST]
>**Permission:** [object.kind in (dds-folder, dds-file)] create_file 
- - - - -

>**Properties**
- - - - -
+ **object.kind (string, required)** - The kind of object to tag.
+ **object.id (string, required)** - The unique id of the object to tag.
+ **term (string, required)** - The textual tag content.

>**Rules**
- - - - -
+ Supported objects are folder (i.e. `dds-folder`) and file (i.e. `dds-file`).
+ The `tag.term` must be unique withing the context of the tagged `object`.

+ Request (application/json)

        { 
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "term": "SMRT sequencing"
        }
    
+ Response 201 (application/json)

        { 
            "id": "66211c4e-a49e-42d7-9793-87989d56e1e3",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "term": "SMRT sequencing",
            "audit": { }
        }

### List object tags [GET /tags/{?object_kind,object_id}]
Get a list of tags for an object.

>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Parameters
    + object_kind (string, required, `dds-file`) ... The kind of object.
    + object_id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique id of the object.
    
+ Response 200 (application/json)

        {
            "results": [
                { 
                    "id": "66211c4e-a49e-42d7-9793-87989d56e1e3",
                    "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
                    "term": "SMRT sequencing",
                    "audit": { }
                }
            ]
        }

### List distinct tag terms [GET /tags/terms{?term_contains,object_kind}]
Get list of all the **distinct** `tag.term` values for objects the current user has permission to view.  Web and native UX client apps can use this endpoint to allow users to apply an exisiting term to another object via a type-ahead widget.

>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Parameters
    + term_contains (string, optional, `sequen`) ... If provided, searches for tags that contain this text fragment.
    + object_kind (string, optional, `dds-file`) ... If provided, this narrows the search context to tags for this kind of object.


+ Response 200 (application/json)

        {
            "results": [
                "SMRT sequencing",
                "Polony sequencing",
                "DNA nanoball sequencing"
            ]

        }

## Tag instance [/tags/{id}]
+ Parameters
    + id (string, required, `66211c4e-a49e-42d7-9793-87989d56e1e3`) ... The unique id of the tag.

### View tag [GET]
>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Response 200 (application/json)

        { 
            "id": "66211c4e-a49e-42d7-9793-87989d56e1e3",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "term": "SMRT sequencing",
            "audit": { }
        }

### Delete tag [DELETE]
>**Permission:** [object.kind in (dds-folder, dds-file)] create_file
- - - - -

+ Response 204 

## Group Properties
A property is a key/value pair that can be associated to a DDS object; this allows the storage of additional structured metadata about objects.

<h3 style="color:blue;">Design Considerations</h3>
<ul>
<li>
Should we allow users to create a "metadata template (i.e. schema) for properties" at the project level? A template instance could be associated to all files in a project, or all files in a folder or a specific file?  The template would define the valid property keys, a display label for each key, and perhaps a simple type (string, number, date, enum).  This may improve the quality of metatdata captured?
</li>
</ul>

## Properties collection [/properties]

### Create property [POST]
>**Permission:** [object.kind in (dds-folder, dds-file)] create_file 
- - - - -

>**Properties**
- - - - -
+ **object.kind (string, required)** - The kind of object to add property to.
+ **object.id (string, required)** - The unique id of the object to add property to.
+ **key (string, required)** - The key of this property.
+ **value (string, required)** - The value of this property; set to `null` to specifiy no value. 

>**Rules**
- - - - -
+ Supported objects are folder (i.e. `dds-folder`) and file (i.e. `dds-file`).
+ The `property.key` must be unique withing the context of the `object`.

+ Request (application/json)

        { 
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball"
        }
    
+ Response 201 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball",
            "audit": { }
        }

### List object properties [GET /properties/{?object_kind,object_id}]
Get a list of properties for an object.

>**Permission:** [object.kind in (dds-folder, dds-file)] view_project
- - - - -

+ Parameters
    + object_kind (string, required, `dds-file`) ... The kind of object.
    + object_id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique id of the object.
    
+ Response 200 (application/json)

        {
            "results": [
                { 
                    "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
                    "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
                    "key": "sequencing_method",
                    "value": "DNA nanoball",
                    "audit": { }
                }
            ]
        }

### List distinct keys [GET /properties/keys{?key_contains,object_kind}]
Get list of all the **distinct** `property.key` values for objects the current user has permission to view.  Web and native UX client applications can use this endpoint to allow users to specify an exisiting key for another object via a type-ahead widget.

>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Parameters
    + key_contains (string, optional, `sequenc`) ... If provided, searches for keys that contain this text fragment.
    + object_kind (string, optional, `dds-file`) ... If provided, this narrows the search context to keys for this kind of object.

+ Response 200 (application/json)

        {
            "results": [
                "sequencing_method",
                "sequencing_platform"
            ]

        }

### List distinct values for key [GET /properties/values{?key,value_contains,object_kind}]
Get list of all the **distinct** `property.value` values that have been assigned to a `property.key`, for objects the current user has permission to view.  Web and native UX client applications can use this endpoint to allow users to specify an exisiting value for another object via a type-ahead widget.

>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Parameters
    + key (string, required, `sequencing_platform`) ... The key to search within for distinct values.
    + value_contains (string, optional, `illum`) ... If provided, searches for values that contain this text fragment.
    + object_kind (string, optional, `dds-file`) ... If provided, this narrows the search context to values for this kind of object.

+ Response 200 (application/json)

        {
            "results": [
                "illumina MiSeq",
                "illumina MiSeqDx"
            ]

        }

## Property instance [/properties/{id}]
+ Parameters
    + id (string, required, `246a4a86-5c79-48bb-b5e6-85b8014cb778`) ... The unique id of the property.

### View property [GET]
>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Response 200 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball",
            "audit": { }
        }

### View property by key [GET /properties{?object_kind,object_id,key}]
Get a property for an object by key.

>**Permission:** [object.kind in (dds-folder, dds-file)]] view_project
- - - - -

+ Parameters
    + object_kind (string, required, `dds-file`) ... The kind of object.
    + object_id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique id of the object.
    + key (string, required, `sequencing_method`) ... The key to get.

+ Response 200 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "DNA nanoball",
            "audit": { }
        }

### Update property [PUT]
>**Permission:** [object.kind in (dds-folder, dds-file)]] create_file
- - - - -

>**Rules**
- - - - -
+ Only `key` and `value` properties may be updated; this endpoint supports PATCH semantics.

+ Request (application/json)

        { 
            "value": "Polony"
        }
    
+ Response 201 (application/json)

        { 
            "id": "246a4a86-5c79-48bb-b5e6-85b8014cb778",
            "object": { "kind": "dds-file", "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111" },
            "key": "sequencing_method",
            "value": "Polony",
            "audit": { }
        }


### Delete property [DELETE]
>**Permission:** [object.kind in (dds-folder, dds-file)]] create_file
- - - - -

+ Response 204 

## Group Activities
An activity is something that occurs over a period of time and acts upon or with DDS objects; it may include consuming, processing, transforming, modifying, relocating, using, or generating objects (i.e. folders, files, etc.).  These are activities recorded/tracked by researchers and their software agents (i.e. pipelines) with the intent of maintaining comprehensive data provenance.

## Activities collection [/activities]

### Create activity [POST]
>**Permission:** authenticated
- - - - -

>**Properties**
- - - - -
+ **name (string, required)** - A short name for this activity.
+ **description (string, optional)** - A verbose description of this activity.
+ **started_on (string, optional)** - The datetime this activity was started; defaults to the current datetime if not specified.
+ **ended_on (string, optional)** - The datetime this activity ended.

>**Rules**
- - - - -
+ The `ended_on` datetime must be greater than or equal to the `started_on` datetime. 

+ Request (application/json)

        { 
            "name": "RF PI3-Kinase",
            "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": null,
            "is_deleted": false,
            "audit": { }
        }

### List activities [GET]
>**Permission:** 
- - - - -
+ Current user owns (i.e. created) the activity OR 
+ Current user has view permission (i.e. view_project) for a project folder/file the activity has a provenace relation with; this can be a "used" (i.e. `dds-relation-used`) or "generated" (i.e. `dds-relation-generated`) relation.

>**Rules**
- - - - -
+ Activities that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-activity",
                    "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                    "name": "RF PI3-Kinase",
                    "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
                    "started_on": "2015-01-01T12:00:00Z",
                    "ended_on": null,
                    "is_deleted": false,
                    "audit": { }
                }
            ]
        }

## Activities instance [/activities/{id}]

### View activity [GET]
>**Permission:** 
- - - - -
+ Current user owns (i.e. created) the activity OR 
+ Current user `view_project` for project folder/file the activity has a provenace relation with; this can be a "used" (i.e. `dds-relation-used`) or "generated" (i.e. `dds-relation-generated`) relation.

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": null,
            "is_deleted": false,
            "audit": { }
        }

### Update activity [PUT]
>**Permission:** 
- - - - -
+ Current user owns (i.e. created) the activity OR 
+ Current user has `create_file` for project folder/file the activity has a provenace relation with; this can be a "used" (i.e. `dds-relation-used`) or "generated" (i.e. `dds-relation-generated`) relation.

>**Rules**
- - - - -
+ Only `name`, `description`, `started_on`, and `updated_on` properties may be updated; this endpoint supports PATCH semantics.

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Request (application/json)

        {
            "ended_on": "2015-01-01T114:30:00"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": "2015-01-01T114:30:00Z",
            "is_deleted": false,
            "audit": { }
        }

### Update activity started date [PUT /activities/{id}/started]
A convenience action to set started date to current system date.

>**Permission:** Same as "Update activity" action
- - - - -

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": "2015-01-01T114:30:00Z",
            "is_deleted": false,
            "audit": { }
        }

### Update activity ended date [PUT /activities/{id}/ended]
A convenience action to set ended date to current system date.

>**Permission:** Same as "Update activity" action
- - - - -

+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": "2015-01-01T114:30:00Z",
            "is_deleted": false,
            "audit": { }
        }

### Delete activity [DELETE]
>**Permission:** Same as "Update activity" action
- - - - -

>**Rules**
- - - - -
+ Logically deletes activity (i.e. sets `"is_deleted": true`).

+ Response 204

## Group Events
This API provides insight to users about what key events have occurred.  This is a read-only API to view the events; events of interest are derived from the execution of other API actions. 

<h3 style="color:blue;">Design Considerations</h3>
<ul>
<li>
What events do we want to publish/expose via this endpoint?
</li>
</ul>

>**Event Properties**
- - - - -
+ **published_on (string, required)** - The datetime of the event.
+ **kind (string, required)** - Defines the kind or type of event; these are expressed in the standard format: `<dds-object>-<verb>`. 
+ **actor (object, required)** - The entity that triggered the event; currently this is always a user (i.e. `dds-user`).
+ **object (object, required)** - The primary object of the event; for example this may be a `folder` or a `file`, etc.
+ **target (object, optional)** - The indirect object, or target, of the event. The precise meaning of the target is largely dependent on the `kind` of event being described, but will often be the object of the English preposition "to". For instance, the event "Erich Huang moved folder: Sequenceng_Raw to folder: Sequencing_Raw_Archive" - the target of this event is `folder: Sequencing_Raw_Archive`.
+ **message (string, required)** - The message rendered based on a `message_template` specific to the `kind` of event.
+ **context (object, required)** - The context (or scope) of the event; currently this is always a project (i.e. `dds-project`).

>**Supported Events (Some proposed examples)** 

| kind | actor | object | target | message_template |
|:------------|:------------|:------------|:------------|:------------|
| **dds-project-permission-granted** | `dds-user` | `dds-project-permission` | `null` | "Granted role { `primary.auth_role.name` } to { `primary.user.full_name` }" |
| **dds-project-permission-revoked** | `dds-user` | `dds-project-permission` | `null` | "Revoked role { `primary.auth_role.name` } from { `primary.user.full_name` }" |
| **dds-upload-started** | `dds-user` | `dds-upload` | `null` | "Upload initiated for file { `primary.name` }" |
| **dds-upload-completed** | `dds-user` | `dds-upload` | `null` | "Upload completed for file { `primary.name` }" |
| **dds-file-move** | `dds-user` | `dds-file` | `dds-file` | "File { `primary.name` } moved from { `primary.parent.name` } to { `target.parent.name` }"" |

*For the objects:* **actor**, **primary** and **target** *abbreviated JSON representations are used in the API examples herein, not the complete resource payload.*

## List events [GET /events]
List the events; most recent events are sorted to the top of the list.

>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {   
            "results": [
                {
                    "published_on": "2016-01-01T12:45:00Z",
                    "kind": "dds-upload-completed",
                    "actor": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "full_name": "Matthew Gardner"
                    },
                    "object": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                        "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata"
                    },
                    "target": null,
                    "message": "Upload completed for file RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "context": { "kind": "dds-project", "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" }
                },
                {
                    "published_on": "2016-01-01T12:00:00Z",
                    "kind": "dds-upload-started",
                    "actor": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "full_name": "Matthew Gardner"
                    },
                    "object": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                        "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata"
                    },
                    "target": null,
                    "message": "Upload initiated for file RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "context": { "kind": "dds-project", "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" }
                }        
            ]
        }

## Group Full-Text Search 
The Search API is optimized to help you find the specific DDS objects you're looking for (e.g., a specific project, a specific folder, or a specific file, etc.). Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for).

### Search project children [GET /search/projects/children]
Find folders and files that current user has permission to view; this is a recursive search.

<h3 style="color:blue;">Design Considerations</h3>
<ul>
<li>
Perhaps we should deprecate the <code>name_contains</code> parameter in <code>GET /projects/{id}/children{?name_contains,kind}</code> and <code>GET /folders/{id}/children{?name_contains,kind}</code>; all recursive project/folder searches would be performed via this search endpoint. 
</li>
<li>
Search criteria are passed as JSON payload in POST body.  Pagination is controlled via URL query parameters (i.e. <code>POST /search/project/children?per_page=25</code>)
</li>
<li>
We will incorporate more complex search features, such as faceting, after an initial pass at the basics.
</li>
<li>
We will support searching tags initially, and then extend to support searching properties (i.e. key/value metadata).
</li>
</ul>

>**Permission:** view_project
- - - - -

>**Search Criteria Properties**
- - - - -
+ **parent_context (object, optional)** - Specify to scope the query to children of this parent.
    + **kind (string, required)** - The kind of object (one of `dds-folder` or `dds-file`).
    + **id (string, required)** - Unique id of the object.
+ **query_text (object, optional)** - Specify to perform full text search.
    + **term (string, required)** - The words or phrases to search for; by default searches in fields `name` and related `tags_term` values. 
    + **in_fields (string[ ], optional)** - The list of fields to search in. This overrides the default; for example: `"in_fields": ["name"]`.
+ **query_bool (object[ ], optional)** - An array of predicate objects expressed in the format: `{ "<field>": { "<operator>": "<value>" }}` - these are combined with the conjunction `AND`.
    + **field (string, required)** - The attribute of the folder/file that is searched. 
    + **operator (string, required)** - The match test that is performed on the data.
    + **value (string|number, required)** - The content of the attribute that is tested.
+ **sort (object, optional)** - Specify a custom sort order.
    + **field (string, required)** - The field to sort by; one of `created_on`, `last_updated_on`.
    + **order (string, required)** - The sort order; one of `asc` or `desc`.
+ **include_related (string[ ], optional)** - List of related resources to include in results; supported resources are `tags` and `properties`.

>**Rules**
- - - - -
+ One of `query_text` or `query_bool` must be specified in the search criteria.
+ The default operator used for `query_text.term` is `OR`; for example, the query `Erich Huang sequencing` is translated to `Erich OR Huang OR sequencing`.  To search fo an exact phrase, enclose phrase in quotes, for example: `"Erich Huang" sequencing`.
+ If `sort` is not specified, sort is based on `best match` ranking (i.e. scoring) of the underlying search engine.  This is a computed value representing the relevance of an item relative to the other items in the result set.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

>**Supported Boolean Query Predicates (Some proposed examples)**  

| field | operators | description |
|:------------|:------------|:------------|
| **kind (string)** | eq | Limit query to only folders (i.e. `dds-folder`) or files (i.e. `dds-file`) |
| **created_on (string)** | lt, lte, eq, neq, gt, gte | Date folder/file was created. |
| **last_updated_on (string)** | lt, lte, eq, neq, gt, gte | Date folder/file was last updated. |

**Dates** *must follow the* **ISO8601** *standard, which is YYYY-MM-DD--that's year-month-day. You may also add some optional time information, formatted as THH:MM:SS+07:00--that's hour-minutes-seconds (HH:MM:SS), followed by a UTC offset (+07:00).**

+ Request (application/json)

        { 
            "query_text": {
                "term": "DNA nano"
            },
            "query_boolean": [
                { "created_on": { "gte", "2015-01-01" }},
                { "created_on": { "lte", "2015-12-31" }}
            ],
            "sort": { "field": "created_on", "order": "desc" },
            "include_related": ["tags"]
        }

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                        { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
                    ],
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                        "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                    },
                    "audit": { },
                    "tags": [ { "id": "4cc2a079-51e4-4a35-b70e-6aae96d52a62", "term": "DNA nanoball" } ]
                }
            ]
        }
-->