FORMAT: 1A
HOST: http://data-services.duke.edu/

# Duke Data Services

The Duke Data Service API allows Duke researchers to store, organize, retrieve and share data.

The intent here is to create a strawman for the data service API. Key focuses are on API endpoints
that enhance usability for "shallow end of the pool" users, endpoints that support the needs of
investigators for managing their research groups, endpoints that accommodate shared resource and
core facility needs, endpoints that support SOM administration of data resources, and endpoints that
facilitate reproducible scientific workflows. There are tensions to resolve to meet these needs, and we
should consider whether the API might be broken up into multiple APIs, whether some business logic be
pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design)
requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a
Request-id in each response header, among others.

## Group API Usage

Client API Key
--------------
Authorized users may generate a secret API key via the Web interface \- liken to Google API key
provisioning model.  This will not be part of the initial product release (i.e. MVP).

User Authentication
--------------
Users will be required to authenticate via a trusted authentication provider.
(i.e. Duke Shibboleth for MVP)

**Some design assumptions for the MVP:**
* A token (i.e. JWT) will be generated via a successful HTTPS callback from Duke Shibboleth single
sign-on service.  This token must be supplied in header for subsequent API calls.
* Tokens will have an expiration policy of X hours/days.
* When a user authenticates successfully for the fist time via Duke Shibboleth, their user profile
will be created in the platforms local user data store.

Collection Pagination
--------------
For endpoints that return a collection of resources/objects, the number of objects returned can be
controlled by including the `limit` query parameter.  For example: `/projects?limit=25`; Collection
payloads may have the following structure to facilitate client pagination:

    {
        "count": 100,
        "limit": 25,
        "next": "https://data-services.duke.edu/projects?page=3",
        "previous": "https://data-services.duke.edu/projects?page=1",
        "results": [
            <resource_object>,
            <resource_object>,
            ...
        ]
    }

**Example payloads herein for resource specific collections will only include** `"results": [ ]` **structure.**

Audit Object
--------------
Resource payloads may include a composite audit object. An example structure of that object is
represented here and will be referenced as `<audit_object>` in resource specific payloads.

    {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": {
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner"
        },
        "updated_on": "2015-01-01T13:00:00Z",
        "updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner"
        },
        "deleted_on": null,
        "deleted_by": null
    }

API Errors
----------------
We should respond with context appropriate error codes, especially for 400 class errors, using
the [Standard List](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)

400: no API token, validation errors
401: bad API token
403: user performing request which they do not have permission to perform
404: user requesting resource that does not exist

All error responses should include a JSON response that provides the HTTP status code, details
of the error that occurred, and possible steps to address the problem. For example:

    {
        "error": "404",
        "reason": "Project does not exist",
        "suggestion": "You may have chosen the wrong ID."
    }

Validation errors require a field-level breakdown with an array of errors (even if multiple errors
occur for the same field), each describing the field with the error, and message describing the
error encountered.

    {
        "error": "400",
        "reason": "validation failed",
        "suggestion": "Fix the following invalid fields and resubmit"
        "errors" : [
            {
                "field" : "name",
                "message" : "Project needs a name."
            },
            {
                "field" : "principal_investigator",
                "message" : "Principal Investigator must be specified for each project."
            }
        ]
    }

## Group Authorization Roles
An authorization role represents a set of discrete permissions that may be granted to a user.

**Authorization Roles:**

| Role | Name | Description | Permission(s) |
|:-----|:-----|:------------|:--------------|
| **system\_admin** | System Admin | Can manage system level permissions and perform all operations across all projects | system\_admin |
| **project\_admin** | Project Admin | Can update project details, delete project, manage project level permissions and perform all file operations | view\_project, update\_project, delete\_project, manage\_project\_permissions, download\_file, create\_file, update\_file, delete\_file |
| **project\_viewer** | Project Viewer | Can only view project and file meta-data | view\_project |
| **file\_downloader** | File Downloader | Can download files | view\_project, download\_file |
| **file\_uploader** | File Uploader | Can upload files | view\_project, create\_file |
| **file\_editor** | File Editor | Can view, download, create, update and delete files | view\_project, download\_file, create\_file, update\_file, delete\_file |


**Permissions:**

| Permission | Description |
|:------------|:------------|
| **system\_admin** | Can manage system level permissions and perform all operations across all projects |
| **view\_project** | Can view project and file meta-data |
| **update\_project** | Can update project header details and project affiliations |
| **delete\_project** | Can delete project |
| **manage\_project_permissions** | Can grant/revoke project level permissions |
| **download\_file** | Can download file |
| **create\_file** | Can upload new file |
| **update\_file** | Can upload new version of existing file |
| **delete\_file** | Can delete a file |

## Authorization Roles collection [/{context}/auth_roles]
+ Parameters
    + context (required, string, `system`) ... The `context` or scope in which permission can be granted;
    valid values are "system" or "project".

### List authorization roles for a context [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        "results": [
            {
                "id": "system_admin",
                "name": "System Admin",
                "description": "Can manage system level permissions and perform all operations across all projects",
                "permissions": [ { "id": "system_admin" } ],
                // Contexts in which role is relevant (i.e. "system" or "project").
                "contexts": [ "system" ],
                // If deprecated, role cannot be granted, but show in UI for existing users that have role.
                "is_deprecated": false
            },
            ...
        ]

## Authorization Role instance [/{context}/auth_roles/{id}]
+ Parameters
    + context (required, string, `project`) ... The `context` or scope in which permission can be granted;
    valid values are "system" or "project".
    + id (required, string, `file_editor`) ... The unique `id` for an authorization role.

### View authorization role details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        {
            "id": "file_editor",
            "name": "File Editor",
            "description": "Can view, download, create, update and delete files",
            "permissions": [ { "id": "view_project" }, { "id": "download_file" }, ... ],
            "contexts": [ "project" ],
            "is_deprecated": false
        }

## Group Current User
The current user represents the currently authenticated user.

## Current User instance [/current_user]

+ Model (application/json)

    + Body

            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu",
                    // The trusted authentication source for user (Duke Shibb for MVP).
                    "source": "duke_shibboleth",
                    // Unique user id in context of this authentication source.
                    "uid": "gardner100"
                },
                // The system level roles that have been granted to the user.
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ],
                "last_login_on": "2015-01-01T12:00:00Z",
                "audit": <audit_object>
            }

### View current user details [GET]
>**Permission:** authenticated

+ Response 200

      [Current User instance][]

## Group Users
A user represents a registered user.

## Users collection [/users{?name_contains}]
### List registered users [GET]
>**Permission**
- - - - -
authenticated

+ Parameters
    + name_contains (optional, string, `gardner`) ... Returns users for which their `full_name` contains the specified string.

+ Response 200 (application/json)

        "results": [
            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu",
                // Optional part of payload that is returned if the current user has system_admin permission.
                "auth_provider": {
                    "source": "duke_shibboleth",
                    "uid": "gardner100",
                },
                // The system level roles that have been granted to the user.
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ],
                "last_login_on": "2015-01-01T12:00:00Z",
                "audit": <audit_object>
                // End optional part of payload.
            },
            ...
        ]

## User instance [/users/{id}]
+ Parameters
    + id (required, string, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `id` for a user.

+ Model (application/json)

    + Body

            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu",
                // Optional part of payload that is returned if the current user has system_admin permission
                "auth_provider": {
                    "source": "duke_shibboleth",
                    "uid": "gardner100"
                },
                // The system level roles that have been granted to the user.
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ],
                "last_login_on": "2015-01-01T12:00:00Z",
                "audit": <audit_object>
                // End optional part of payload.
            }

### View registered user details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200

    [User instance][]

## Group System Permissions
A system permission represents system level authorization roles that have been granted to a user.

## System Permissions collection [/system/permissions]

### List system level permissions [GET]
>**Permission**
- - - - -
system_admin

+ Response 200 (application/json)

        "results": [
            {
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "system_admin", "name": "System Admin" }
            },
            ...
        ]

## System Permission instance [/system/permissions/{user_id}]
+ Parameters
    + user_id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "system_admin", "name": "System Admin" }
            }

### Grant system level permissions to user [PUT]
>**Permission**
- - - - -
system\_admin

>**Rules**
- - - - -
* Revokes (deletes) any existing system level authorization role for the user and grants new role.
* The platform must have at least one user with the "system\_admin" authorization role.
* The roles specified must be system level authorization roles (i.e. "system" in `auth_role.contexts`).

+ Request (application/json)

        {
            "auth_role": { "id": "system_admin" }
        }

+ Response 200

    [System Permission instance][]

### View system level permissions for user [GET]
>**Permission**
- - - - -
system\_admin OR system permissions are for the current user

+ Response 200

    [System Permission instance][]

### Revoke system level permissions for user [DELETE]
>**Permission**
- - - - -
system\_admin

>**Rules**
- - - - -
* The platform must have at least one user with the "system\_admin" authorization role.

+ Response 204

## Group Projects
A project is a container for storing, organizing, retrieving and sharing research data files.

## Projects collection [/projects]

### Create a project [POST]
>**Permission**
- - - - -
authenticated

>**Rules**
- - - - -
* User who creates project is granted "project\_admin" authorization role by default.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 201 (application/json)

        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            // Has the project been logically deleted from meta-data?
            "is_deleted": false,
            "audit": <audit_object>
        }

### List projects [GET]
>**Permission**
- - - - -
authenticated

>**Rules**
- - - - -
* Lists projects for which the current user has the "view\_project" permission.
* Projects that have been deleted (i.e. `"is_deleted": true`) are not included in this listing.

+ Response 200 (application/json)

        "results": [
            {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "audit": <audit_object>
            },
            ...
        ]

## Project instance [/projects/{id}]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

+ Model (application/json)

    + Body

            {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "audit": <audit_object>
            }

### View project details [GET]
**Permission**
- - - - -
view_project

+ Response 200

    [Project instance][]

### Update a project [PUT]
**Permission:**
- - - - -
update_project

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 200

    [Project instance][]

### Delete a project [DELETE]
**Permission**
- - - - -
delete_project

**Rules**
- - - - -
* Logically deletes project from the meta-data (i.e. sets `"is_deleted": true`).
* For the MVP, the files associated to the project are not deleted from their physical storage location.

+ Response 204

## Group Project Permissions
A project permission represents project level authorization roles that have been granted to a user.

## Project Permissions collection [/projects/{id}/permissions]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### List project level permissions [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        "results": [
            {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "file_editor", "name": "File Editor", "description": "Can view, download, create, update and delete files" }
            },
            ...
        ]

## Project Permission instance [/projects/{project_id}/permissions/{user_id}]
+ Parameters
    + project_id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `project_id` of the project.
    + user_id (required, string, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... Globally unique `user_id` of the user.

+ Model (application/json)

    + Body

             {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "file_editor", "name": "File Editor", "description": "Can view, download, create, update and delete files" }
            }

### Grant project level permissions to user [PUT]
>**Permission**
- - - - -
manage_project_permissions

>**Rules**
- - - - -
* Revokes (deletes) any existing project level authorization role for the user and grants new role.
* Every project must have at least one user with the "project\_admin" authorization role.
* The roles specified must be project level authorization roles (i.e. "project" in `auth_role.contexts`).

+ Request (application/json)

        {
            "auth_role": { "id": "file_editor" }
        }

+ Response 200

    [Project Permission instance][]

### View project level permissions for user [GET]
>**Permission**
- - - - -
view_project

+ Response 200

    [Project Permission instance][]

### Revoke project level permissions for user [DELETE]
>**Permission**
- - - - -
manage_project_permissions

>**Rules**
- - - - -
* Every project must have at least one user with the "project\_admin" authorization role.

+ Response 204

## Group Project Roles
A project role represents the part or responsibility that an individual (i.e. user) may assume in the
context of a project.  These roles have no relationship to authorization roles.

**Project Roles:**

| Role | Name | Description |
|:-----|:-----|:------------|
| **principal\_investigator** | Principal Investigator | Lead investigator for the research project |
| **research\_coordinator** | Research Coordinator | Coordinator for the research project |

## Project Roles collection [/project_roles]

### List project roles [GET]
**Permissions required**
- - - - -
authenticated

+ Response 200 (application/json)

        "results": [
            {
                "id": "principal_investigator",
                "name": "Principal Investigator",
                "description": "Lead investigator for the research project",
                "is_deprecated": false
            },
            {
                "id": "research_coordinator",
                "name": "Research Coordinator",
                "description": "Coordinator for the research project",
                "is_deprecated": false
            },
            ...
        ]

## Project Role instance [/project_roles/{id}]
+ Parameters
    + id (required, string, `principal_investigator`) ... The unique `id` for a project role.

### View project role details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        {
            "id": "principal_investigator",
            "name": "Principal Investigator",
            "description": "Lead investigator for the research project",
            "is_deprecated": false
        }

### Group Affiliates
An affiliate represents an individual that plays some project level role of interest from a reporting or collaboration 
perspective.  The affilate may be internal (i.e. a DDS user) or external (i.e. non-DDS user).  For the MVP, we will assume all affiliates 
must be a DDS user.

## Affiliates collection [/projects/{id}/affiliates]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### List project affiliations [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        "results": [
            {
                "id": "ba33f7df-33ca-46dd-a015-92c46fdb6ba3",
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu"
                },
                "project_role": { "id": "principal_investigator", "name": "Principal Investigator" }
            },
            ...
        ]

## Affiliate instance [/projects/{project_id}/affiliates/{user_id}]
+ Parameters
    + project_id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `project_id` of the project.
    + user_id (required, string, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... Globally unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "id": "ba33f7df-33ca-46dd-a015-92c46fdb6ba3",
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu"
                },
                "project_role": { "id": "principal_investigator", "name": "Principal Investigator" }
            }

### Associate affiliate to a project [PUT]
>**Permission**
- - - - -
update_project

>**Rules**
- - - - -
* Deletes any existing project role for the user and assigns new role.

+ Request (application/json)

        {
            "project_role": { "id": "principal_investigator" }
        }

+ Response 200

    [Affiliate instance][]

### View project level affiliation for a user [GET]
>**Permission**
- - - - -
view_project

+ Response 200

    [Affiliate instance][]

### Delete project affiliate [DELETE]
>**Permission**
- - - - -
update_project

+ Response 204

## Group Storage Provider
A storage provider represents an external service that provides physical storage space for files.

## Storage Providers collection [/storage_providers]

### List storage providers [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        results: [
            {
                "id": "duke_isilon",
                "name": "Duke Isilon Storage",
                "description": "A description of the storage service level would go here.",
                // Deprecated implies that storage provide can no longer accept uploads.
                "is_deprecated": false
            },
            {
                "id": "amazon_s3_glacier",
                "name": "Amazon S# Glacier",
                "description": "A description of the storage service level would go here.",
                "is_deprecated": false
            },
            {
                "id": "google_cloud_nearline",
                "name": "Google Cloud Nearline",
                "description": "A description of the storage service level would go here.",
                "is_deprecated": false
            },
            ...
        ]

## Storage Provider instance [/storage_providers/{id}]
+ Parameters
    + id (required, string, `duke_isilon`) ... Globally unique `id` of the storage provider.


### View storage provider details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        {
            "id": "duke_isilon",
            "name": "Duke Isilon Storage",
            "description": "A description of the storage service level would go here.",
            "is_deprecated": false
        }

## Group Folder
A folder represents a container for organizing files.  A folder is contained within the context of the
project root or a project folder.

## Folders collection [/projects/{id}/folders]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Create a project folder [POST]
>**Permission**
- - - - -
create_file

>**Rules**
- - - - -
* A folder is created within the context of the project root or a project folder.  A folder can have one
and only one parent folder.
* The `parent_folder` must be a folder owned by the referenced project.
* Specify alias "root" for the `parent_folder` to create a new folder in the project root.

+ Request (application/json)

        {
            // Specify root for parent_folder to create a new folder in project root.
            "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data"
        }

+ Response 201 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Sequencing Core/Raw Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

### List project folders [GET]
>**Permission**
- - - - -
view_project

>**Rules**
- - - - -
* Project folders that have been deleted (i.e. `"is_deleted": true`) are not included in this listing.

+ Response 200 (application/json)

        results: [
            {
                "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
                "name": "Raw Data",
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "virtual_path": "/Sequencing Core/Raw Data",
                "is_deleted": false,
                "audit": <audit_object>
            },
            ...
        ]

## Folder instance [/folders/{id}]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

### View project folder details [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Sequencing Core/Raw Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

### Delete a project folder [DELETE]
**Permission**
- - - - -
delete_file

**Rules**
- - - - -
* Logically deletes project folder from the meta-data (i.e. sets `"is_deleted": true`).
* For the MVP, the files associated to the project folder are not deleted from their physical storage location.

+ Response 204

## Move a project folder to new parent [/folders/{id}/move]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

### Move a project folder to new parent [PUT]
>**Permission**
- - - - -
create_file

>**Rules**
- - - - -
* To move a folder, set `parent_folder` to target folder location; the target folder must be in the source
folders `project` context.

+ Request (application/json)

        {
            "parent_folder": { "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" }
        }

+ Response 200 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Flow Core/Raw Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

## Rename a project folder [/folders/{id}/rename]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

### Rename a project folder [PUT]
>**Permission**
- - - - -
create_file

+ Request (application/json)

        {
            "name": "Model Data"
        }

+ Response 200 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "Model Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Flow Core/Model Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

## Group Parent/Children
Convenience endpoints for retrieval of a parent folder and project/folder children (folders and files).

## Parent Folder instance [/folders/{id}/parent]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

## View parent folder details [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        {
            "id": "f8416bbe-357a-4687-919d-3d13d4108dc1",
            "parent_folder": "root",
            "name": "Flow Core",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Flow Core",
            "is_deleted": false,
            "audit": <audit_object>
        }

## Project/Folder Children collection [/{context}/{id}/children]
+ Parameters
    + context (required, string, `folder`) ... The parent `context` for children; valid values are "project" root or "folder".
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... If `context` is "project", globally unique `id` of the "project"; If `context`
    is "folder", globally unique `id` of "folder".

### List folder children [GET]
List children (folders and files) of the project root or a specific project folder.
>**Permission**
- - - - -
view_project

>**Rules**
- - - - -
* Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in this listing.
* The `kind` property can be used to determine if child object is a folder or a file.

+ Response 200 (application/json)

        results: [
            {
                "kind": "folder",
                "id": "ad9115b8-1e4a-4399-b606-56622eb462e1",
                "parent_folder": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                "name": "Aligned",
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "virtual_path": "/Sequencing Core/Raw Data/Aligned",
                "is_deleted": false,
                "audit": <audit_object>
            },
            {
                "kind": "file",
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                "folder": { "id": "ad9115b8-1e4a-4399-b606-56622eb462e1" },
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                "virtual_path": "/Sequencing Core/Raw Data/RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "is_deleted": false,
                "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                    "storage_provider": { "id": "amazon_s3_standard" }
                },
                <audit_object>
            },
            ...
        ]

## Group Files
A research data file that is maintained in the context of a project (and optionally a project folder).  A file resource represents
the descriptive meta\-data about file including the virtual path.

## Files collection [/projects/{id}/files]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the project.

### Create a file meta-data object [POST]
Creates a file meta-data object; The client-side software is responsible for the creation of this object after confirming the associated physical 
file has been successfully upladed to a storage provider. (see `Uploads`)

>**Permission**
- - - - -
create_file

>**Rules**
- - - - -
* The `upload.id` must be for an upload that completed successfully (`upload.status.completed_on != null`)
* The target `project.id` specified must match the `upload.project.id`.
* The target `folder.id` specified must be in the context of the `project.id`.
* The current user must be the user who uploaded the file.

>**Request/Response Payload Properties**
- - - - -
+ folder.id (string) - The globally unique id of the virtual destination folder - specifiy alias "root" for project root.
+ name (string) - The name of the file (optionally provided) - defaults to the `upload.name` if not provided.
+ upload.id (string) - The globally unique id of the upload object.

+ Request (application/json)

        {
            "folder": { "id": "ad9115b8-1e4a-4399-b606-56622eb462e1" },
            "name": null,
            "upload": { "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23" }
        }

+ Response 201 (application/json)

        {
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "folder": { "id": "ad9115b8-1e4a-4399-b606-56622eb462e1" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "virtual_path": "/Sequencing Core/Raw Data/Aligned/RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                "storage_provider": { "id": "amazon_s3_standard" }
            },
            <audit_object>
        }

## Group Uploads
All files must be uploaded using a mutipart/chunked upload process.  Althought this places more burden on client-side software to
divide larger files into chunks and send each chunk separately, the result is a more robust process that allows failed chunks to
be resent.  The following endpoints are used by the client to manage the chunked upload process.

## Uploads collection [/projects/{id}/uploads]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the project.

### Intitiate a chunked file upload for a project [POST]
This is the first step in uploading a large file. An upload objects is created along with a composite status object used to track the progress of the chunked upload.

>**Permission**
- - - - -
create_file

>**Request/Response Payload Properties**
- - - - -
+ name (string) - The name of the client file to upload.
+ content\_type (string) - Valid type per [media types](https://en.wikipedia.org/wiki/Internet_media_type)
(optionally provided by client).
+ size (integer) - The size in bytes (computed by client).
+ hash.value (string) - The files hash computed by the client.
+ hash.algorithm (string) - The hash algorithm used (i.e. md5, sha256, sha1, etc.) - this must be the default algorithm supported by
storage provider.
+ storage\_provider (object) - The storage_provider selected by the client - must be an approved storage provider for the project.

>**Response Payload Properties**
- - - - -
+ id (string) - The globally unique id of the upload object.
+ chunks (object) - The chunks the client has requested to upload. (i.e. /uploads/{id}/chunks)
+ storage_location (object) - Object that contains file storage details specific to the storage provider. 
+ status (object) - Object used to track status of overall file upload.

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
            "storage_provider": { "id": "amazon_s3_standard" }
        }

+ Response 201 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
            "chunks": [ ],
            "storage_provider": { "id": "amazon_s3_standard" },
            // Optional part of payload only returned to users granted system_admin permission.
            "storage_location": {
                "Bucket": "duke_data_service_prod",
                "Key": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "UploadId": "EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbDUy4RTpMeo..."
            },
            // End optional part of payload.
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "percent_complete": 0,
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            <audit_object>
        }

### List file uploads for a project [GET]

>**Permission**
- - - - -
create_file

+ Response 200 (application/json)

        results: [
                {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "content_type": "application/octet-stream",
                    "size": 30024000,
                    "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                    "chunks": [ ],
                    "storage_provider": { "id": "amazon_s3_standard" },
                    // Optional part of payload only returned to users granted system_admin permission.
                    "storage_location": {
                    "Bucket": "duke_data_service_prod",
                    "Key": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "UploadId": "EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbDUy4RTpMeo..."
                    },
                    // End optional part of payload.
                    "status": {
                        "initiated_on": "2015-07-10T13:00:00Z",
                        "percent_complete": 0,
                        "completed_on": null,
                        "error_on": null,
                        "error_message": null
                    },
                    <audit_object>
                },
                ...
        ]


## Upload instance [/uploads/{id}]
+ Parameters
    + id (required, string, `xytu02a4-b9e6-473d-87c4-66f4c8815555`) ... Globally unique `id` of the upload object.

## View upload details/status [GET]

>**Permission**
- - - - -
create_file

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
            "chunks": [ ],
            "storage_provider": { "id": "amazon_s3_standard" },
            // Optional part of payload only returned to users granted system_admin permission.
            "storage_location": {
                "Bucket": "duke_data_service_prod",
                "Key": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "UploadId": "EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbDUy4RTpMeo..."
            },
            // End optional part of payload.
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "percent_complete": 0,
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            <audit_object>
        }

## Get pre-signed URL to upload a chunk [/uploads/{id}/chunks]
+ Parameters
    + id (required, string, `xytu02a4-b9e6-473d-87c4-66f4c8815555`) ... Globally unique `id` of the upload object.

### Get pre-signed URL to upload the next chunk [PUT]
Generate a pre-signed URL that will be used by client to upload a file chunk to the storage provider. This step is
repeated for each chunk.  If the chunk uploads fails, the client must call this endpoint again to get a new pre-signed URL
for the chunk number, then retry the upload.

>**Permission**
- - - - -
create_file

>**Request/Response Payload Properties**
- - - - -
+ number (integer) - The chunk number.
+ size (integer) - The size of the chunk in bytes that the client will upload using the pre-signed URL.
+ hash.value (string) - The chunk hash computed by the client.
+ hash.algorithm (string) - The hash algorithm used (i.e. md5, sha256, sha1, etc.) - this must be the default algorithm supported by
storage provider.

>**Response Payload Properties**
- - - - -
+ http_verb (string) - The http verb to use for uploading the next chunk.
+ host (string) - The storage provider host.
+ url (string) - The signed URL endpoint for uploading the next chunk to the storage provider.
+ http_headers (array) - Array of headers (key/value pairs) that must be included in the client upload request.

+ Request (application/json)

        { 
            "number": 1,
            "size: "size": 5024000,
            "hash": { "value": "ey23df2207d99a74fbe169e3eba035e633b65d76", "algorithm": "md5" }
        }

+ Response 200 (application/json)

        {
            "http_verb": "PUT",
            "host": "duke_data_service_prod.s3.amazonaws.com",
            "url": "/666be35a-98e0-4c2e-9a17-7bc009f9bb23?partNumber=1&uploadId=EXAMPLEJZ6e0YupT2...&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN...",
            "http_headers": [
                    { "Content-Length": "5024000" },
                    ...
            ]
        }

## Complete the chunked file upload [/uploads/{id}/complete]
+ Parameters
    + id (required, string, `xytu02a4-b9e6-473d-87c4-66f4c8815555`) ... Globally unique `id` of the upload object.

### Complete the chunked file upload [PUT]
This operation is called by the client after all file chunks have been successfully uploaded to the storage provider.

>**Permission**
- - - - -
create_file

>**Rules**
- - - - -
* If the storage provider requires the individual chunks to be assembled, such as Amazon S3, this operation will call
the storage provider API to assemble the parts into a single file object.
* If a client computed file hash was provided, it must equal the storage provider computed file hash, or an integrity
exception is raised.
* If the client reported file size (bytes) does not match the storage provider reported file size, an integrity exception
is raised.
* If there are no errors or integrity exceptions, the `upload_status.complete_on` is set to the current timestamp.

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
            "chunks": [
                { 
                    "number": 1,
                    "size: "size": 5024000,
                    "hash": { "value": "jw23df2207d99a74fbe169e3eba035e633b65d88", "algorithm": "md5" }
                },
                {
                    "number": 2,
                    "size: "size": 5024000,
                    "hash": { "value": "ry23df2207d99a74fbe169e3eba035e633b65dkq", "algorithm": "md5" }
                },
                ...
            ],
            "storage_provider": { "id": "amazon_s3_standard" },
            // Optional part of payload only returned to users granted system_admin permission.
            "storage_location": {
                "Bucket": "duke_data_service_prod",
                "Key": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "UploadId": "EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbDUy4RTpMeo..."
            },
            // End optional part of payload.
            "upload_status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "percent_complete": 100,
                "completed_on": "2015-07-10T13:00:00Z",
                "error_on": null,
                "error_message": null
            },
            <audit_object>
        }
