FORMAT: 1A
HOST: http://data-services.duke.edu/

# Duke Data Services

The Duke Data Service API allows Duke researchers to store, organize, retrieve and share data.

The intent here is to create a strawman for the data service API. Key focuses are on API endpoints that enhance usability for "shallow end of the pool" users, endpoints that support the needs of investigators for managing their research groups, endpoints that accommodate shared resource and core facility needs, endpoints that support SOM administration of data resources, and endpoints that facilitate reproducible scientific workflows. There are tensions to resolve to meet these needs, and we should consider whether the API might be broken up into multiple APIs, whether some business logic be pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design)
requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a Request-id in each response header, among others.

## Group API Usage

Client API Key
--------------
Authorized users may generate a secret API key via the Web interface \- liken to Google API key provisioning model.  This will not be part of the initial product release (i.e. MVP).

User Authentication
--------------
Users will be required to authenticate via a trusted authentication provider. (i.e. Duke Shibboleth for MVP)

**Some design assumptions for the MVP:**
* A token (i.e. JWT) will be generated via a successful HTTPS callback from Duke Shibboleth single sign-on service.  This token must be supplied in header for subsequent API calls.
* Tokens will have an expiration policy of X hours/days.
* When a user authenticates successfully for the fist time via Duke Shibboleth, their user profile will be created in the platforms local user data store.

Collection Pagination
--------------
For endpoints that return a collection of resources/objects, the number of objects returned can be
controlled by including the `limit` query parameter.  For example: `/projects?limit=25`; Collection payloads
may have the following structure to facilitate client pagination:

    {
        "count": 100,
        "limit": 25,
        "next": "https://data-services.duke.edu/projects?page=3",
        "previous": "https://data-services.duke.edu/projects?page=1",
        "results": [
            <resource_object>,
            <resource_object>,
            ...
        ]
    }

**Example payloads herein for resource specific collections will only include** `"results": [ ]` **structure.**

Audit Object
--------------
Resource payloads may include a composite audit object. An example structure of that object is represented
here and will be referenced as `<audit_object>` in resource specific payloads.

    {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": {
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner"
        },
        "updated_on": "2015-01-01T13:00:00Z",
        "updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner"
        },
        "deleted_on": null,
        "deleted_by": null
    }

Client Errors
----------------
We should respond with context appropriate error codes, especially for 400 class errors, using the [Standard List](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)

400: no API token, validation errors
401: bad API token
403: user performing request which they do not have permission to perform
404: user requesting resource that does not exist

All error responses should include a JSON response that provides the
HTTP status code, details of the error that occurred, and possible
steps to address the problem. For example:

    {
        "error": "404",
        "reason": "Project does not exist",
        "suggestion": "You may have chosen the wrong ID."
    }

Validation errors require a field-level breakdown with an array of
errors (even if multiple errors occur for the same field), each
describing the field with the error, and message describing the error
encountered.

    {
        "error": "400",
        "reason": "validation failed",
        "errors" : [
        {
           "field" : "name",
           "message" : "Project needs a name"
        },
        {
            "field" : "principal_investigator",
            "message" : "Principal Investigator must be specified for each project."
            }
        ]
    }


<!-- DEPRECATED
## Group Authentication
Authentication resource provides the means to verify identity of a platform user.

## Authenticate [/authenticate/user_token]
### Get a user authentication token - i.e. JSON Web Token [POST]
* If we use Duke single sign-on with muti-factor authetication, I assume we will need to translate the valid shibboleth identity to a JWT, so this API may take a different set of params to perform that translation.
* Assume that when a Duke user authenticates successfully for the fist time, their profile would be registered into the platforms local user data store (i.e. user table or tables).
* We also need to think about how command line clients and software agents would authenticate to the API? - they will not be using the Duke single sign-on Web interface.

+ Request (application/json)

        { "username": "mrgardner01", "password": "pennState$grad" }

+ Response 201 (application/json)

        { "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWI......." }
-->

## Group Authorization Roles
An authorization role represents a set of discrete permissions that may be granted to a user.

**Authorization Roles defined to date:**

| Role | Name | Description | Permission(s) |
|:-----|:-----|:------------|:--------------|
| **system\_admin** | System Admin | Can perform all system operations | \* (i.e. ALL permissions across ALL projects) |
| **platform\_user** | Platform User | Can create new projects | create\_project |
| **project\_admin** | Project Admin | Can update project details, delete project, manage project members and perform all file operations | view\_project, update\_project, delete\_project, manage\_project\_members, download\_file, create\_file, update\_file, delete\_file |
| **project\_viewer** | Project Viewer | Can only view project and file meta-data | view\_project |
| **file\_downloader** | File Downloader | Can download files | view\_project, download\_file |
| **file\_editor** | File Editor | Can view, download, create, update and delete files | view\_project, download\_file, create\_file, update\_file, delete\_file |

**Permissions defined to date:**

| Permission | Description |
|:------------|:------------|
| **view\_project** | Can view project and file meta-data |
| **create\_project** | Can create new project |
| **update\_project** | Can update project header details |
| **delete\_project** | Can delete project |
| **manage\_project_members** | Can associate/remove members and grant/revoke permissions |
| **download\_file** | Can download file |
| **create\_file** | Can upload new file |
| **update\_file** | Can upload new version of existing file |
| **delete\_file** | Can delete a file |

## Authorization Roles [/auth_roles]
### List authorization roles [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        "results": [
            {
                "id": "system_admin",
                "name": "System Admin",
                "description": "Can perform all system operations",
                "permissions": [ "*" ], // ALL permissions across ALL projects...
                "contexts": [ "global" ], // Contexts in which role is relevant (i.e. "global", "project_member", etc.),
                "is_deprecated": false // If deprecated, cannot be granted, but show for existing users who have this role
            },
            {
                "id": "platform_user",
                "name": "Platform User",
                "description": "Can create new projects", // Granted to all registered users
                "permissions": [ "create_project" ],
                "contexts": [ "global" ],
                "is_deprecated": false
            },
            {
                "id": "project_admin",
                "name": "Project Admin",
                "description": "Can update project details, delete project, manage members and perform all file operations",
                "permissions": [ "view_project", "update_project", "delete_project", "manage_project_members", "download_file", "create_file", "update_file", "delete_file" ],
                "contexts": [ "project_member" ],
                "is_deprecated": false
            },
            {
                "id": "project_viewer",
                "name": "File Viewer",
                "description": "Can view project and file meta-data",
                "permissions": [ "view_project" ],
                "contexts": [ "project_member" ],
                "is_deprecated": false
            },
            {
                "id": "file_downloader",
                "name": "File Downloader",
                "description": "Can download files",
                "permissions": [ "view_project", "download_file" ],
                "contexts": [ "project_member" ],
                "is_deprecated": false
            },
            {
                "id": "file_editor",
                "name": "File Editor",
                "description": "Can view, create, update, delete and download files",
                "permissions": [ "view_project", "download_file", "create_file", "update_file", "delete_file" ],
                "contexts": [ "project_member" ],
                "is_deprecated": false
            }
        ]

## Group Member Roles
A member role represents an organizational responsibility that an individual (i.e. user) may assume.  These roles have no relationship to authorization roles.

When the "Duke Enterprise Project Registry" application is live - these roles may be sourced via integration
with that platforms Web services API.

**Member Roles defined to date:**

| Role | Name | Description |
|:-----|:-----|:------------|
| **principal\_investigator** | Principal Investigator | Lead investigator for the research project |
| **research\_coordinator** | Research Coordinator | Coordinator for the research project |

## Member Roles [/member_roles]
### List member roles [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        "results": [
            {
                "id": "principal_investigator",
                "name": "Principal Investigator",
                "description": "Lead investigator for the research project",
                "contexts": [ "project_member" ], // Contexts in which role is relevant (i.e. "global", "project_member", etc.)
                "is_deprecated": false
            },
            {
                "id": "research_coordinator",
                "name": "Research Coordinator",
                "description": "Coordinator for the research project",
                "contexts": [ "project_member" ],
                "is_deprecated": false
            },
            ...
        ]

## Group Current User
The current user represents the currently authenticated user.

## Current User [/current_user]
### Create user [POST]
**Permissions required:** none

**Business Rules:**
* Created user is granted the "platform\_user" auth role by default.
* The username defaults to auth\_provider.uid, but can be overriden during user registration.
* Unique fields: `username`, `email`, `(auth_provider.source + auth_provider.uid)`
+ Request (application/json)

        {
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100", // Unique user ID in context of this auth provider
                "properties": { // Other user properties from auth provider (i.e. Duke Shibboleth)
                    <key>: <value>,
                    <key>: <value>,
                    ...
                }
            }
        }

+ Response 201 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_roles": [ <auth_role_object>, ... ], // Global auth roles for current user
            "permissions": [ "create_project", ... ], // Global permissions (ACL) for current user
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100",
                "properties": {
                    <key>: <value>,
                    <key>: <value>,
                    ...
                }
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": <audit_object>
        }

### View current user details [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_roles": [ <auth_role_object>, ... ],
            "permissions": [ "create_project", ... ],
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100",
                "properties": {
                    <key>: <value>,
                    <key>: <value>,
                    ...
                }
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": <audit_object>
        }

## Group Users
A user represents a registered user.

## Users collection [/users]
### List registered users [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        "results": [
            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu"
            },
            ...
        ]

## Group Projects
A project is a container for storing, organizing, retrieving and sharing research data files.

## Projects collection [/projects]
### Create a project [POST]
**Permissions required:** create_project

**Business Rules:**
* User who created project is granted "project\_admin" auth role by default.
* **Should principal investigator be required to create project?**
* Unique fields: `name`
+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 201 (application/json)

        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false, // Has the project been logically deleted from meta-data?
            "current_user": {
                "member_roles": [ <member_role_object>, ... ], // Project member roles for current user
                "auth_roles": [ <auth_role_object>, ... ], // Project auth roles for current user
                "permissions": [ "view_project", "update_project", ... ] // Project permissions (ACL) for current user
            },
            "audit": <audit_object>
        }

### List all projects [GET]
**Permissions required:** authenticated

**Business Rules:**
* Lists projects for which the current user has the "view\_project" permission.
* Projects that have been logically deleted (i.e. `"is_deleted": true`) are not included in this listing.
+ Response 200 (application/json)

        "results": [
            {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "current_user": {
                    "member_roles": [ <member_role_object>, ... ],
                    "auth_roles": [ <auth_role_object>, ... ],
                    "permissions": [ "view_project", "update_project", ... ]
                },
                "audit": <audit_object>
            },
            ...
        ]

## Project [/projects/{id}]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### View project details [GET]
**Permissions required:** view_project (for project)
+ Response 200 (application/json)

        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false,
            "current_user": {
                "member_roles": [ <member_role_object>, ... ],
                "auth_roles": [ <auth_role_object>, ... ],
                "permissions": [ "view_project", "update_project", ... ]
            },
            "audit": <audit_object>
        }

### Update a project [PUT]
**Permissions required:** update_project (for project)
+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 200 (application/json)

        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false,
            "current_user": {
                "member_roles": [ <member_role_object>, ... ],
                "auth_roles": [ <auth_role_object>, ... ],
                "permissions": [ "view_project", "update_project", ... ]
            },
            "audit": <audit_object>
        }

### Delete a project [DELETE]
**Permissions required:** delete_project (for project)

**Business Rules:**
* Logically deletes project from the meta-data (i.e. sets `"is_deleted": true`).  For the MVP, the files associated to the project are not deleted from their physical storage location.
+ Response 204

## Group Project Members
A project member represents an individual (i.e. user) that has an affiliation to a project.

## Project Members collection [/projects/{id}/members]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Create project member [POST]
**Permissions required:** manage\_project\_members (for project)
+ Request (application/json)

        {
            "user": { "id": "434cf35a-98e0-4c2e-9a17-7bc009f9bb23" },
            "member_roles": [ "principal_investigator", ... ],  // Optional member roles
            "auth_roles": [ "project_viewer", ... ]  // Optional auth roles
        }

+ Response 201 (application/json)

        {
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "user": <user_object>,
            "project": <project_object>,
            "member_roles": [ <member_role_object>, ... ],
            "auth_roles": [ <auth_role_object>, ... ],
            "permissions": [ "view_project", ... ] // Permissions (ACL) for member
        }

### List project members [GET]
**Permissions required:** view_project (for project)
+ Response 200 (application/json)

        "results": [
            {
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "user": <user_object>,
                "project": <project_object>,
                "member_roles": [ <member_role_object>, ... ],
                "auth_roles": [ <auth_role_object>, ... ],
                "permissions": [ "view_project", ... ] // Permissions (ACL) for member
            },
            ...
        ]

## Project Member [/project_member/{id}]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project member.

### Delete a project member [DELETE]
**Permissions required:** manage\_project\_members (for project)

**Business Rules:**
* Every project requires at least one member with "project\_admin" auth role.  Cannot remove/delete member if they are the only "project\_admin" designated for the project.
+ Response 204

## Member Roles collection [/project_member/{id}/roles]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project member.

### Set organizational roles for project member [PUT]
**Permissions required:** manage\_project\_members (for project)
+ Request (application/json)

        {
            "member_roles": [ "principal_investigator", ... ]  // Member roles to assign; to remove all pass [ ]
        }

+ Response 200 (application/json)

        {
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "user": <user_object>,
            "project": <project_object>,
            "member_roles": [ <member_role_object>, ... ],
            "auth_roles": [ <auth_role_object>, ... ],
            "permissions": [ "view_project", ... ] // Permissions (ACL) for member
        }

## Member Permissions collection [/project_member/{id}/permissions]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project member.

### Set permissions for project member [PUT]
**Permissions required:** manage\_project\_members (for project)

**Business Rules:**
* Every project requires at least one member with "project\_admin" auth role.  Cannot revoke this role from member if they are the only "project\_admin" designated for the project.
+ Request (application/json)

        {
            "auth_roles": [ "project_admin", ... ]  // Auth roles to grant member; to revoke all pass [ ]
        }

+ Response 200 (application/json)

        {
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "user": <user_object>,
            "project": <project_object>,
            "member_roles": [ <member_role_object>, ... ],
            "auth_roles": [ <auth_role_object>, ... ],
            "permissions": [ "view_project", ... ] // Permissions (ACL) for member
        }

## Group Files
A research data file that is maintained in the context of a project (and optionally a project folder).  A file resource represents the descriptive meta\-data about file including the physical storage location and access paths.

## Files collection [/project/{id}/files]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Create file meta-data [POST]
**Permissions required:** create_file (for project)

The response returns a signed URL in the `Location` header that can be used to upload the file.  The signed URL contains the following parameters:
> **file_meta** - The base64-encoded version of the file meta-data.
**signature** - A hashed, signed, and base64-encoded version of the file meta-data (verified by storage server).
**policy** - The base64-encoded expiration policy for the signed URL.

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",  // Name of client file to upload
            "folder": null, // Set to null for project root, otherwise a Folder ID { id: "dd29f7df-33ca-46dd-a015-92c46fdb6fd1" }
            "extension": "Rdata", // Extensions to use for file downloads (derived by server from name)
            "sha1": "cf23df2207d99a74fbe169e3eba035e633b65d94", // The sha1 for the file content (optionally computed/provided by client?)
            "content_type": "application/octet-stream", // Valid type per https://en.wikipedia.org/wiki/Internet_media_type (optionally provided by client)
            "size": "5242880", // The size of file in bytes (optionally provided by client?)
            "storage_location": { "id": "duke_isilon" } // Target storage location
        }

+ Response 201 (application/json)

    + Headers

            Location: http://data-services-storage.duke.edu?file_meta=WrT7U9...&signature=Th88wF...&policy=Yui99h...

    + Body

            {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "folder": null,
                "extension": "Rdata",
                "sha1": "cf23df2207d99a74fbe169e3eba035e633b65d94", // If client provided sha1, server computed sha1 must match
                "content_type": "application/octet-stream",
                "size": "5242880", // If client provided size, server computed size must match
                "storage_location": { "id": "duke_isilon" },
                "upload_status": {
                    "state": "pending", // Possible state values: "pending", "processing", "error", "completed"
                    "error_message": <upload_error_object>, // Populated when upload_status.state="error"
                    "started_on": null,
                    "ended_on": null
                },
                <audit_object>
            }
