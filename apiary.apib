FORMAT: 1A
HOST: http://data-services.duke.edu/

# Duke Data Services

The Duke Data Service API allows Duke researchers to store, organize, retrieve and share data. 

The intent here is to create a strawman for the data service API. Key focuses are on API endpoints that enhance 
usability for "shallow end of the pool" users, endpoints that support the needs of investigators for managing 
their research groups, endpoints that accommodate shared resource and core facility needs, endpoints that support 
SOM administration of data resources, and endpoints that facilitate reproducible scientific workflows. There are 
tensions to resolve to meet these needs, and we should consider whether the API might be broken up into multiple 
APIs, whether some business logic be pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design) 
requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a Request-id in each 
response header, among others.

## Group API Usage

Client API Key
--------------
We will allow authorized users to generate a secret API key via the Web interface 
- liken to Google API key provisioning model.  This will not be part of the initial release (i.e. MVP).  

User Authentication
--------------
Users will be required to authenticate via a trusted authentication provider. (i.e. Duke Shibboleth for MVP)

* For MVP, a token (i.e. JWT) will be generated via a successful HTTPS callback from Duke Shibboleth single sign-on 
service.  This token must be supplied in header for subsequent RESTful API calls.  
* What will be our token expiration policy?  When will users/clients be required to re-authenticate?
* When a user authenticates successfully for the fist time via Duke Shibboleth, their user profile will 
be created in the platforms local user data store.

Collection Pagination
--------------
For endpoints that return a collection of resources/objects, the number of objects returned can be 
controlled by including the `limit` query parameter.  For example: `/projects?limit=25`; Collection payloads 
will have the following structure to facilitate client pagination:

    {
        "count": 100,
        "limit": 25,
        "next": "https://data-services.duke.edu/projects?page=3", 
        "previous": "https://data-services.duke.edu/projects?page=1", 
        "results": [
            { <resource_object> },
            { <resource_object> },
            ...
        ]
    }

* This structure is only an example, may change based on specific plug-in used for pagination.   
* Example payloads herein for resource specific collections will only include `"results": [ ]` structure.

Audit Object
--------------
Some resource payloads may include a composite audit object. An example structure of that object is represented 
here and will be referenced as `<audit_object>` in resource specific payloads.
        
    {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": { 
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner"
        },
        "updated_on": "2015-01-01T13:00:00Z",
        "updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner"
        },
        "deleted_on": null,
        "deleted_by": null
    }

Clients Errors
----------------
Need to define here how client errors will be handled and represented.

<!-- DEPRECATED
## Group Authentication
Authentication resource provides the means to verify identity of a platform user.

## Authenticate [/authenticate/user_token]
### Get a user authentication token - i.e. JSON Web Token [POST]
* If we use Duke single sign-on with muti-factor authetication, I assume we will need to translate the valid 
shibboleth identity to a JWT, so this API may take a different set of params to perform that translation.
* Assume that when a Duke user authenticates successfully for the fist time, their profile would be registered into 
the platforms local user data store (i.e. user table or tables).
* We also need to think about how command line clients and software agents would authenticate to the API? - they 
will not be using the Duke single sign-on Web interface.

+ Request (application/json)

        { "username": "mrgardner01", "password": "pennState$grad" }
        
+ Response 201 (application/json)

        { "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWI......." }
-->
        
## Group Authorization Roles
An authorization role resource represents a set of discrete permissions that may be granted to a user.  

**Authorization Roles** defined to date:

| Role | Name | Description | Permission(s) |
|:-----|:-----|:------------|:--------------|
| **system_admin** | System Admin | Can perform all system operations | \* (i.e. ALL permissions across ALL projects) |
| **platform_user** | Platform User | Can create new projects - granted to all registered users | create_project |
| **project_admin** | Project Admin | Can update project details, delete project, grant/revoke permissions, manage members and perform all file operations | update_project, delete_project, manage_project_permissions, manage_project_members, view_project, download_file, create_file, update_file, delete_file |
| **project_viewer** | Project Viewer | Can view project and file meta-data | view_project |
| **file_downloader** | File Downloader | Can download files | view_project, download_file |
| **file_editor** | File Editor | Can view, download, create, update and delete files | view_project, download_file, create_file, update_file, delete_file |

**Permissions** defined to date:

| Permission | Description |
|:------------|:------------|
| **create_project** | Can create new project |
| **update_project** | Can update project header details |
| **delete_project** | Can delete project |
| **manage_project_permissions** | Can grant/revoke permissions |
| **manage_project_members** | Can assign/remove project members |
| **view_project** | Can view project and file meta-data |
| **download_file** | Can download file |
| **create_file** | Can upload new file |
| **update_file** | Can upload new version of existing file |
| **delete_file** | Can delete a file |

## Authorization Roles [/auth_roles]
### List authorization roles [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        "results": [
            { 
                "id": "system_admin",
                "name": "System Admin",
                "description": "Can perform all system operations",
                "permissions": [ "*" ], // ALL permissions across ALL projects...
                "contexts": [ "global" ], // Contexts in which role is relevant (i.e. "global", "project_user", etc.),
                "is_deprecated": false // If deprecated, cannot grant to user, but show for existing users who have this role
            },
            { 
                "id": "platform_user",
                "name": "Platform User",
                "description": "Can create new projects - granted to all registered users",
                "permissions": [ "create_project" ], 
                "contexts": [ "global" ],
                "is_deprecated": false
            },
            { 
                "id": "project_admin",
                "name": "Project Admin",
                "description": "Can update project details, delete project, grant/revoke permissions, manage members and perform all file operations",
                "permissions": [ "update_project", "delete_project", "manage_project_permissions", manage_project_members", "view_project", "download_file", "create_file", "update_file", "delete_file" ],
                "contexts": [ "project_user" ],
                "is_deprecated": false
            }, 
            { 
                "id": "project_viewer",
                "name": "File Viewer",
                "description": "Can view project and file meta-data",
                "permissions": [ "view_project" ],
                "contexts": [ "project_user" ],
                "is_deprecated": false
            },       
            { 
                "id": "file_downloader",
                "name": "File Downloader",
                "description": "Can download files",
                "permissions": [ "view_project", download_file" ],
                "contexts": [ "project_user" ],
                "is_deprecated": false
            },    
            { 
                "id": "file_editor",
                "name": "File Editor",
                "description": "Can view, create, update, delete and download files",
                "permissions": [ "view_project", "download_file", "create_file", "update_file", "delete_file" ],
                "contexts": [ "project_user" ],
                "is_deprecated": false
            }
        ]

## Group Member Roles
A member role resource represents a functional responsibilty (i.e. title) that may be assigned to an individual 
(i.e. user).  These roles have no relationship to authorization roles/permissions.

Once the "Duke Enterprise Project Registry" application is live - these roles may be sourced via integration 
with that platforms Web services API. 

**Member Roles** defined to date:

| Role | Name | Description |
|:-----|:-----|:------------|
| **principal_investigator** | Principal Investigator | Lead investigator for the research project |
| **research_coordinator** | Research Coordinator | Coordinator for the research project |

## Member Roles [/member_roles]
### List member roles [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        "results": [
            { 
                "id": "principal_investigator",
                "name": "Principal Investigator",
                "description": "Lead investigator for the research project",
                "contexts": [ "project_user" ], // Contexts in which role is relevant (i.e. "global", "project_user", etc.)
                "is_deprecated": false
            },
            { 
                "id": "research_coordinator",
                "name": "Research Coordinator",
                "description": "Coordinator for the research project",
                "contexts": [ "project_user" ],
                "is_deprecated": false
            },
            ...
        ]

## Group Current User
The current user resource represents the currently authenticated user.  

## Current User [/current_user]
### Create/register user [POST]
**Permissions required:** none
**Business Rules:**
1. Created user is granted the "platform_user" role by default. 
2. The username defaults to auth_provider.uid, but can be overriden in UI.
3. Unique constraints: username, email, (auth_provider.source + auth_provider.uid)
+ Request (application/json)

        {
            "username": "mrgardner01", 
            "first_name": "Matthew",
            "last_name": "Gardner",
            "email": "mrgardner01@duke.edu", 
            "auth_provider": {
                "source": "duke_shibboleth", 
                "uid": "gardner100", // User ID in context of this auth provider
                "properties": { // Other properties from auth provider (i.e. Duke Shibboleth)
                    <key>: <value>, 
                    <key>: <value>,
                    ...
                }
            }            
        }

+ Response 201 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_roles": [ <auth_role_object>, ... ], // Global roles for currently authenticated user
            "permissions": [ 'create_project', ... ], // Current users global permissions (ACL). The alias permission `*` implies all permissions across all projects. (i.e. "system_admin" role)
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100",
                "properties": { 
                    <key>: <value>, 
                    <key>: <value>,
                    ...
                }
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": <audit_object>
        }

### View current users details [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_roles": [ <auth_role_object>, ... ], 
            "permissions": [ 'create_project', ... ], 
            "auth_provider": {
                "source": "duke_shibboleth", 
                "uid": "gardner100",
                "properties": { 
                    <key>: <value>, 
                    <key>: <value>,
                    ...
                }
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": <audit_object>
        }

## Group Users
A user resource represents a registered user.

## Users collection [/users]
### List registered users [GET]
**Permissions required:** authenticated
+ Response 200 (application/json)

        "results": [
            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu"
            },
            ...
        ]

## Group Projects
A project resource is a container for storing, organizing, retrieving and sharing research data files.

## Projects collection [/projects]
### Create a project [POST]
**Permissions required:** create_project
**Business Rules:**
1. User who creates project is granted "project_admin" role by default. 
2. Unique constraints: name
+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 201 (application/json)

        
        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false, // Has the project been logically deleted from meta data?
            "principal_investigator": <user_object>,
            "current_user": {
                "auth_roles": [ <auth_role_object>, ... ], // Auth roles for currently authenticated user 
                "permissions": [ "update_project", "delete_project", ... ], // Permissions (ACL) for currently authenticated user 
                "member_roles": [ ] // Member roles for currently authenticated user
            },
            "audit": <audit_object>
        }

### List all projects [GET]
**Permissions required:** authenticated
**Business Rules:**
1. Lists projects for which the current user has been granted the "view_project" permission.
2. Projects that have been logically deleted (i.e. "is_deleted": true) are not included in this listing.
+ Response 200 (application/json)

        "results": [
            {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false, // Has the project been logically deleted from meta-data?
                "principal_investigator": <user_object>,
                "current_user": {
                    "auth_roles": [ <auth_role_object>, ... ], // Auth roles for currently authenticated user 
                    "permissions": [ "update_project", "delete_project", ... ], // Permissions (ACL) for currently authenticated user 
                    "member_roles": [ ] // Member roles for currently authenticated user
                },
                "audit": <audit_object>
            },
            ...
        ]

## Project [/projects/{id}]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### View project details [GET]
**Permissions required:** view_project (for project)
+ Response 200 (application/json)

        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false, 
            "principal_investigator": <user_object>,
            "current_user": {
                "auth_roles": [ <auth_role_object>, ... ],  
                "permissions": [ "update_project", "delete_project", ... ], 
                "member_roles": [ ] 
            },
            "audit": <audit_object>
        }

### Update a project [PUT]
**Permissions required:** update_project (for project)
+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 200 (application/json)
        
        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false, 
            "principal_investigator": <user_object>,
            "current_user": {
                "auth_roles": [ <auth_role_object>, ... ], 
                "permissions": [ "update_project", "delete_project", ... ],  
                "member_roles": [ ] 
            },
            "audit": <audit_object>
        }
        
### Delete a project [DELETE]
**Permissions required:** delete_project (for project)
**Business Rules:**
1. Logically deletes project from the meta-data (i.e. sets "is_deleted": true).  For the MVP, the files
associated to the project are not deleted from their physical storage location. 
+ Response 204 

## Group Project Permissions
The project permissions resource represents the authorization roles (i.e. permissions) granted to a platform user in the context of a project.

## Project Permissions collection [/projects/{id}/permissions]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Grant/revoke permissions for a platform user [PUT]
**Permissions required:** manage_project_permissions (for project)
+ Request (application/json)

        {
            "user": { "id": "434cf35a-98e0-4c2e-9a17-7bc009f9bb23" }, 
            "auth_roles": [ "file_editor", ... ]  // Authorization roles to grant user.  To revoke all permissions `"auth_roles": [ ]`.
        }

+ Response 200 (application/json)

        {
            "id": "a839b3bb-7b03-44de-b9cf-53152e4c7243",
            "project": <project_object>,
            "user": <user_object>,
            "auth_roles": [ <auth_role_object>, ... ],
            "permissions": [ "view_project", "download_file", "create_file", ... ] // Permissions (ACL) for user
        }

### List all project permissions [GET]
**Permissions required:** view_project (for project)
+ Response 200 (application/json)

        "results": [
             {
                "id": "a839b3bb-7b03-44de-b9cf-53152e4c7243",
                "project": <project_object>,
                "user": <user_object>,
                "auth_roles": [ <auth_role_object>, ... ],
                "permissions": [ "view_project", "download_file", "create_file", ... ]
            },
            ...
        ]       

## Group Project Members
The project members resource represents the functional roles an individual (i.e. user) plays in the context of a project.

## Project Members collection [/projects/{id}/members]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Assign/remove project members [PUT]
**Permissions required:** manage_project_member (for project)
+ Request (application/json)

        {
            "user": { "id": "434cf35a-98e0-4c2e-9a17-7bc009f9bb23" }, 
            "member_roles": [ "principal_investigator", ... ]  // Member roles assigned to user.  To remove all assigned roles `"member_roles": [ ]`.
        }

+ Response 200 (application/json)

        {
            "id": "a839b3bb-7b03-44de-b9cf-53152e4c7243",
            "project": <project_object>,
            "user": <user_object>,
            "member_roles": [ <member_role_object>, ... ]
        }

### List project members [GET]
**Permissions required:** view_project (for project) 
+ Response 200 (application/json)

        "results": [
             {
                "id": "a839b3bb-7b03-44de-b9cf-53152e4c7243",
                "project": <project_object>,
                "user": <user_object>,
                "member_roles": [ <member_role_object>, ... ]
            },
            ...
        ]       
