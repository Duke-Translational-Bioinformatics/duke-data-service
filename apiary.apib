FORMAT: 1A
HOST: http://data-services.duke.edu/

# Duke Data Services

The Duke Data Service API allows Duke researchers to store, organize, retrieve and share data. 

The intent here is to create a strawman for the data service API. Key focuses are on API endpoints that enhance 
usability for "shallow end of the pool" users, endpoints that support the needs of investigators for managing 
their research groups, endpoints that accommodate shared resource and core facility needs, endpoints that support 
SOM administration of data resources, and endpoints that facilitate reproducible scientific workflows. There are 
tensions to resolve to meet these needs, and we should consider whether the API might be broken up into multiple 
APIs, whether some business logic be pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design) 
requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a Request-id in each 
response header, among others.

## Group API Usage

Client API Key
--------------
Should we have an API key for the MVP that verifies the API is being accessed by an authorized 
client platform/developer?  Perhaps allow authorized users to generate a secret API key via the Web 
interface (liken to Google API key provisioning model).

User Authentication
--------------
Platform users will be required to authenticate via a trusted authentication provider/service. (i.e. Duke Shibb for MVP)

* For MVP, JWT token will be generated via a successful HTTPS callback from Duke Shibboleth single sign-on 
service.  This token must be supplied in header for subsequent API calls.  
* What will be our token expiration policy?  When will users/clients be required to re-authenticate?
* Assume that when a Duke user authenticates successfully for the fist time, their profile would be registered into 
the platforms user data store.

Collection Pagination
--------------
For endpoints that return a collection of resources/objects, the number of objects returned can be 
controlled by including the `limit` query parameter.  For example: `/projects?limit=25`; Collection payloads 
will have the following structure to facilitate client pagination:

    {
        "count": 100,
        "limit": 25,
        "next": "https://data-services.duke.edu/projects?page=3", 
        "previous": "https://data-services.duke.edu/projects?page=1", 
        "results": [
            { <resource_object> },
            { <resource_object> },
            ...
        ]
    }

* This structure is only an example, may change based on specific grape/rails framework plug-in for pagination.   
* Example payloads herein for resource specific collections will only include `"results": []` structure.

Audit Object
--------------
Some resource payloads may include a composite audit object. An example structure of that 
object is represented here and will be referenced as `<audit_object>` in resource specific payloads.
        
    {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": { 
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner"
        },
        "updated_on": "2015-01-01T13:00:00Z",
        "updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner"
        }
    }

Clients Errors
----------------
Define here how client errors will be handled and represented.

<!--
## Group Authentication
Authentication resource provides the means to verify identity of a platform user.


## Authenticate [/authenticate/user_token]
### Get a user authentication token - i.e. JSON Web Token [POST]
* If we use Duke single sign-on with muti-factor authetication, I assume we will need to translate the valid 
shibboleth identity to a JWT, so this API may take a different set of params to perform that translation.

* Assume that when a Duke user authenticates successfully for the fist time, their profile would be registered into 
the platforms local user data store (i.e. user table or tables).

* We also need to think about how command line clients and software agents would authenticate to the API? - they 
will not be using the Duke single sign-on Web interface.

+ Request (application/json)

        { "username": "mrgardner01", "password": "pennState$grad" }
        
+ Response 201 (application/json)

        { "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWI......." }
-->
        
## Group Authorization Roles
The authorization roles resource defines the system operations a platfom user may perform.  Each authorization
role is a set of discrete systems permissions.  

The following is a list of **Authorization Roles** defined to date... this will expand once we move beyond the MVP... 

| Role | Name | Description | Permission(s) |
|:-----|:-----|:------------|:--------------|
| **system_admin** | System Admin | Can perform all system operations | \[*\] (i.e. ALL permissions across ALL projects) |
| **platform_user** | Platform User | Can create new projects (granted to all registered users for MVP) | create_project |
| **project_admin** | Project Admin | Modify project and manage membership  | update_project, delete_project, manage_project_member |
| **file_viewer** | File Viewer | Can download files | download_file |
| **file_editor** | File Editor | Can create, update and delete files | create_file, update_file, delete_file, download_file |
| **file_sharer** | File Sharer | Can share files | share_file |

The following is a list of **Permissions** defined to date... 

| Permission | Description |
|:------------|:------------|
| **create_project** | Can create new project |
| **update_project** | Can update project header details |
| **delete_project** | Can delete project |
| **manage_project_member** | Can associate (i.e.invite)/remove users to/from project and grant/revoke roles
| **create_file** | Can upload new file |
| **update_file** | Can upload new version of existing file |
| **download_file** | Can download file |
| **delete_file** | Can delete a file |
| **share_file** | Can share file with another project/user |

## Authorization Roles [/auth_roles]
### List all defined roles [GET]
+ Response 200 (application/json)

        "results": [
            { 
                "id": "system_admin",
                "name": "System Admin",
                "description": "Can perform all system operations",
                "permissions": [ "*" ], // ALL permissions across ALL projects...
                "contexts": [ "global" ] // Defines contexts in which role is relevant (i.e. "global", "project_member", etc.)
            },
            { 
                "id": "platform_user",
                "name": "Platform User",
                "description": "Can create new projects (granted to all registered users for MVP)",
                "permissions": [ "create_project" ], 
                "contexts": [ "global" ]
            },
            { 
                "id": "project_admin",
                "name": "Project Admin",
                "description": "Can update project details, delete project, and manage members",
                "permissions": [ "update_project", "delete_project", "manage_project_members" ],
                "contexts": [ "project_user" ]
            },    
            { 
                "id": "file_viewer",
                "name": "File Viewer",
                "description": "Can download files",
                "permissions": [ "download_file" ],
                "contexts": [ "project_user" ]
            },    
            { 
                "id": "file_editor",
                "name": "File Editor",
                "description": "Can create, update, delete and download files",
                "permissions": [ "create_file", "update_file", "delete_file", "download_file" ],
                "contexts": [ "project_user" ]
            },        
            { 
                "id": "file_sharer",
                "name": "File Sharer",
                "description": "Can share file with another project/user",
                "permissions": [ "share_file" ],
                "contexts": [ "project_user" ]
            }       
        ]

## Group Current User
The current user resource represents the currently authenticated user.

## Current User [/current_user]
### View current users details [GET]
+ Response 200 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_roles": [ "system_admin", ... ], // Global roles for currently authenticated user
            "auth_provider": {
                "source": "duke_shibboleth",
                "properties": { 
                    <key>: <value>, // Properties from auth provider (i.e. Duke specific user properties)
                    <key>: <value>,
                    ...
                }
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": <audit_object>
        }
        
## Current Users Projects [/current_user/projects]
### List projects for which current user is a member [GET]
+ Response 200 (application/json)

        "results": [
            <project_object>,  // See `/projects/{id}` endpoint 
            <project_object>,
            ...
        ]  

## Group Users
A user resource represents a platform end user.  In our case for the MVP, this is a Duke employee
or affiliate with a valid Duke NetID.

## Users collection [/users]
### List all platform users [GET]
+ Response 200 (application/json)

        "results": [
            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu"
            },
            ...
        ]

## Group Projects
A project resource is a container for storing, organizing, retrieving and sharing research data files.

## Projects collection [/projects]
### Create a project [POST]
* Assumes platform user who creates project is assigned the Project Admin ("project_admin") role.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "principal_investigator": { "id": "d73f20fd-c2ba-4f24-bec5-f7b0171eabef" }
        }

+ Response 201 (application/json)

        
        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "principal_investigator": <user_object>,
            "current_user": {
                "auth_roles": [ "project_admin", ... ] // Project specific roles for currently authenticated user
            },
            "audit": <audit_object>
        }

### List all projects [GET]
+ Response 200 (application/json)

        "results": [
            {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "principal_investigator": <user_object>,
                "current_user": {
                    "auth_roles": [ "project_admin", ... ] // Project specific roles for currently authenticated user
                },
                "audit": <audit_object>
            },
            ...
        ]

## Project [/projects/{id}]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### View project details [GET]
+ Response 200 (application/json)

        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "principal_investigator": <user_object>,
            "current_user": {
                "auth_roles": [ "project_admin", ... ]
            },
            "audit": <audit_object>
        }
        
### Delete a project [DELETE]
* We need to decide what happens for this use case? Is the project logically deleted and then after X months system 
permanently purges files from disk?  What is the policy?

+ Response 204 

## Group Project Users
The project users resource represents platform users that are members of a project.

## Project Users collection [/projects/{id}/users]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Associate a user to a project [POST]
* Assumes only user with Project Admin role (i.e. "project_admin") can associate and remove project members.

+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

+ Request (application/json)

        {
            "user": { "id": "434cf35a-98e0-4c2e-9a17-7bc009f9bb23" }, 
            "auth_roles": [ "file_editor", ... ]  // Project specific roles for member
        }

+ Response 201 (application/json)

        {
            "id": "a839b3bb-7b03-44de-b9cf-53152e4c7243",
            "project": <project_object>,
            "user": <user_object>,
            "auth_roles": [ "file_editor", ... ]
        }

### List all users of a project [GET]
+ Response 200 (application/json)

        "results": [
            { 
                "id": "af4e4ffc-cdf3-4673-a0b4-df187f6e8df0",
                "project": <project_object>,
                "user": <user_object>, 
                "auth_roles": [ "project_admin", ... ]
            },
            ...
        ]       

## Project User [/project_users/{id}]
+ Parameters
    + id (required, string, `af4e4ffc-cdf3-4673-a0b4-df187f6e8df0`) ... Globally unique `id` of the project user.

### Remove a user from a project [DELETE]
+ Response 204

