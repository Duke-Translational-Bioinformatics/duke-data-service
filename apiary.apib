FORMAT: 1A
HOST: https://uatest.dataservice.duke.edu/api/v1/

# Duke Data Service 

The Duke Data Service (DDS) API allows Duke researchers to store, organize, retrieve and share data.

This the documentation for the Data Service API. Key focuses are on API endpoints that enhance usability for "shallow end of the pool" users, endpoints that support the needs of investigators for managing their research groups, endpoints that accommodate shared resource and core facility needs, endpoints that support SOM administration of data resources, and endpoints that facilitate reproducible scientific workflows. There are tensions to resolve to meet these needs, and we should consider whether the API might be broken up into multiple APIs, whether some business logic be pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design) requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a Request-id in each response header, among others.

## API Change Log

24-Feb-2016
--------------
+ Updated API usage details - included convenience links to *Web Portal* and *API Explorer*.
+ Added `agent` property to standard *Audit Object* - this will be populated when resources are created or modified by a *Software Agent*. 
+ Added *Software Agents* resource/actions - includes actions for maintaining agent, maintaining agent secret API key, and getting access token.
+ Extended *Current User* resource actions - added actions for maintaining user secret API key.
+ For *Projects* resource - removed unique contraint rule on `project.name`.
+ For *Storage Providers* resource - added `chunk_hash_algorithm` - this can be used by clients to determine type of hash to report for uploaded chunks.  This is only relevant for chunks, entire file hashes must be reported as `sha1`.
+ Added `GET /uploads` action - allows hashing agent to to search across projects for uploads that are pending hash computation.
+ Modified `hash` property for *Uploads* resource - this property now contains `client_reported` and `server_reported` properties to support server side hash computation and verification of optionally reported client hash. 
+ For *Files* resource - added `PUT /files/{id}` action that allows select file properties to be updated. The significant extension here is when `file.upload` property is updated, the previous file upload is transtioned to version history stack.
+ Added `label` property to *Files* resource to help users differentiate file versions.
+ Added *File Versions* resource/actions - includes actions for retrieving, updating and removing prior versions of a file.

26-Feb-2016
--------------
+ Added provenance *Activities* resource/actions - includes actions for creating, retrieving, updating and removing provenance activties.

08-Mar-2016
--------------
+ Added *Provenance Relations* resource/actions - includes actions for creating, retrieving and removing `Used` and `WasGeneratedBy` provenance relations.

09-Mar-2016
--------------
+ Added *Search Provenance* resource/actions - supports graph query of provenance chains; returns graph results that are structured for visualization.

15-Mar-2016
--------------
+ For resource actions not yet implemented - added *NOT_IMPLEMENTED* prefix to inform API consumers as well a dredd testing workflow.
+ Revereted design changes to support server hashing agent back to current production implementation.  This will be addressed in later sprint.

## Group API Usage

Web Portal
--------------
There is a [Web portal](https://dataservice.duke.edu) that allows users to interact with the Web services API.  Access is currently restricted to Duke staff with a valid Duke NetID and password.  To access the Web portal, Duke staff must successfully authenticate via the Duke single sign-on process.

Programmatic Keys
--------------
In an effort to promote provenance, all programmatic access to the API must utilize the concept of a software agent.  From the Web portal, an authorized user can generate secret keys for both a software agent and their user account.  In tandem, these secret keys can be used to obtain an access token from a programmatic context.  For usage details, see the actions for **Software Agents** and **Current User**.

Exploring the API
--------------
In addition to the API usage documentation herein, users may experiment with the live API actions in a test environment via the [API Explorer](https://uatest.dataservice.duke.edu/apiexplorer).

Collection Pagination
--------------
For actions that return a collection of resources/objects, the number of objects returned will be paginated. The number of objects returned per page, and the desired page can be controlled using the query parameters `page`, and `per_page`.  For example: `/projects?per_page=25` will return the first 25 projects, and `/projects?page=3&per_page=25` will return the third batch of 25 projects.  Collection payloads will always be returned as an array of objects; the `results` property will reference the array as follows:

    {
        "results": [
            { },
            { },
        ]
    }

To make it easy for clients to manage pagination, the following headers will always be included in the response:

* X-Total: The total number of objects that would be returned by the query unpaginated
* X-Total-Pages: The total number of pages given X-Total and X-Per-Page
* X-Page: Current Page (passed in as query parameter)
* X-Per-Page: per_page (passed in as query parameter)
* X-Next-Page: Next page to be collected
* X-Prev-Page: Previous page (will be empty on first page)

Audit Object
--------------
Resource payloads may include a composite audit object. An example structure of that object is represented here and will be referenced by the `audit` key in resource specific payloads.

    "audit": {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": {
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner",
            "agent": {
                "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
                "name": "Hashing computation agent"
            }
        },
        "last_updated_on": "2015-01-01T13:00:00Z",
        "last_updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner",
            "agent": null
        },
        "deleted_on": null,
        "deleted_by": null
    }

API Errors
----------------
We should respond with context appropriate error codes, especially for 400 class errors, using the [Standard List](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)

* 400: no API token, validation errors
* 401: bad API token
* 403: user performing request which they do not have permission to perform
* 404: user requesting resource that does not exist

All error responses should include a JSON response that provides the HTTP status code, details of the error that occurred, and possible steps to address the problem. For example:

    {
        "error": "404",
        "reason": "Project does not exist",
        "suggestion": "You may have chosen the wrong ID."
    }

Validation errors require a field-level breakdown with an array of errors (even if multiple errors occur for the same field), each describing the field with the error, and message describing the error encountered.

    {
        "error": "400",
        "reason": "validation failed",
        "suggestion": "Fix the following invalid fields and resubmit"
        "errors" : [
            {
                "field" : "name",
                "message" : "Project needs a name."
            },
            {
                "field" : "principal_investigator",
                "message" : "Principal Investigator must be specified for each project."
            }
        ]
    }

## Group Authorization Roles
Represents the set of discrete permissions that can be granted to a user.

**Authorization Roles:**

| role | name | description | permission(s) |
|:-----|:-----|:------------|:--------------|
| **system_admin** | System Admin | Can manage system level permissions and perform all operations across all projects | system_admin |
| **project_admin** | Project Admin | Can update project details, delete project, manage project level permissions and perform all file operations | view_project, update_project, delete_project, manage_project_permissions, download_file, create_file, update_file, delete_file |
| **project_viewer** | Project Viewer | Can only view project and file metadata | view_project |
| **file_downloader** | File Downloader | Can download files | view_project, download_file |
| **file_uploader** | File Uploader | Can upload files | view_project, create_file |
| **file_editor** | File Editor | Can view, download, create, update and delete files | view_project, download_file, create_file, update_file, delete_file |


**Permissions:**

| permission | description |
|:------------|:------------|
| **system_admin** | Can manage system level permissions and perform all operations across all projects |
| **view_project** | Can view project and file metadata |
| **update_project** | Can update project header details and project affiliations |
| **delete_project** | Can delete project |
| **manage_project_permissions** | Can grant/revoke project level permissions |
| **download_file** | Can download file |
| **create_file** | Can upload new file |
| **update_file** | Can upload new version of existing file |
| **delete_file** | Can delete a file |

## Authorization Roles collection [/auth_roles{?context}]
+ Parameters
    + context (string, optional, `system`) ... The `context` or scope in which permission can be granted; valid context values are `system` or `project`.

### List roles [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "system_admin",
                    "name": "System Admin",
                    "description": "Can manage system level permissions and perform all operations across all projects",
                    "permissions": [ 
                        {"id": "system_admin"}
                    ],
                    "contexts": ["system"],
                    "is_deprecated": false
                }
            ]
        }

## Authorization Role instance [/auth_roles/{id}]
+ Parameters
    + id (string, required, `file_editor`) ... The unique `id` for an authorization role.

### View role [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "file_editor",
            "name": "File Editor",
            "description": "Can view, download, create, update and delete files",
            "permissions": [ 
                {"id": "view_project"}, 
                {"id": "download_file"} 
            ],
            "contexts": ["project"],
            "is_deprecated": false
        }

## Group Software Agents
Represents a software agent and associated secret that can be used to access the API actions from programmatic clients, such as research core pipelines, or background jobs/tasks (e.g. hash computations, deletion of storage for failed uploads, etc.).  In an effort to promote provenance, all programmatic access to the API must be via an agent secret key in tandem with a user account secret key (see **Current User** actions).

## Software Agents collection [/software_agents]

## Create software agent [POST]
Creates software agent and an associated secret API key; the secret key is visible and managed through the `software_agents/{id}/api_key` action.

>**Permission:** authenticated
- - - - -

>**Request Properties**
- - - - -
+ **name (string)** - A short name for the software agent.
+ **description (string, optional)** - A verbose description for the software agent.
+ **repo_url (string, optional)** - The url of the repository (e.g. Git, Bitbucket, etc.) that contains the agent source code.

+ Request (application/json)

        {
            "name": "Hash computation agent"
        }

+ Response 200 (application/json)

        {
            "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
            "name": "Hash computation agent",
            "description": null,
            "repo_url": null,
            "is_deleted": false,
            "audit": { }
        }

## List software agents [GET]
>**Permission:** authenticated
- - - - -

>**Rules**
- - - - -
+ Software Agents that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Response 200 (application/json)

        {
            "results": [ 
                {
                    "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
                    "name": "Hash computation agent",
                    "description": null,
                    "repo_url": null,
                    "is_deleted": false,
                    "audit": { }
                } 
            ]
        }

## Software Agent instance [/software_agents/{id}]
+ Parameters
    + id (string, required, `9a4c28a2-ec18-40ed-b75c-3bf5b309715`) ... The unique `id` for a software agent.

## View software agent [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

           {
                "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
                "name": "Hash computation agent",
                "description": null,
                "repo_url": null,
                "is_deleted": false,
                "audit": { }
            }

## Update software agent [PUT]
>**Permission:** creator or system_admin
- - - - -

+ Request (application/json)

        {
            "repo_url": "https://github.com/mgardnerpsu/dukeds-dredd"
        }

+ Response 200 (application/json)

            {
                "id": "9a4c28a2-ec18-40ed-b75c-3bf5b309715f",
                "name": "Hash computation agent",
                "description": null,
                "repo_url": "https://github.com/mgardnerpsu/dukeds-dredd",
                "is_deleted": false,
                "audit": { }
            }

## Delete software agent [DELETE]
>**Permission:** creator or system_admin

+ Response 204

## Software Agent Secret Key [/software_agents/{id}/api_key]
+ Parameters
    + id (string, required, `9a4c28a2-ec18-40ed-b75c-3bf5b309715`) ... The unique `id` for a software agent.

## View software agent API key [GET]
Shows the secret key for the software agent.

>**Permission:** creator or system_admin
- - - - -

>**Response Properties**
- - - - -
+ **key (string)** - A secret key that can be used in tandem with a user secret key to obtain an API access token.
+ **created_on (datetime)** - The date the software agent key was generated.

+ Response 200 (application/json)

            {
                "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ...",
                "created_on": "2015-01-01T12:00:00Z"
            }

## Re-generate software agent API key [PUT]
Generates a new secret key for the software agent.

>**Permission:** creator or system_admin
- - - - -

+ Response 200 (application/json)

        {
            "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "created_on": "2015-06-01T12:00:00Z"
        }

## Software Agent Access Token [/software_agents/api_token]

## Get software agent access token [POST]
Using a software agent secret key and a user secret key, get an access token.

>**Permission:** public
- - - - -

>**Request Properties**
- - - - -
+ **agent_key (string)** - The secret key for a software agent.
+ **user_key (string)** - The secret key for a user.

>**Response Properties**
- - - - -
+ **api_token (string)** - The access token.
+ **expire_on (number)** - Token expiration as posix/epoch time.

>**Rules**
- - - - -
+ The agent associated with the agent key must not have been logically deleted.

+ Request 

        { 
            "agent_key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "user_key": "klmOiJKV1QiLYHkl098EfNiJJIUzI1NiJ93R..."
        }

+ Response 200 (application/json)

        {
            "api_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6I...",
            "expire_on": 1455571739
        }

## Group Current User
Represents the currently authenticated user.

## Current User instance [/current_user]

### View current user [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100"
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": { }
        }

## Current user usage [GET /current_user/usage]
View summary usage for current user across all projects.

>**Permission:** view_project
- - - - -

>**Response Properties**
- - - - -
+ **project_count (number)** - Total number of projects where the user has been granted a project level authorization role.
+ **file_count (integer)** - Total number of files the user has created (i.e. uploaded) across all projects.
+ **storage_bytes (integer)** - Total bytes for files the user has created (i.e. uploaded) across all projects.

>**Rules**
- - - - -
+ Deleted objects (i.e. `"is_deleted": true`) should be excluded from all counts/totals.
+ Counts/totals are only for objects user has visibility to via the view_project permission.

+ Response 200 (application/json)

        {
            "project_count": 10,
            "file_count": 126,
            "storage_bytes": 304006007009
        }

## Current User Secret Key [/current_user/api_key]

## Generate current user API key [PUT]
Generates a secret key for the current user that can be used to access the API actions from a scripting context (i.e. bash, python, R, etc...); this secret key must be used in tandem with a valid software agent secret key (see **Software Agents** actions).

>**Permission:** authenticated
- - - - -

>**Response Properties**
- - - - -
+ **key (string)** - A secret key that can be used in tandem with a software agent secret key to obtain an API access token.
+ **created_on (datetime)** - The date the user key was generated.

>**Rules**
- - - - -
+ If the current user already has an API key, this action deletes their exisiting key and generates a new key.

+ Response 200 (application/json)

        {
            "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "created_on": "2015-01-01T12:00:00Z"
        }

## View current user API key [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "key": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjY...",
            "created_on": "2015-01-01T12:00:00Z"
        }

## Delete current user API key [DELETE]
>**Permission:** authenticated
- - - - -

+ Response 204 

## Group Users
Represents registered users.

## Users collection [/users{?full_name_contains,first_name_begins_with,last_name_begins_with}]

### List users [GET]
>**Permission:** authenticated
- - - - -

+ Parameters
    + full_name_contains (string, optional, `gardner`) ... Returns users where their `full_name` contains the specified string.
    + first_name_begins_with (string, optional, `mat`) ... Returns users where their `first_name` begins with the specified string.
    + last_name_begins_with (string, optional, `gar`) ... Returns users where their `last_name` begins with the specified string.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "first_name": "Matthew",
                    "last_name": "Gardner",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu",
                    "auth_provider": {
                        "source": "duke_shibboleth",
                        "uid": "gardner100"
                    },
                    "last_login_on": "2015-01-01T12:00:00Z",
                    "audit": { }
                }
            ]
        }

## User instance [/users/{id}]
+ Parameters
    + id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `id` for a user.

### View user [GET]
>**Permission:** authenticated
- - - - -

+ Response 200

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100"
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": { }
        }

## Group System Permissions
Represents system level authorization roles that have been granted to a user.

## System Permissions collection [/system/permissions]

### List system permissions [GET]
>**Permission:** system_admin
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "username": "mrgardner01",
                        "full_name": "Matthew Gardner"
                    },
                    "auth_role": { 
                        "id": "system_admin", 
                        "name": "System Admin", 
                        "description": "Can manage system level permissions and perform all operations across all projects" 
                    }
                }
            ]
        }

## System Permission instance [/system/permissions/{user_id}]
+ Parameters
    + user_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { 
                    "id": "system_admin", 
                    "name": "System Admin", 
                    "description": "Can manage system level permissions and perform all operations across all projects" 
                }
            }

### Grant system permission [PUT]
>**Permission:** system_admin
- - - - -

>**Rules**
- - - - -
+ Revokes any existing system level authorization role for the user and grants the new role.
+ The role specified must be a system level authorization role (i.e. `system` in `auth_role.contexts`).

+ Request (application/json)

        {
            "auth_role": {"id": "system_admin"}
        }

+ Response 200

    [System Permission instance][]

### View system permission [GET]
>**Permission:** system_admin OR system permissions are for the current user
- - - - -

+ Response 200

    [System Permission instance][]

### Revoke system permission [DELETE]
>**Permission:** system_admin
- - - - -

+ Response 204

## Group Projects
Represents a container for storing, organizing, retrieving and sharing research data files and their associated metadata.

## Projects collection [/projects]

### Create project [POST]
>**Permission:** authenticated
- - - - -

>**Rules**
- - - - -
+ User who creates project is granted the `project_admin` authorization role.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 201 (application/json)

        {
            "kind": "dds-project",
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false,
            "audit": { }
        }

### List projects [GET]
>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Projects that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)",
                    "description": "Goal of generating a targeted knockout mutation...",
                    "is_deleted": false,
                    "audit": { }
                }
            ]
        }

## Project instance [/projects/{id}]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

+ Model (application/json)

    + Body

            {
                "kind": "dds-project",
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "audit": { }
            }

### View project [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Project instance][]

### Update project [PUT]
>**Permission:** update_project
- - - - -

>**Rules**
- - - - -
+ Only `name` and `description` properties may be updated via this action.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 200

    [Project instance][]

### Delete project [DELETE]
>**Permission:** delete_project
- - - - -

>**Rules**
- - - - -
+ This operation recursively deletes all of the project children (i.e. folders,files and file versions).

+ Response 204

## Group Project Permissions
Represents project level authorization roles that have been granted to a user.

## Project Permissions collection [/projects/{id}/permissions]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

### List project permissions [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "username": "mrgardner01",
                        "full_name": "Matthew Gardner"
                    },
                    "auth_role": { 
                        "id": "file_editor", 
                        "name": "File Editor", 
                        "description": "Can view, download, create, update and delete files" 
                    }
                }
            ]
        }

## Project Permission instance [/projects/{project_id}/permissions/{user_id}]
+ Parameters
    + project_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `project_id` of the project.
    + user_id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

             {
                "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { 
                    "id": "file_editor", 
                    "name": "File Editor", 
                    "description": "Can view, download, create, update and delete files" 
                }
            }

### Grant project permission [PUT]
>**Permission:** manage_project_permissions
- - - - -

>**Rules**
- - - - -
+ Revokes any existing project level authorization role for the user and grants the new role.
+ The role specified must be a project level authorization role (i.e. `project` in `auth_role.contexts`).
+ The current user cannot grant or revoke their own project level role.

+ Request (application/json)

        {
            "auth_role": {"id": "file_editor"}
        }

+ Response 200

    [Project Permission instance][]

### View project permission [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Project Permission instance][]

### Revoke project permission [DELETE]
>**Permission:** manage_project_permissions
- - - - -

>**Rules**
- - - - -
+ The project must have at least one user with the `project_admin` role.
+ The current user cannot revoke their own project level role.

+ Response 204

## Group Project Roles
Represents an organizational role that an individual (i.e. user) may assume in the context of a project.  These organizational roles have no relationship to authorization roles.

**Project Roles:**

| role | name | description |
|:-----|:-----|:------------|
| **principal_investigator** | Principal Investigator | Lead investigator for the research project |
| **research_coordinator** | Research Coordinator | Coordinator for the research project |

## Project Roles collection [/project_roles]

### List project roles [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "principal_investigator",
                    "name": "Principal Investigator",
                    "description": "Lead investigator for the research project",
                    "is_deprecated": false
                },
                {
                    "id": "research_coordinator",
                    "name": "Research Coordinator",
                    "description": "Coordinator for the research project",
                    "is_deprecated": false
                }
            ]
        }

## Project Role instance [/project_roles/{id}]
+ Parameters
    + id (string, required, `principal_investigator`) ... The unique `id` for a project role.

### View project role [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "principal_investigator",
            "name": "Principal Investigator",
            "description": "Lead investigator for the research project",
            "is_deprecated": false
        }

### Group Affiliates
Represents an individual that plays some project level role of interest from a collaboration perspective.  The affiliate must be a registered user.

## Affiliates collection [/projects/{id}/affiliates]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

### List affiliates [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "full_name": "Matthew Gardner",
                        "email": "mrgardner01@duke.edu"
                    },
                    "project_role": { 
                        "id": "principal_investigator", 
                        "name": "Principal Investigator" 
                    }
                }
            ]
        }

## Affiliate instance [/projects/{project_id}/affiliates/{user_id}]
+ Parameters
    + project_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `project_id` of the project.
    + user_id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu"
                },
                "project_role": { 
                    "id": "principal_investigator", 
                    "name": "Principal Investigator" 
                }
            }

### Associate affiliate [PUT]
>**Permission:** update_project
- - - - -

>**Rules**
- - - - -
+ Deletes any existing project role for the user and assigns new role.

+ Request (application/json)

        {
            "project_role": {"id": "principal_investigator"}
        }

+ Response 200

    [Affiliate instance][]

### View affiliate [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Affiliate instance][]

### Delete affiliate [DELETE]
>**Permission:** update_project
- - - - -

+ Response 204

## Group Storage Providers
Represents an external service that provides physical storage space for files.

## Storage Providers collection [/storage_providers]

### List storage providers [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                    "name": "duke_oit_swift",
                    "description": "Duke OIT Storage",
                    "chunk_hash_algorithm": "md5",
                    "is_deprecated": false
                },
                {
                    "id": "t4479f73-0774-4f96-afc7-9d251e65by88",
                    "name": "amazon_s3_glacier",
                    "description": "Amazon Glacier Cloud Storage",
                    "chunk_hash_algorithm": "sha1",
                    "is_deprecated": false
                }
            ]
        }

## Storage Provider instance [/storage_providers/{id}]
+ Parameters
    + id (string, required, `g5579f73-0558-4f96-afc7-9d251e65bv33`) ... The unique `id` of the storage provider.


### View storage provider [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
            "name": "duke_oit_swift",
            "description": "Duke Office of Information Technology Storage",
            "chunk_hash_algorithm": "md5",
            "is_deprecated": false
        }

## Group Folders
A folder is a container for files and sub-folders; folders are located in the top-level project root or a a parent folder.

## Folders collection [/folders]

### Create folder [POST]
>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **parent.kind (string, required)** - The kind of parent container for the folder; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ **parent.id (string, required)** - The unique id of the parent.
+ **name (string, required)** - A short name for the folder.

>**Response Properties**
- - - - -
+ **ancestors (object[ ])** - Represents entire ancestral path, from the root node (project or folder), down to its parent, in hierarchical order.

+ Request (application/json)

        {
            "parent": { 
                "kind": "dds-folder", 
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" 
            },
            "name": "Raw Data"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { 
                "kind": "dds-folder", 
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" 
            },
            "name": "Raw Data",
            "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", 
                    "name": "Sequencing Core" 
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Folder instance [/folders/{id}]
+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

### View folder [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { 
                "kind": "dds-folder", 
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" 
            },
            "name": "Raw Data",
            "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", 
                    "name": "Sequencing Core" 
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

### Delete folder [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ This operation recursively deletes all of the folder children (i.e. folders, files and file versions).

+ Response 204

## Move folder [PUT /folders/{id}/move]
>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ Folders can only be moved within the context of the folders current project.
+ The destination folder cannot be a child of the folder being moved.

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "parent": { 
                "kind": "dds-folder", 
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" 
            }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { 
                "kind": "dds-folder", 
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" 
            },
            "name": "Raw Data",
            "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc", 
                    "name": "Flow Core" 
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Rename folder [PUT /folders/{id}/rename]
>**Permission:** create_file
- - - - -

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "name": "Model Data"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { 
                "kind": "dds-folder", 
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" 
            },
            "name": "Model Data",
            "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc", 
                    "name": "Flow Core" 
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Group Uploads
All files must be uploaded using a multi-part/chunked upload process.  Although this places more burden on clients to divide larger files into chunks and send each chunk separately, the result is a more robust process that allows failed chunks to be resent.  The following actions must be used by the client to manage the chunked upload process.

## Uploads collection [/projects/{id}/uploads]
+ Parameters
    + id (required, string, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... Globally unique `id` of the project.

### Initiate chunked upload [POST]
This is the first step in uploading a large file. An upload objects is created along with a composite status object that can be polled by client agents to track the progress of the chunked upload.

>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **name (string, required)** - The name of the client file to upload.
+ **content_type (string, optional)** - Valid content type per [media types](https://en.wikipedia.org/wiki/Internet_media_type).
+ **size (number, required)** - The size in bytes of entire file (computed by client).
+ **hash.value (number, required)** - The entire file hash (computed by client).
+ **hash.algorithm (string, required)** - The algorithm used to compute entire file hash (i.e. md5, sha256, sha1, etc.).

>**Response Properties**
- - - - -
+ **chunks (object)** - The chunks the client has requested to upload.
+ **storage_location (object)** - Object that contains target storage details.
+ **status (object)** - Object used to track status of overall file upload.

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                "algorithm": "md5" 
            }
        }

+ Response 201 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                "algorithm": "md5", 
                "client_reported": true, 
                "confirmed": false 
            },
            "chunks": [ ],
            "storage_provider": { 
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                "name": "duke_oit_swift", "description": 
                "Duke OIT Storage" 
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

### List chunked uploads [GET]
>**Permission:** create_file
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "content_type": "application/octet-stream",
                    "hash": { 
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                        "algorithm": "md5", 
                        "client_reported": true, 
                        "confirmed": false 
                    },
                    "chunks": [ ],
                    "storage_provider": { 
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                        "name": "duke_oit_swift", 
                        "description": "Duke OIT Storage" 
                    },
                    "status": {
                        "initiated_on": "2015-07-10T13:00:00Z",
                        "completed_on": null,
                        "error_on": null,
                        "error_message": null
                    },
                    "audit": { }
                }
            ]
        }

## Upload instance [/uploads/{id}]
+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

## View chunked upload [GET]
>**Permission:** create_file
- - - - -

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                "algorithm": "md5", 
                "client_reported": true, 
                "confirmed": false 
            },
            "chunks": [
                {
                    "number": 1,
                    "size": 10000,
                    "hash": { 
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                        "algorithm": "md5" 
                    }
                }
            ],
            "storage_provider": { 
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                "name": "duke_oit_swift", 
                "description": 
                "Duke OIT Storage" 
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Get pre-signed chunk URL  [PUT /uploads/{id}/chunks]
Generates and returns a pre-signed URL that can be used by client to upload a file chunk to the storage provider. This step is repeated for each chunk.  If the chunk uploads fails, the client must call this action again to get a new pre-signed URL for the chunk number, then retry the chunk upload.

>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **number (number, required)** - The chunk number.
+ **size (number, required)** - The size of the chunk in bytes (computed by client).
+ **hash.value (string, required)** - The chunk hash (computed by client).
+ **hash.algorithm (string, required)** - The hash algorithm used (i.e. md5, sha256, sha1, etc.); this must be the default algorithm (i.e. `chunk_hash_algorithm`) supported by storage provider (see **Storage Providers** actions)

>**Response Properties**
- - - - -
+ **http_verb (string)** - The http verb to use for uploading the next chunk.
+ **host (string)** - The storage provider host.
+ **url (string)** - The pre-signed URL for uploading the chunk to the storage provider.
+ **http_headers (object[ ])** - Array of headers (i.e. key/value pairs) that must be included in the client upload request.

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Request (application/json)

        {
            "number": 1,
            "size": 5024000,
            "hash": { 
                "value": "ey23df2207d99a74fbe169e3eba035e633b65d76", 
                "algorithm": "md5" 
            }
        }

+ Response 200 (application/json)

        {
            "http_verb": "PUT",
            "host": "duke_data_service_prod.s3.amazonaws.com",
            "url": "/666be35a-98e0-4c2e-9a17-7bc009f9bb23?partNumber=1&uploadId=EXAMPLEJZ6e0YupT2...&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN...",
            "http_headers": [
                { "Content-Length": "5024000" }
            ]
        }

## Complete chunked file upload [PUT /uploads/{id}/complete]
This operation is called by the client after all file chunks have been successfully uploaded to the storage provider.

>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ If the storage provider requires the individual chunks to be assembled, such as Amazon S3, this operation will call the storage provider actions to assemble the parts into a single file object.
+ The client hash for each chunk must equal the storage provider hash for the same chunk, or an upload error is reported.
+ The client reported file size (bytes) must equal the storage provider reported file size, or an upload error is reported.
+ If there are no errors, the `upload_status.completed_on` is set to the current timestamp.

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { 
                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                "algorithm": "md5", 
                "client_reported": true, 
                "confirmed": false 
            },
            "chunks": [
                {
                    "number": 1,
                    "size": 5024000,
                    "hash": { 
                        "value": "jw23df2207d99a74fbe169e3eba035e633b65d88", 
                        "algorithm": "md5" 
                    }
                },
                {
                    "number": 2,
                    "size": 5024000,
                    "hash": { 
                        "value": "ry23df2207d99a74fbe169e3eba035e633b65dkq", 
                        "algorithm": "md5" 
                    }
                }
            ],
            "storage_provider": { 
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                "name": "duke_oit_swift", 
                "description": "Duke OIT Storage" 
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": "2015-07-10T13:00:00Z",
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Group Files
A file resource represents a virtual container for a pyhsical data file (i.e. `upload`) that is located in a storage backend supported by Duke Data Services (i.e. Duke OIT Swift).

## Files collection [/files]

### Create file [POST]
Creates a file metadata resource; the client is responsible for the creation of this resource after confirming the associated physical file has been successfully uploaded to a storage provider (see `Uploads` actions).

>**Permission:** create_file
- - - - -

>**Properties**
- - - - -
+ **parent.kind (string, required)** - The kind of parent container for the file; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ **parent.id (string, required)** - The unique id of the parent.
+ **upload.id (string, required)** - The unique id for an upload that completed successfully.
+ **label (string, optional)** - An optional short display label for the file.

>**Rules**
- - - - -
+ The current user must be the user who uploaded the file.
+ The parent object (`dds-project` or `dds-folder`) must be associated with the same project that the upload is associated with.
+ The upload must be in a completed state (i.e. `upload.completed_on != null`).

+ Request (application/json)

        {
            "parent": { 
                "kind": "dds-folder", 
                "id": "ad9115b8-1e4a-4399-b606-56622eb462e1" 
            },
            "upload": {"id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23"},
            "label": "Initial raw data from device"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { 
                "kind": "dds-folder", 
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" 
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", 
                    "name": "Sequencing Core" 
                }
            ],
            "label": "Initial raw data from device",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { 
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "md5" 
                },
                "storage_provider": { 
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                    "name": "duke_oit_swift", 
                    "description": "Duke OIT Storage" 
                }
            },
            "audit": { }
        }

## File instance [/files/{id}]
+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

### View file [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { 
                "kind": "dds-folder", 
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" 
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", 
                    "name": "Sequencing Core" 
                }
            ],
            "label": "Initial raw data from device",
            "is_deleted": false,
            "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hash": { 
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                        "algorithm": "md5" 
                    },
                    "storage_provider": { 
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                        "name": "duke_oit_swift", 
                        "description": "Duke OIT Storage" 
                    }
                },
            "audit": { }
        }

## NOT_IMPLEMENTED Update file [PUT]
Updates one or more file resource properties; if this action modifies the `upload` property, the previous file resource is transitioned to version history (see **File Versions**).

*Note: Only the `upload` and `label` properties for the file are versioned; all other file properties and relationships, such as name, tags, etc. are not versioned, and they will not vary from version to version.*

>**Permission:** update_file
- - - - -

>**Properties**
- - - - -
+ **upload.id (string, optional)** - An optional unique id for an upload that completed successfully.
+ **label (string, optional)** - An optional short display label for the file.

>**Rules**
- - - - -
+ The current user must be the user who uploaded the file.
+ The upload must be in a completed state (i.e. `upload.completed_on != null`).
+ Only `upload.id`, `label` properties can be updated via this action.
+ Prior versions are assigned the next sequential `version` number. (see **File Versions**)

+ Request (application/json)

        {
            "upload": {"id": "422f8778-a62c-4918-8b1b-f398a041345a"},
            "label": "Post pairwise sequence alignment"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { 
                "kind": "dds-folder", 
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" 
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", 
                    "name": "Sequencing Archive" 
                }
            ],
            "label": "Post pairwise sequence alignment",
            "is_deleted": false,
            "upload": {
                "id": "422f8778-a62c-4918-8b1b-f398a041345a",
                "size": 30024038,
                "hash": { 
                    "value": "jkl5df2207d99a74fbe169e3eba035e633b67drt", 
                    "algorithm": "md5" 
                },
                "storage_provider": { 
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                    "name": "duke_oit_swift", "description": 
                    "Duke OIT Storage" 
                }
            },
            "audit": { }
        }

### Delete file [DELETE]
>**Permission:** delete_file
- - - - -

+ Response 204

## Get file download URL [GET /files/{id}/url]
Generates and returns a storage provider specific pre-signed URL that client can use to download file.

>**Permission:** download_file
- - - - -

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.
   
+ Response 200 (application/json)

        {
            "http_verb": "GET",
            "host": "swift.oit.duke.edu",
            "url": "/v1/AUTH_dev/418da9e8-7d01-4761-982c-811d95ac6653/0618a1bc-5042-48d2-af66-ed171354bf6b?temp_url_sig=93b5c5a2c920f0d4962c391d932e4054ec76916c&temp_url_expires=1448918738",
            "http_headers": []
        }

## Move file [PUT /files/{id}/move]
>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ Files can only be moved within the context of the files current project.

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

+ Request (application/json)

        {
            "parent": { 
                "kind": "dds-folder", 
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" 
            }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { 
                "kind": "dds-folder", 
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" 
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", 
                    "name": "Sequencing Archive" 
                }
            ],
            "label": "Post pairwise sequence alignment",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { 
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "md5" 
                },
                "storage_provider": { 
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                    "name": "duke_oit_swift", 
                    "description": "Duke OIT Storage" 
                }
            },
            "audit": { }
        }

## Rename file [PUT /files/{id}/rename]
>**Permission:** create_file
- - - - -

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.


+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { 
                "kind": "dds-folder", 
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" 
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "ancestors": [
                { 
                    "kind": "dds-project", 
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                    "name": "Knockout Mouse Project (KOMP)" 
                },
                { 
                    "kind": "dds-folder", 
                    "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", 
                    "name": "Sequencing Archive" 
                }
            ],
            "label": "Post pairwise sequence alignment",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { 
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "md5" 
                },
                "storage_provider": { 
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                    "name": "duke_oit_swift", 
                    "description": "Duke OIT Storage" 
                }
            },
            "audit": { }
        }

## Group File Versions
The actions herein are used to interact with prior versions of a file resource.

*Note: Only the `upload` and `label` properties for the file are versioned; all other file properties and relationships, such as name, tags, etc. are not versioned, and they will not vary from version to version.*

## File Versions collection [/files/{id}/versions]
+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

## NOT_IMPLEMENTED List file versions [GET]
If there are previous versions of a file, this action can be used to retrieve information about the older versions.

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ File versions that have been deleted (i.e. `"is_deleted": true`) are included in this listing, but are immutable.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-file-version",
                    "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                    "file": {
                        "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                        "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata"
                    },
                    "version": 1,
                    "label": "Initial raw data from device",
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { 
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                            "algorithm": "md5" 
                        },
                        "storage_provider": { 
                            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                            "name": "duke_oit_swift", 
                            "description": "Duke OIT Storage" 
                        }
                    },
                    "audit": { }
                }
            ]
        }

## File Version instance [/file_versions/{id}]
+ Parameters
    + id (string, required, `89ef1e77-1a0b-40a8-aaca-260d13987f2b`) ... The unique `id` of the file version.

## NOT_IMPLEMENTED View file version [GET]
**Permissions** view_project
- - - - -

+ Response 200 (application/json)

        {
            "kind": "dds-file-version",
            "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
            "file": {
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata"
            },
            "version": 1,
            "label": "Initial raw data from device",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { 
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "md5" 
                },
                "storage_provider": { 
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                    "name": "duke_oit_swift", 
                    "description": "Duke OIT Storage" 
                }
            },
            "audit": { }
        }

## NOT_IMPLEMENTED Update file version [POST] 
**Permission:** update_file
- - - - -

>**Rules**
- - - - -
+ Only the `label` property for a file version can be updated via this action.

+ Request (application/json)

        {
            "label": "Post pairwise sequence alignment (piecewise)"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file-version",
            "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
            "file": {
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata"
            },
            "version": 1,
            "label": "Post pairwise sequence alignment (piecewise)",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { 
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                    "algorithm": "md5" 
                },
                "storage_provider": { 
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                    "name": "duke_oit_swift", 
                    "description": "Duke OIT Storage" 
                }
            },
            "audit": { }
        }

### NOT_IMPLEMENTED Delete file version [DELETE]
>**Permission:** delete_file
- - - - -

+ Response 204

## NOT_IMPLEMENTED Get file version download URL [GET /file_versions/{id}/url]
Generates and returns a storage provider specific pre-signed URL that client can use to download the file version.

>**Permission:** download_file
- - - - -

+ Parameters
    + id (string, required, `89ef1e77-1a0b-40a8-aaca-260d13987f2b`) ... The unique `id` of the file version.
   
+ Response 200 (application/json)

        {
            "http_verb": "GET",
            "host": "swift.oit.duke.edu",
            "url": "/v1/AUTH_dev/418da9e8-7d01-4761-982c-811d95ac6653/0618a1bc-5042-48d2-af66-ed171354bf6b?temp_url_sig=93b5c5a2c920f0d4962c391d932e4054ec76916c&temp_url_expires=1448918738",
            "http_headers": []
        }
            
## Group Search Children
Search for the children (i.e. folders and files) of a project or folder.

## Search project children [GET /projects/{id}/children{?name_contains,kind}]

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the project unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the project hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": { 
                        "kind": "dds-folder", 
                        "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" 
                    },
                    "name": "Raw Data",
                    "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
                    "ancestors": [
                        { 
                            "kind": "dds-project", 
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                            "name": "Knockout Mouse Project (KOMP)" 
                        },
                        { 
                            "kind": "dds-folder", 
                            "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", 
                            "name": "Sequencing Core" 
                        }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { 
                        "kind": "dds-folder", 
                        "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" 
                    },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
                    "ancestors": [
                        { 
                            "kind": "dds-project", 
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                            "name": "Knockout Mouse Project (KOMP)" 
                        },
                        { 
                            "kind": "dds-folder", 
                            "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", 
                            "name": "Sequencing Archive" 
                        }
                    ],
                    "label": "Initial raw data from device",
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { 
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                            "algorithm": "md5" 
                        },
                        "storage_provider": { 
                            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                            "name": "duke_oit_swift", 
                            "description": "Duke OIT Storage" 
                        }
                    },
                    "audit": { }
                }
            ]
        }

## Search folder children [GET /folders/{id}/children{?name_contains,kind}]

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the folder unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the folder hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the folder.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                 {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": {
                        "kind": "dds-folder", 
                        "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" 
                    },
                    "name": "Raw Data",
                    "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
                    "ancestors": [
                        { 
                            "kind": "dds-project", 
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                            "name": "Knockout Mouse Project (KOMP)" 
                        },
                        { 
                            "kind": "dds-folder", 
                            "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", 
                            "name": "Sequencing Core" 
                        }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { 
                        "kind": "dds-folder", 
                        "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" 
                    },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
                    "ancestors": [
                        { 
                            "kind": "dds-project", 
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", 
                            "name": "Knockout Mouse Project (KOMP)" 
                        },
                        { 
                            "kind": "dds-folder", 
                            "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", 
                            "name": "Sequencing Archive" 
                        }
                    ],
                    "label": "Initial raw data from device",
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { 
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", 
                            "algorithm": "md5" 
                        },
                        "storage_provider": { 
                            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", 
                            "name": "duke_oit_swift", 
                            "description": "Duke OIT Storage" 
                        }
                    },
                    "audit": { }
                }
            ]
        }
        
## Group Provenance Activities
Represents the main record of provenance in DDS; it is analogous to *Activity* defined in the [W3C Specification on Provenance](https://www.w3.org/TR/prov-primer/).  Activities are recorded/tracked by researchers and their *Software Agents* with the intent of maintaining comprehensive data provenance.

*Note: Provenance relations to an activity, such as `Used` and `WasGeneratedBy` are managed through the `Provenance Relations` API actions.*

## Activities collection [/activities]

### NOT_IMPLEMENTED Create activity [POST]
>**Permission:** authenticated
- - - - -

>**Properties**
- - - - -
+ **name (string, required)** - A short name for this activity.
+ **description (string, optional)** - A verbose description for this activity.
+ **started_on (string, optional)** - The time this activity was started; defaults to the current datetime if not specified.
+ **ended_on (string, optional)** - The time this activity ended.

>**Rules**
- - - - -
+ The `ended_on` time must be greater than or equal to the `started_on` time. 

+ Request (application/json)

        { 
            "name": "RF PI3-Kinase",
            "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": null,
            "is_deleted": false,
            "audit": { }
        }

### NOT_IMPLEMENTED List activities [GET]
>**Permission:** 
- - - - -
+ creator *or* visiblity to single entity that has a `Used` or `WasGeneratedBy` relation to the activity

>**Rules**
- - - - -
+ Activities that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-activity",
                    "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                    "name": "RF PI3-Kinase",
                    "description": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
                    "started_on": "2015-01-01T12:00:00Z",
                    "ended_on": null,
                    "is_deleted": false,
                    "audit": { }
                }
            ]
        }

## Activities instance [/activities/{id}]
+ Parameters
    + id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the activity.

### NOT_IMPLEMENTED View activity [GET]
>**Permission:** 
- - - - -
+ creator *or* visiblity to single entity that has a `Used` or `WasGeneratedBy` relation to the activity

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": null,
            "is_deleted": false,
            "audit": { }
        }

### NOT_IMPLEMENTED Update activity [PUT]
>**Permission:** creator
- - - - -

>**Rules**
- - - - -
+ Only `name`, `description`, `started_on`, and `ended_on` properties may be updated via this action.

+ Request (application/json)

        {
            "ended_on": "2015-01-01T114:30:00"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-activity",
            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
            "name": "RF PI3-Kinase",
            "decription": "Building a Random Forest as a heuristic for PI3-Kinase pathway activity",
            "started_on": "2015-01-01T12:00:00Z",
            "ended_on": "2015-01-01T114:30:00Z",
            "is_deleted": false,
            "audit": { }
        }

### NOT_IMPLEMENTED Delete activity [DELETE]
>**Permission:** creator
- - - - -

+ Response 204

## Group Provenance Relations
Represents provenance relations as defined in the [W3C Specification on Provenance](https://www.w3.org/TR/prov-primer/).  Relations are recorded/tracked by researchers and their *Software Agents* with the intent of maintaining comprehensive data provenance.

*Note: Provenance relations currently supported are `Used` and `WasGeneratedBy`.*

## Relations collection [/relations]

### Create used relation [POST /relations/used]
>**Permission:** creator of the activity *and* visibility to the `Used` entity
- - - - -

>**Properties**
- - - - -
+ **activity.id (string, required)** - The activity that used the entity.
+ **entity.kind (string, optional)** - The kind of entity that was used; this is one of `dds-file` or `dds-file-version`.
+ **entity.id (string, optional)** - The unique id of the used entity.

+ Request (application/json)

        {
            "activity": {"id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1"},
            "entity": {
                "kind": "dds-file",
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111"
            }
        }

+ Response 201 (application/json)

        {
            "kind": "dds-relation-used", 
            "id": "ac242faf-fba0-4293-a949-0b82ae7ba810",
            "activity": {
                "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                "name": "RF PI3-Kinase",
                "audit": { }
            },
            "entity": {
                "kind": "dds-file",
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "audit": { }
            },
            "is_deleted": false,
            "audit": { }
        }

### NOT_IMPLEMENTED Create generated relation [POST /relations/generated]
>**Permission:** creator of the activity *and* visibility to the `WasGeneratedBy` entity
- - - - -

>**Properties**
- - - - -
+ **activity.id (string, required)** - The activity that generated the entity.
+ **entity.kind (string, optional)** - The kind of entity that was generated; this is one of `dds-file` or `dds-file-version`.
+ **entity.id (string, optional)** - The unique id of the generated entity.

+ Request (application/json)

        {
            "activity": {"id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1"},
            "entity": {
                "kind": "dds-file-version",
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b"
            }
        }

+ Response 201 (application/json)

        {
            "kind": "dds-relation-generated", 
            "id": "372f25e1-01b0-4b8d-9524-e26dd573cc95",
            "activity": {
                "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                "name": "RF PI3-Kinase",
                "audit": { }
            },
            "entity": {
                "kind": "dds-file-version",
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                "file": {
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "name": "RF PI3-Kinase"
                },
                "version": 1,
                "label": "Post pairwise sequence alignment (piecewise)",
                "audit": { }
            },
            "is_deleted": false,
            "audit": { }
        }

# NOT_IMPLEMENTED List provenance relations [GET /relations/{object_kind}/{object_id}]
List the `Used` and `WasGeneratedBy` relations for a provenance node; this only lists direct relations for the node that are a single hop away.

>**Permission:** visibility to the specified (starting) provenance node (i.e. `object_kind`, `object_id`) - which may be an activity *or* an entity (file or file version)
- - - - -

>**Rules**
- - - - -
+ Provenance relations that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Parameters
    + object_kind (string, required, `dds-activity`) ... The kind of provenance node; can be one of `dds-activity`, `dds-file` or `dds-file-version`.
    + object_id (string, required, `a1ff02a4-b7e9-999d-87x1-66f4c881jka1`) ... The unique id of the node.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-relation-used", 
                    "id": "ac242faf-fba0-4293-a949-0b82ae7ba810",
                    "activity": {
                        "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                        "name": "RF PI3-Kinase",
                        "audit": { }
                    },
                    "entity": {
                        "kind": "dds-file",
                        "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                        "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                        "audit": { }
                    },
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-relation-generated", 
                    "id": "372f25e1-01b0-4b8d-9524-e26dd573cc95",
                    "activity": {
                        "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                        "name": "RF PI3-Kinase",
                        "audit": { }
                    },
                    "entity": {
                        "kind": "dds-file-version",
                        "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                        "file": {
                            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                            "name": "RF PI3-Kinase"
                        },
                        "version": 1,
                        "label": "Post pairwise sequence alignment (piecewise)",
                        "audit": { }
                    },
                    "is_deleted": false,
                    "audit": { }
                }
            ]
        }

## Relation instance [/relations/{id}]
+ Parameters
    + id (string, required, `372f25e1-01b0-4b8d-9524-e26dd573cc95`) ... The unique id of the provenance relation.

## NOT_IMPLEMENTED View relation [GET]
>**Permission:** visibility to a single node for the specified relation - which may be the activity *or* the entity (i.e. file or file version)

+ Response 200 (application/json)

         {
            "kind": "dds-relation-generated", 
            "id": "372f25e1-01b0-4b8d-9524-e26dd573cc95",
            "activity": {
                "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                "name": "RF PI3-Kinase",
                "audit": { }
            },
            "entity": {
                "kind": "dds-file-version",
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                "file": {
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "name": "RF PI3-Kinase"
                },
                "version": 1,
                "label": "Post pairwise sequence alignment (piecewise)",
                "audit": { }
            },
            "is_deleted": false,
            "audit": { }
        }

## NOT_IMPLEMENTED Delete relation [DELETE]
>**Permission:** creator

+ Response 204

## Group Search Provenance
The `Provenance Relations` API actions allows users and software agents to record the use and production of entities (i.e. files, file versions, etc.) by research activities, which may be influenced in various ways by agents.  The resulting provenace chain is organized as a [graph structure](https://en.wikipedia.org/wiki/Graph_database).  The search API can be used by client applications to extract the provenace graph in a JSON data format that can be transformed to a visual representation. 

*Note: The API design assumes the provenance graph structure is stored in a* [Neo4J](http://neo4j.com) *database and that ubiquitous JavaScript libraries will be used for* [graph rendering](http://neo4j.com/developer/guide-data-visualization).

### NOT_IMPLEMENTED Search Provenance [POST /search/provenance]
Given a starting node *(activity, file, o file version)*, returns a graph structure for the provenance chain.  This structure is based on the Neo4J JSON graph format.

>**Permission:** visibility to the specified (starting) provenance node (i.e. `start_node.kind`, `start_node.id`) - which may be an activity *or* an entity (file or file version)
- - - - -

>**Rule:**
- - - - -
+ If the user does not have visibilty to a `node` in the resulting graph, the `properties` attribute for that `node` will not be populated. (i.e. `"properties": null`)

>**Search Properties**
- - - - -
+ **start_node.kind (string, required)** - The kind of provenance node; can be one of `dds-activity`, `dds-file` or `dds-file-version`.
+ **start_node.id (string, required)** - The unique id of the node.
+ **max_hops (number, optional)** -  The max number of hops (degree of node separation) to traverse from the starting node; defaults to infinity.

+ Request (application/json)

        {
            "start_node": {
                "kind": "dds-activity",
                "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1"
            }
        }

+ Response 200 (application/json)

        { 
            "graph": {
                "nodes": [
                    {
                        "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1", 
                        "labels": ["Actvity"], 
                        "properties": {
                            "kind": "dds-activity",
                            "id": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1",
                            "name": "RF PI3-Kinase",
                            "audit": { }
                        }
                    },
                    {
                        "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111", 
                        "labels": ["File"], 
                        "properties": {
                            "kind": "dds-file",
                            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                            "audit": { }
                        }
                    },
                    {
                        "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b", 
                        "labels": ["File Version"], 
                        "properties": {
                            "kind": "dds-file-version",
                            "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                            "file": {
                                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                                "name": "RF PI3-Kinase"
                            },
                            "version": 1,
                            "label": "Post pairwise sequence alignment (piecewise)",
                            "audit": { }
                        }
                    }
                ],
                "relationships": [
                    {
                        "id": "ac242faf-fba0-4293-a949-0b82ae7ba810", 
                        "type": "Used", 
                        "start_node": "777be35a-98e0-4c2e-9a17-7bc009f9b111", 
                        "end_node": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1", 
                        "properties": {
                            "kind": "dds-relation-used", 
                            "id": "ac242faf-fba0-4293-a949-0b82ae7ba810",
                            "audit": { }
                        },
                        "id": "ac242faf-fba0-4293-a949-0b82ae7ba810", 
                        "type": "WasGeneratedBy", 
                        "start_node": "a1ff02a4-b7e9-999d-87x1-66f4c881jka1", 
                        "end_node": "89ef1e77-1a0b-40a8-aaca-260d13987f2b", 
                        "properties": {
                            "kind": "dds-relation-generated", 
                            "id": "372f25e1-01b0-4b8d-9524-e26dd573cc95",
                            "audit": { }
                        }
                    }
                ]
        }