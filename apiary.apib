FORMAT: 1A
HOST: http://data-services.duke.edu/

# Duke Data Services

The Duke Data Service API allows Duke researchers to store, organize, retrieve and share data.

The intent here is to create a strawman for the data service API. Key focuses are on API endpoints
that enhance usability for "shallow end of the pool" users, endpoints that support the needs of
investigators for managing their research groups, endpoints that accommodate shared resource and
core facility needs, endpoints that support SOM administration of data resources, and endpoints that
facilitate reproducible scientific workflows. There are tensions to resolve to meet these needs, and we
should consider whether the API might be broken up into multiple APIs, whether some business logic be
pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design)
requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a
Request-id in each response header, among others.

## Group API Usage

Client API Key
--------------
Authorized users may generate a secret API key via the Web interface \- liken to Google API key
provisioning model.  This will not be part of the initial product release (i.e. MVP).

User Authentication
--------------
Users will be required to authenticate via a trusted authentication provider.
(i.e. Duke Shibboleth for MVP)

**Some design assumptions for the MVP:**
* A token (i.e. JWT) will be generated via a successful HTTPS callback from Duke Shibboleth single
sign-on service.  This token must be supplied in header for subsequent API calls.
* Tokens will have an expiration policy of X hours/days.
* When a user authenticates successfully for the fist time via Duke Shibboleth, their user profile
will be created in the platforms local user data store.

Collection Pagination
--------------
For endpoints that return a collection of resources/objects, the number of objects returned can be
controlled by including the `limit` query parameter.  For example: `/projects?limit=25`; Collection
payloads may have the following structure to facilitate client pagination:

    {
        "count": 100,
        "limit": 25,
        "next": "https://data-services.duke.edu/projects?page=3",
        "previous": "https://data-services.duke.edu/projects?page=1",
        "results": [
            <resource_object>,
            <resource_object>,
            ...
        ]
    }

**Example payloads herein for resource specific collections will only include** `"results": [ ]` **structure.**

Audit Object
--------------
Resource payloads may include a composite audit object. An example structure of that object is
represented here and will be referenced as `<audit_object>` in resource specific payloads.

    {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": {
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner"
        },
        "updated_on": "2015-01-01T13:00:00Z",
        "updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner"
        },
        "deleted_on": null,
        "deleted_by": null
    }

API Errors
----------------
We should respond with context appropriate error codes, especially for 400 class errors, using
the [Standard List](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)

400: no API token, validation errors
401: bad API token
403: user performing request which they do not have permission to perform
404: user requesting resource that does not exist

All error responses should include a JSON response that provides the HTTP status code, details
of the error that occurred, and possible steps to address the problem. For example:

    {
        "error": "404",
        "reason": "Project does not exist",
        "suggestion": "You may have chosen the wrong ID."
    }

Validation errors require a field-level breakdown with an array of errors (even if multiple errors
occur for the same field), each describing the field with the error, and message describing the
error encountered.

    {
        "error": "400",
        "reason": "validation failed",
        "suggestion": "Fix the following invalid fields and resubmit"
        "errors" : [
            {
                "field" : "name",
                "message" : "Project needs a name."
            },
            {
                "field" : "principal_investigator",
                "message" : "Principal Investigator must be specified for each project."
            }
        ]
    }

## Group Authorization Roles
An authorization role represents a set of discrete permissions that may be granted to a user.

**Authorization Roles:**

| Role | Name | Description | Permission(s) |
|:-----|:-----|:------------|:--------------|
| **system\_admin** | System Admin | Can manage system level permissions and perform all operations across all projects | system\_admin |
| **project\_admin** | Project Admin | Can update project details, delete project, manage project level permissions and perform all file operations | view\_project, update\_project, delete\_project, manage\_project\_permissions, download\_file, create\_file, update\_file, delete\_file |
| **project\_viewer** | Project Viewer | Can only view project and file meta-data | view\_project |
| **file\_downloader** | File Downloader | Can download files | view\_project, download\_file |
| **file\_uploader** | File Uploader | Can upload files | view\_project, create\_file |
| **file\_editor** | File Editor | Can view, download, create, update and delete files | view\_project, download\_file, create\_file, update\_file, delete\_file |


**Permissions:**

| Permission | Description |
|:------------|:------------|
| **system\_admin** | Can manage system level permissions and perform all operations across all projects |
| **view\_project** | Can view project and file meta-data |
| **update\_project** | Can update project header details and project affiliations |
| **delete\_project** | Can delete project |
| **manage\_project_permissions** | Can grant/revoke project level permissions |
| **download\_file** | Can download file |
| **create\_file** | Can upload new file |
| **update\_file** | Can upload new version of existing file |
| **delete\_file** | Can delete a file |

## Authorization Roles collection [/{context}/auth_roles]
+ Parameters
    + context (required, string, `system`) ... The `context` or scope in which permission can be granted;
    valid values are "system" or "project".

### List authorization roles for a context [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        "results": [
            {
                "id": "system_admin",
                "name": "System Admin",
                "description": "Can manage system level permissions and perform all operations across all projects",
                "permissions": [ { "id": "system_admin" } ],
                // Contexts in which role is relevant (i.e. "system" or "project").
                "contexts": [ "system" ],
                // If deprecated, role cannot be granted, but show in UI for existing users that have role.
                "is_deprecated": false
            },
            ...
        ]

## Authorization Role instance [/{context}/auth_roles/{id}]
+ Parameters
    + context (required, string, `project`) ... The `context` or scope in which permission can be granted;
    valid values are "system" or "project".
    + id (required, string, `file_editor`) ... The unique `id` for an authorization role.

### View authorization role details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        {
            "id": "file_editor",
            "name": "File Editor",
            "description": "Can view, download, create, update and delete files",
            "permissions": [ { "id": "view_project" }, { "id": "download_file" }, ... ],
            "contexts": [ "project" ],
            "is_deprecated": false
        }

## Group Current User
The current user represents the currently authenticated user.

## Current User instance [/current_user]

+ Model (application/json)

    + Body

            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu",
                    // The trusted authentication source for user (Duke Shibb for MVP).
                    "source": "duke_shibboleth",
                    // Unique user id in context of this authentication source.
                    "uid": "gardner100"
                },
                // The system level roles that have been granted to the user.
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ],
                "last_login_on": "2015-01-01T12:00:00Z",
                "audit": <audit_object>
            }

### View current user details [GET]
>**Permission:** authenticated

+ Response 200

      [Current User instance][]

## Group Users
A user represents a registered user.

## Users collection [/users{?name_contains}]
### List registered users [GET]
>**Permission**
- - - - -
authenticated

+ Parameters
    + name_contains (optional, string, `gardner`) ... Returns users for which their `full_name` contains the specified string.

+ Response 200 (application/json)

        "results": [
            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu",
                // Optional part of payload that is returned if the current user has system_admin permission.
                "auth_provider": {
                    "source": "duke_shibboleth",
                    "uid": "gardner100",
                },
                // The system level roles that have been granted to the user.
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ],
                "last_login_on": "2015-01-01T12:00:00Z",
                "audit": <audit_object>
                // End optional part of payload.
            },
            ...
        ]

## User instance [/users/{id}]
+ Parameters
    + id (required, string, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `id` for a user.

+ Model (application/json)

    + Body

            {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "username": "mrgardner01",
                "first_name": "Matthew",
                "last_name": "Gardner",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu",
                // Optional part of payload that is returned if the current user has system_admin permission 
                "auth_provider": {
                    "source": "duke_shibboleth",
                    "uid": "gardner100"
                },
                // The system level roles that have been granted to the user.
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ],
                "last_login_on": "2015-01-01T12:00:00Z",
                "audit": <audit_object>
                // End optional part of payload.
            }

### View registered user details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200

    [User instance][]

## Group System Permissions
A system permission represents system level authorization roles that have been granted to a user.

## System Permissions collection [/system/permissions]
### List system level permissions [GET]
>**Permission**
- - - - -
system_admin

+ Response 200 (application/json)

        "results": [
            {
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ]
            },
            ...
        ]

## System Permission instance [/system/permissions/{user_id}]
+ Parameters
    + user_id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_roles": [ { "id": "system_admin", "name": "System Admin" }, ... ]
            },

### Grant system level permissions to user [PUT]
>**Permission**
- - - - -
system\_admin

>**Rules**
- - - - -
* Revokes (deletes) any existing system level authorization roles for the user and grants new set.
* The platform must have at leat one user with the system\_admin" authorization role.  Cannot
revoke system level permissions for user if they are the only "system\_admin" designated for the platform.
* The roles specified must be system level authorization roles (i.e. "system" in `auth_role.contexts`).

+ Request (application/json)

        {
            // Must specify at least one auth role - set cannot be empty.
            "auth_roles": [ { "id": "system_admin" }, ... ]
        }

+ Response 200

    [System Permission instance][]

### View system level permissions for user [GET]
>**Permission**
- - - - -
system\_admin OR system permissions are for the current user

+ Response 200

    [System Permission instance][]

### Revoke system level permissions for user [DELETE]
>**Permission**
- - - - -
system\_admin

>**Rules**
- - - - -
* The platform must have at leat one user with the system\_admin" authorization role.  Cannot
revoke system level permissions for user if they are the only "system\_admin" designated for the platform.

+ Response 204

## Group Projects
A project is a container for storing, organizing, retrieving and sharing research data files.

## Projects collection [/projects]

### Create a project [POST]
>**Permission**
- - - - -
authenticated

>**Rules**
- - - - -
* User who creates project is granted "project\_admin" authorization role by default.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 201 (application/json)

        {
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            // Has the project been logically deleted from meta-data?
            "is_deleted": false,
            "audit": <audit_object>
        }

### List projects [GET]
>**Permission**
- - - - -
authenticated

>**Rules**
- - - - -
* Lists projects for which the current user has the "view\_project" permission.
* Projects that have been deleted (i.e. `"is_deleted": true`) are not included in this listing.

+ Response 200 (application/json)

        "results": [
            {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "audit": <audit_object>
            },
            ...
        ]

## Project instance [/projects/{id}]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

+ Model (application/json)

    + Body

            {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "audit": <audit_object>
            }

### View project details [GET]
**Permission**
- - - - -
view_project

+ Response 200

    [Project instance][]

### Update a project [PUT]
**Permission:**
- - - - -
update_project

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 200

    [Project instance][]

### Delete a project [DELETE]
**Permission**
- - - - -
delete_project

**Rules**
- - - - -
* Logically deletes project from the meta-data (i.e. sets `"is_deleted": true`).
* For the MVP, the files associated to the project are not deleted from their physical storage location.

+ Response 204

## Group Project Permissions
A project permission represents project level authorization roles that have been granted to a user.

## Project Permissions collection [/project/{id}/permissions]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### List project level permissions [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        "results": [
            {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_roles": [ { "id": "project_admin", "name": "Project Admin" }, ... ]
            },
            ...
        ]

## Project Permission instance [/project/{project_id}/permissions/{user_id}]
+ Parameters
    + project_id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `project_id` of the project.
    + user_id (required, string, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... Globally unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_roles": [ { "id": "file_editor", "name": "File Editor" }, ... ]
            }

### Grant project level permissions to user [PUT]
>**Permission**
- - - - -
manage_project_permissions

>**Rules**
- - - - -
* Revokes (deletes) any existing project level authorization roles for the user and grants new set.
* Every project must have at leat one user with the "project\_admin" authorization role.  Cannot
revoke project level permissions for user if they are the only "project\_admin" designated for the project.
* The roles specified must be project level authorization roles (i.e. "project" in `auth_role.contexts`).

+ Request (application/json)

        {
            // Must specify at least one auth role - set cannot be empty.
            "auth_roles": [ { "id": "file_editor" }, ... ]
        }

+ Response 200

    [Project Permission instance][]

### View project level permissions for user [GET]
>**Permission**
- - - - -
view_project

+ Response 200

    [Project Permission instance][]

### Revoke project level permissions for user [DELETE]
>**Permission**
- - - - -
manage_project_permissions

>**Rules**
- - - - -
* Every project must have at leat one user with the "project\_admin" authorization role.  Cannot
revoke project level permissions for user if they are the only "project\_admin" designated for the project.

+ Response 204

## Group Project Roles
A project role represents the part or responsibility that an individual (i.e. user) may assume in the
context of a project.  These roles have no relationship to authorization roles.

**Project Roles:**

| Role | Name | Description |
|:-----|:-----|:------------|
| **principal\_investigator** | Principal Investigator | Lead investigator for the research project |
| **research\_coordinator** | Research Coordinator | Coordinator for the research project |

## Project Roles collection [/project_roles]

### List project roles [GET]
**Permissions required**
- - - - -
authenticated

+ Response 200 (application/json)

        "results": [
            {
                "id": "principal_investigator",
                "name": "Principal Investigator",
                "description": "Lead investigator for the research project",
                "is_deprecated": false
            },
            {
                "id": "research_coordinator",
                "name": "Research Coordinator",
                "description": "Coordinator for the research project",
                "is_deprecated": false
            },
            ...
        ]

## Project Role instance [/project_roles/{id}]
+ Parameters
    + id (required, string, `principal_investigator`) ... The unique `id` for a project role.

### View project role details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        {
            "id": "principal_investigator",
            "name": "Principal Investigator",
            "description": "Lead investigator for the research project",
            "is_deprecated": false
        }

### Group Project Affiliates
An affiliate represents an individual that plays some project level role of interest for reporting or
project collaboration puposes.  The affilate may be internal or external (i.e. non-Duke employee).

## Project Affiliates collection [/project/{id}/affiliates]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### List project affiliations [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        "results": [
            {
                // Internal affiliate (Duke employee)...
                "id": "ba33f7df-33ca-46dd-a015-92c46fdb6ba3",
                "is_external": false,
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu"
                },
                "external_person": null,
                "project_roles": [ { "id": "principal_investigator", "name": "Principal Investigator" }, ... ]
            },
            {
                // External affiliate (non-Duke employee)...
                "id": "dd33f7df-33ca-46dd-a015-92c46fdbda44",
                "is_external": true,
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": null,
                "external_person": {
                    "full_name": "Geddy Lee",
                    "email": "geddy.lee@pennstate.edu"
                },
                "project_roles": [ { "id": "research_coordinator", "name": "Research Coordinator" }, ... ]
            },
            ...
        ]

### Create project affiliate [POST]
>**Permission**
- - - - -
update_project

>**Rules**
- - - - -
* To create an "external" (i.e. non-Duke employee) affiliate pass `null` for "user" property and provide "external_person"
properties.  See example of "external_person" in PUT (i.e. update) endpoint.
* To create an "internal" (i.e. Duke employee) affiliate pass `null` for "external_person"
property and provide user property as shown in example payload for this endpoint.

update_project

+ Request (application/json)

        {
            "user": { "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb" },
            "external_person": null,
            "project_roles": [ { "id": "principal_investigator" }, ... ]
        }

+ Response 201 (application/json)

        {
            "id": "ba33f7df-33ca-46dd-a015-92c46fdb6ba3",
            "is_external": false,
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "user": {
                "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                "full_name": "Matthew Gardner",
                "email": "mrgardner01@duke.edu"
            },
            "external_person": null,
            "project_roles": [ { "id": "principal_investigator", "name": "Principal Investigator" }, ... ]
        }

## Project Affiliate instance [/project_affiliates/{id}]
+ Parameters
    + id (required, string, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... Globally unique `id` of the affiliate.
<!--DEPRECATED + project_id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `project_id` of the project. -->

+ Model (application/json)

    + Body

            {
                "id": "ba33f7df-33ca-46dd-a015-92c46fdb6ba3",
                "is_external": false,
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu"
                },
                "external_person": null,
                "project_roles": [ { "id": "principal_investigator", "name": "Principal Investigator" }, ... ]
            }

### View project affiliate detials [GET]
>**Permission**
- - - - -
view_project

+ Response 200

    [Project Affiliate instance][]

### Update project affiliate [PUT]
>**Permission**
- - - - -
update_project

+ Request (application/json)

        {
            "user": null,
            "external_person": {
                "full_name": "Geddy Lee",
                "email": "geddy.lee@pennstate.edu"
            },
            "project_roles": [ { "id": "research_coordinator" }, ... ]
        }

+ Response 200 (application/json)

        {
            "id": "dd33f7df-33ca-46dd-a015-92c46fdbda44",
            "is_external": true,
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "user": null,
            "external_person": {
                "full_name": "Geddy Lee",
                "email": "geddy.lee@pennstate.edu"
            },
            "project_roles": [ { "id": "research_coordinator", "name": "Research Coordinator" }, ... ]
        }

### Delete a project affiliate [DELETE]
>**Permission**
- - - - -
update_project

+ Response 204

## Group Storage Provider
A storage provider represents an external service that provides physical storage space for files.

## Storage Providers collection [/storage_providers]

### List storage providers [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        results: [
            {
                "id": "duke_isilon",
                "name": "Duke Isilon Storage",
                "description": "A description of the storage service level would go here.",
                // Deprecated implies that storage provide can no longer accept uploads.
                "is_deprecated": false
            },
            {
                "id": "amazon_s3_glacier",
                "name": "Amazon S# Glacier",
                "description": "A description of the storage service level would go here.",
                "is_deprecated": false
            },
            {
                "id": "google_cloud_nearline",
                "name": "Google Cloud Nearline",
                "description": "A description of the storage service level would go here.",
                "is_deprecated": false
            },
            ...
        ]

## Storage Provider instance [/storage_providers/{id}]
+ Parameters
    + id (required, string, `duke_isilon`) ... Globally unique `id` of the storage provider.


### View storage provider details [GET]
>**Permission**
- - - - -
authenticated

+ Response 200 (application/json)

        {
            "id": "duke_isilon",
            "name": "Duke Isilon Storage",
            "description": "A description of the storage service level would go here.",
            "is_deprecated": false
        }

## Group Project Folder
A folder represents a container for organizing files.  A folder is contained within the context of the
project root or a project folder.  

## Project Folders collection [/projects/{id}/folders]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Create a project folder [POST]
>**Permission**
- - - - -
create_file

>**Rules**
- - - - -
* A folder is created within the context of the project root or a project folder.  A folder can have one
and only one parent folder.
* The `parent_folder` must be a folder owned by the referenced project.
* Specify alias "root" for the `parent_folder` to create a new folder in the project root.

+ Request (application/json)

        {
            // Specify root for parent_folder to create a new folder in project root.
            "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data"
        }

+ Response 201 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Sequencing Core/Raw Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

### List project folders [GET]
>**Permission**
- - - - -
view_project

>**Rules**
- - - - -
* Project folders that have been deleted (i.e. `"is_deleted": true`) are not included in this listing.

+ Response 200 (application/json)

        results: [
            {    
                "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
                "name": "Raw Data",
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "virtual_path": "/Sequencing Core/Raw Data",
                "is_deleted": false,
                "audit": <audit_object>
            },
            ...
        ]

## Project Folder instance [/projects_folders/{id}]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.
<!--DEPRECATED + project_id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `project_id` of the project. -->

### View project folder details [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Sequencing Core/Raw Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

### Delete a project folder [DELETE]
**Permission**
- - - - -
delete_file

**Rules**
- - - - -
* Logically deletes project folder from the meta-data (i.e. sets `"is_deleted": true`).
* For the MVP, the files associated to the project folder are not deleted from their physical storage location.

+ Response 204

## Move a project folder to new parent [/projects_folders/{id}/move]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

### Move a project folder [PUT]
>**Permission**
- - - - -
create_file

>**Rules**
- - - - -
* To move a folder, set `parent_folder` to target folder location; the target folder must be in the source 
folders `project` context.

+ Request (application/json)

        {
            "parent_folder": { "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" }
        }

+ Response 200 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Flow Core/Raw Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

## Rename a project folder [/projects_folders/{id}/rename]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

### Rename a project folder [PUT]
>**Permission**
- - - - -
create_file

+ Request (application/json)

        {
            "name": { "Model Data" }
        }

+ Response 200 (application/json)

        {
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent_folder": { "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "Model Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Flow Core/Model Data",
            "is_deleted": false,
            "audit": <audit_object>
        }

## Group Folder Parent/Children
Convenience endpoints for retrieval of a folder parent and immediate children.

## Parent Folder instance [/project_folders/{id}/parent]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

## View parent folder details [GET]
>**Permission**
- - - - -
view_project

+ Response 200 (application/json)

        {
            "id": "f8416bbe-357a-4687-919d-3d13d4108dc1",
            "parent_folder": "root",
            "name": "Flow Core",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "virtual_path": "/Flow Core",
            "is_deleted": false,
            "audit": <audit_object>
        }

## Folder Children collection [/project_folders/{id}/children]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the folder.

### List folder children [GET]
>**Permission**
- - - - -
view_project

>**Rules**
- - - - -
* Project folders that have been deleted (i.e. `"is_deleted": true`) are not included in this listing.

+ Response 200 (application/json)

        results: [
            {    
                "id": "ad9115b8-1e4a-4399-b606-56622eb462e1",
                "parent_folder": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                "name": "Aligned",
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "virtual_path": "/Sequencing Core/Raw Data/Aligned",
                "is_deleted": false,
                "audit": <audit_object>
            },
            ...
        ]

<!--WIP
## Group Files
A research data file that is maintained in the context of a project (and optionally a project folder).  A file resource represents the descriptive meta\-data about file including the physical storage location and access paths.

## Files collection [/project/{id}/files]
+ Parameters
    + id (required, string, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... Globally unique `id` of the project.

### Create a queued file upload [POST]
>**Permission**
- - - - -
create_file

>**Rules**
- - - - -
The response returns a signed URL in the `Location` header that can be used to upload the file.  The signed URL contains the following parameters:
> **token** - A base64-encoded one-time use token.
**signature** - A hashed, signed, and base64-encoded version of the token (to be verified by storage server).
**upload_id* - The base64-encoded globally unique upload_id used to track the file upload status.

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",  // Name of client file to upload
            "folder": null, // Set to null for project root, otherwise a Folder ID { id: "dd29f7df-33ca-46dd-a015-92c46fdb6fd1" }
            "extension": "Rdata", // Extensions to use for file downloads (derived by server from name)
            "sha1": "cf23df2207d99a74fbe169e3eba035e633b65d94", // The sha1 for the file content (optionally computed/provided by client?)
            "content_type": "application/octet-stream", // Valid type per https://en.wikipedia.org/wiki/Internet_media_type (optionally provided by client)
            "size": "5242880", // The size of file in bytes (optionally provided by client?)
            "storage_location": { "id": "duke_isilon" } // Target storage location
        }

+ Response 201 (application/json)

    + Headers

            Location: http://data-service-dev.duke.edu?token=WrT7U9...&signature=Th88wF...&upload_id=Yui99h...

    + Body

            {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "folder": null,
                "extension": "Rdata",
                "sha1": "cf23df2207d99a74fbe169e3eba035e633b65d94", // If client provided sha1, server computed sha1 must match
                "content_type": "application/octet-stream",
                "size": "5242880", // If client provided size, server computed size must match
                "storage_location": { "id": "duke_isilon" },
                "upload_status": {
                    "state": "pending", // Possible state values: "pending", "processing", "error", "completed"
                    "error_message": <upload_error_object>, // Populated when upload_status.state="error"
                    "started_on": null,
                    "ended_on": null
                },
                <audit_object>
            }
-->
