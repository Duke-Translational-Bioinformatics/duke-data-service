FORMAT: 1A
HOST: https://dukeds-dev.herokuapp.com/api/v1/

# Duke Data Services

The Duke Data Service (DDS) API allows Duke researchers to store, organize, retrieve and share data.

The intent here is to create a strawman for the data service API. Key focuses are on API endpoints that enhance usability for "shallow end of the pool" users, endpoints that support the needs of investigators for managing their research groups, endpoints that accommodate shared resource and core facility needs, endpoints that support SOM administration of data resources, and endpoints that facilitate reproducible scientific workflows. There are tensions to resolve to meet these needs, and we should consider whether the API might be broken up into multiple APIs, whether some business logic be pushed to the users, etc.

Adhere as well as possible to the [Heroku API Design Best Practices:](https://github.com/interagent/http-api-design) requiring secure TLS connections, versioning in the accepts header, supporting Etags, including a Request-id in each response header, among others.

## Group API Usage

Client API Key
--------------
Authorized users may generate a secret API key via the Web interface.  This will not be part of the initial API release, referred to herein as the "Minimally Viable Product" (MVP).

User Authentication
--------------
Users will be required to authenticate via a trusted authentication provider (i.e. Duke Shibboleth for MVP).

**Some design assumptions for the MVP:**
* A authentication token (i.e. JWT) will be generated for client applications via a successful HTTPS callback from Duke Shibboleth single sign-on service.  This token must be supplied in header for subsequent API calls.
* Tokens will have an expiration policy of X hours/days.
* When a user authenticates successfully for the fist time via Duke Shibboleth, their user profile will be created in the DDS local user data store.

Collection Pagination
--------------
For endpoints that return a collection of resources/objects, the number of objects returned will be paginated. The number of objects returned per page, and the desired page can be controlled using the query parameters 'page', and 'per_page'.  For example: `/projects?per_page=25`; would return the first 25 projects, and `/projects?page=3&per_page=25` would return the third batch of 25 projects.  Collection payloads will always be returned in an envelope with the 'results' key tied to an array of objects.

    {
        "results": [
            { },
            { },
        ]
    }

To make it easy for clients to manage pagination, the following headers will always be included in the response:

* X-Total: The total number of objects that would be returned by the query unpaginated
* X-Total-Pages: The total number of pages given X-Total and X-Per-Page
* X-Page: Current Page (passed in as query parameter)
* X-Per-Page: per_page (passed in as query parameter)
* X-Next-Page: Next page to be collected
* X-Prev-Page: Previous page (will be empty on first page)

Audit Object
--------------
Resource payloads may include a composite audit object. An example structure of that object is represented here and will be referenced as `<audit_object>` in resource specific payloads.

    {
        "created_on": "2015-01-01T12:00:00Z",
        "created_by": {
            "id": "ce245d81-bae1-452b-8589-24f736ca7735",
            "username": "mrgardner01",
            "full_name": "Matthew Gardner"
        },
        "last_updated_on": "2015-01-01T13:00:00Z",
        "last_updated_by": {
            "id": "d240ef3d-8d43-441b-be90-78f51a02e47f",
            "username": "jturner01",
            "full_name": "Jon Turner"
        },
        "deleted_on": null,
        "deleted_by": null
    }

API Errors
----------------
We should respond with context appropriate error codes, especially for 400 class errors, using the [Standard List](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)

* 400: no API token, validation errors
* 401: bad API token
* 403: user performing request which they do not have permission to perform
* 404: user requesting resource that does not exist

All error responses should include a JSON response that provides the HTTP status code, details of the error that occurred, and possible steps to address the problem. For example:

    {
        "error": "404",
        "reason": "Project does not exist",
        "suggestion": "You may have chosen the wrong ID."
    }

Validation errors require a field-level breakdown with an array of errors (even if multiple errors occur for the same field), each describing the field with the error, and message describing the
error encountered.

    {
        "error": "400",
        "reason": "validation failed",
        "suggestion": "Fix the following invalid fields and resubmit"
        "errors" : [
            {
                "field" : "name",
                "message" : "Project needs a name."
            },
            {
                "field" : "principal_investigator",
                "message" : "Principal Investigator must be specified for each project."
            }
        ]
    }

## Group Authorization Roles
Represents set of discrete permissions that may be granted to a user.

**Authorization Roles:**

| Role | Name | Description | Permission(s) |
|:-----|:-----|:------------|:--------------|
| **system_admin** | System Admin | Can manage system level permissions and perform all operations across all projects | system_admin |
| **project_admin** | Project Admin | Can update project details, delete project, manage project level permissions and perform all file operations | view_project, update_project, delete_project, manage_project_permissions, download_file, create_file, update_file, delete_file |
| **project_viewer** | Project Viewer | Can only view project and file metadata | view_project |
| **file_downloader** | File Downloader | Can download files | view_project, download_file |
| **file_uploader** | File Uploader | Can upload files | view_project, create_file |
| **file_editor** | File Editor | Can view, download, create, update and delete files | view_project, download_file, create_file, update_file, delete_file |


**Permissions:**

| Permission | Description |
|:------------|:------------|
| **system_admin** | Can manage system level permissions and perform all operations across all projects |
| **view_project** | Can view project and file metadata |
| **update_project** | Can update project header details and project affiliations |
| **delete_project** | Can delete project |
| **manage_project_permissions** | Can grant/revoke project level permissions |
| **download_file** | Can download file |
| **create_file** | Can upload new file |
| **update_file** | Can upload new version of existing file |
| **delete_file** | Can delete a file |

## Authorization Roles collection [/auth_roles{?context}]
+ Parameters
    + context (string, optional, `system`) ... The `context` or scope in which permission can be granted; valid context values are "system" or "project".

### List roles [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "system_admin",
                    "name": "System Admin",
                    "description": "Can manage system level permissions and perform all operations across all projects",
                    "permissions": [ { "id": "system_admin" } ],
                    "contexts": [ "system" ],
                    "is_deprecated": false
                }
            ]
        }

## Authorization Role instance [/auth_roles/{id}]
+ Parameters
    + id (string, required, `file_editor`) ... The unique `id` for an authorization role.

### View role [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "file_editor",
            "name": "File Editor",
            "description": "Can view, download, create, update and delete files",
            "permissions": [ { "id": "view_project" }, { "id": "download_file" } ],
            "contexts": [ "project" ],
            "is_deprecated": false
        }

## Group Current User
Represents the currently authenticated user.

## Current User instance [/current_user]

### View current user [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100"
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": { }
        }

## Current Users Usage [GET /current_user/usage]
View summary usage for current user across all projects.

>**Permission:** view_project
- - - - -

>**Response Properties**
- - - - -
+ project_count (number) - Total number of projects where the user has been granted a project level authorization role.
+ file_count (integer) - Total number of files the user has created (i.e. uploaded) across all projects.
+ storage_bytes (integer) - Total bytes for files the user has created (i.e. uploaded) across all projects.

>**Rules**
- - - - -
+ Deleted objects (i.e. `"is_deleted": true`) should be excluded from all counts/totals.
+ Counts/totals are only for objects user has visibility to via the view_project permission.

+ Response 200 (application/json)

        {
            "project_count": 10,
            "file_count": 126,
            "storage_bytes": 304006007009
        }

## Group Users
Represents registered users.

## Users collection [/users{?full_name_contains,first_name_begins_with,last_name_begins_with}]

### List users [GET]
>**Permission:** authenticated
- - - - -

+ Parameters
    + full_name_contains (string, optional, `gardner`) ... Returns users where their `full_name` contains the specified string.
    + first_name_begins_with (string, optional, `mat`) ... Returns users where their `first_name` begins with the specified string.
    + last_name_begins_with (string, optional, `gar`) ... Returns users where their `last_name` begins with the specified string.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "first_name": "Matthew",
                    "last_name": "Gardner",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu",
                    "auth_provider": {
                        "source": "duke_shibboleth",
                        "uid": "gardner100"
                    },
                    "last_login_on": "2015-01-01T12:00:00Z",
                    "audit": { }
                }
            ]
        }

## User instance [/users/{id}]
+ Parameters
    + id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `id` for a user.

### View user [GET]
>**Permission:** authenticated
- - - - -

+ Response 200

        {
            "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
            "username": "mrgardner01",
            "first_name": "Matthew",
            "last_name": "Gardner",
            "full_name": "Matthew Gardner",
            "email": "mrgardner01@duke.edu",
            "auth_provider": {
                "source": "duke_shibboleth",
                "uid": "gardner100"
            },
            "last_login_on": "2015-01-01T12:00:00Z",
            "audit": { }
        }

## Group System Permissions
Represents system level authorization roles that have been granted to a user.

## System Permissions collection [/system/permissions]

### List system permissions [GET]
>**Permission:** system_admin
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "username": "mrgardner01",
                        "full_name": "Matthew Gardner"
                    },
                    "auth_role": { "id": "system_admin", "name": "System Admin", "description": "Can manage system level permissions and perform all operations across all projects" }
                }
            ]
        }

## System Permission instance [/system/permissions/{user_id}]
+ Parameters
    + user_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "system_admin", "name": "System Admin", "description": "Can manage system level permissions and perform all operations across all projects" }
            }

### Grant system permission [PUT]
>**Permission:** system_admin
- - - - -

>**Rules**
- - - - -
+ Revokes (deletes) any existing system level authorization role for the user and grants new role.
+ The role specified must be a system level authorization role (i.e. "system" in `auth_role.contexts`).

+ Request (application/json)

        {
            "auth_role": { "id": "system_admin" }
        }

+ Response 200

    [System Permission instance][]

### View system permission [GET]
>**Permission:** system_admin OR system permissions are for the current user
- - - - -

+ Response 200

    [System Permission instance][]

### Revoke system permission [DELETE]
>**Permission:** system_admin
- - - - -

+ Response 204

## Group Projects
Represents a container for storing, organizing, retrieving and sharing research data files and their associated metadata.

## Projects collection [/projects]

### Create project [POST]
>**Permission:** authenticated
- - - - -

>**Rules**
- - - - -
+ User who creates project is granted the "project_admin" authorization role.

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 201 (application/json)

        {
            "kind": "dds-project",
            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation...",
            "is_deleted": false,
            "audit": { }
        }

### List projects [GET]
>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Projects that have been deleted (i.e. `"is_deleted": true`) are not included.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)",
                    "description": "Goal of generating a targeted knockout mutation...",
                    "is_deleted": false,
                    "audit": { }
                }
            ]
        }

## Project instance [/projects/{id}]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

+ Model (application/json)

    + Body

            {
                "kind": "dds-project",
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                "name": "Knockout Mouse Project (KOMP)",
                "description": "Goal of generating a targeted knockout mutation...",
                "is_deleted": false,
                "audit": { }
            }

### View project [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Project instance][]

### Update project [PUT]
>**Permission:** update_project
- - - - -

+ Request (application/json)

        {
            "name": "Knockout Mouse Project (KOMP)",
            "description": "Goal of generating a targeted knockout mutation..."
        }

+ Response 200

    [Project instance][]

### Delete project [DELETE]
>**Permission:** delete_project
- - - - -

>**Rules**
- - - - -
+ Logically deletes project (i.e. sets `"is_deleted": true`).
+ This operation recursively deletes (logical delete) all of the project children (folders and files).

+ Response 204

## Group Project Permissions
Represents project level authorization roles that have been granted to a user.

## Project Permissions collection [/projects/{id}/permissions]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

### List project permissions [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "username": "mrgardner01",
                        "full_name": "Matthew Gardner"
                    },
                    "auth_role": { "id": "file_editor", "name": "File Editor", "description": "Can view, download, create, update and delete files" }
                }
            ]
        }

## Project Permission instance [/projects/{project_id}/permissions/{user_id}]
+ Parameters
    + project_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `project_id` of the project.
    + user_id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

             {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "username": "mrgardner01",
                    "full_name": "Matthew Gardner"
                },
                "auth_role": { "id": "file_editor", "name": "File Editor", "description": "Can view, download, create, update and delete files" }
            }

### Grant project permission [PUT]
>**Permission:** manage_project_permissions
- - - - -

>**Rules**
- - - - -
+ Revokes (deletes) any existing project level authorization role for the user and grants new role.
+ The role specified must be a project level authorization role (i.e. "project" in `auth_role.contexts`).

+ Request (application/json)

        {
            "auth_role": { "id": "file_editor" }
        }

+ Response 200

    [Project Permission instance][]

### View project permission [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Project Permission instance][]

### Revoke project permission [DELETE]
>**Permission:** manage_project_permissions
- - - - -

+ Response 204

## Group Project Roles
Represents an organizational role that an individual (i.e. user) may assume in the context of a project.  These organizational roles have no relationship to authorization roles.

**Project Roles:**

| Role | Name | Description |
|:-----|:-----|:------------|
| **principal_investigator** | Principal Investigator | Lead investigator for the research project |
| **research_coordinator** | Research Coordinator | Coordinator for the research project |

## Project Roles collection [/project_roles]

### List project roles [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "principal_investigator",
                    "name": "Principal Investigator",
                    "description": "Lead investigator for the research project",
                    "is_deprecated": false
                },
                {
                    "id": "research_coordinator",
                    "name": "Research Coordinator",
                    "description": "Coordinator for the research project",
                    "is_deprecated": false
                }
            ]
        }

## Project Role instance [/project_roles/{id}]
+ Parameters
    + id (string, required, `principal_investigator`) ... The unique `id` for a project role.

### View project role [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "principal_investigator",
            "name": "Principal Investigator",
            "description": "Lead investigator for the research project",
            "is_deprecated": false
        }

### Group Affiliates
Represents an individual that plays some project level role of interest from a collaboration perspective.  The affiliate may be internal (i.e. a DDS user) or external (i.e. non-DDS user).  For the MVP, we will assume all affiliates must be a DDS user.

## Affiliates collection [/projects/{id}/affiliates]
+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.

### List affiliates [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "user": {
                        "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                        "full_name": "Matthew Gardner",
                        "email": "mrgardner01@duke.edu"
                    },
                    "project_role": { "id": "principal_investigator", "name": "Principal Investigator" }
                }
            ]
        }

## Affiliate instance [/projects/{project_id}/affiliates/{user_id}]
+ Parameters
    + project_id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `project_id` of the project.
    + user_id (string, required, `c1179f73-0558-4f96-afc7-9d251e65b7bb`) ... The unique `user_id` of the user.

+ Model (application/json)

    + Body

            {
                "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                "user": {
                    "id": "c1179f73-0558-4f96-afc7-9d251e65b7bb",
                    "full_name": "Matthew Gardner",
                    "email": "mrgardner01@duke.edu"
                },
                "project_role": { "id": "principal_investigator", "name": "Principal Investigator" }
            }

### Associate affiliate [PUT]
>**Permission:** update_project
- - - - -

>**Rules**
- - - - -
+ Deletes any existing project role for the user and assigns new role.

+ Request (application/json)

        {
            "project_role": { "id": "principal_investigator" }
        }

+ Response 200

    [Affiliate instance][]

### View affiliate [GET]
>**Permission:** view_project
- - - - -

+ Response 200

    [Affiliate instance][]

### Delete affiliate [DELETE]
>**Permission:** update_project
- - - - -

+ Response 204

## Group Storage Providers
Represents an external service that provides physical storage space for DDS files.

## Storage Providers collection [/storage_providers]

### List storage providers [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                    "name": "duke_oit_swift",
                    "description": "Duke OIT Storage",
                    "is_deprecated": false
                },
                {
                    "id": "t4479f73-0774-4f96-afc7-9d251e65by88",
                    "name": "amazon_s3_glacier",
                    "description": "Amazon Glacier Cloud Storage",
                    "is_deprecated": false
                }
            ]
        }

## Storage Provider instance [/storage_providers/{id}]
+ Parameters
    + id (string, required, `g5579f73-0558-4f96-afc7-9d251e65bv33`) ... The unique `id` of the storage provider.


### View storage provider [GET]
>**Permission:** authenticated
- - - - -

+ Response 200 (application/json)

        {
            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
            "name": "duke_oit_swift",
            "description": "Duke Office of Information Technology Storage",
            "is_deprecated": false
        }

## Group Folders
A folder is a container for files and sub-folders; folders are located in the top-level project root or a a parent folder.

## Folders collection [/folders]

### Create folder [POST]
>**Permission:** create_file
- - - - -

>**Properties**
- - - - -
+ parent.kind (string, required) - The kind of parent container for the folder; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ parent.id (string, required) - The unique id of the parent.
+ name (string, required) - A short name for the folder.
+ ancestors (array) - Represents entire ancestral path, from the root node (project or folder), down to its parent, in hierarchical order.

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Folder instance [/folders/{id}]
+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

### View folder [GET]
>**Permission:** view_project
- - - - -

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

### Delete folder [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ Logically deletes folder (i.e. sets `"is_deleted": true`).
+ This operation recursively deletes (logical delete) all of the folder children (folders and files).

+ Response 204

## Move folder [PUT /folders/{id}/move]
>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ Current user must have `create_file` permission for source project and destination project.
+ The destination folder cannot be a child of the folder being moved.

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Raw Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc", "name": "Flow Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Rename folder [PUT /folders/{id}/rename]
>**Permission:** create_file
- - - - -

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "name": "Model Data"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc" },
            "name": "Model Data",
            "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc", "name": "Flow Core" }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Group Uploads
All files must be uploaded using a multi-part/chunked upload process.  Although this places more burden on clients to divide larger files into chunks and send each chunk separately, the result is a more robust process that allows failed chunks to be resent.  The following endpoints must be used by the client to manage the chunked upload process.

## Uploads collection [/projects/{id}/uploads]
+ Parameters
    + id (required, string, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... Globally unique `id` of the project.

### Initiate chunked upload [POST]
This is the first step in uploading a large file. An upload objects is created along with a composite status object that can be polled by client to track the progress of the chunked upload.

>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ name (string, required) - The name of the client file to upload.
+ content_type (string, optional) - Valid type per [media types](https://en.wikipedia.org/wiki/Internet_media_type).
+ size (number, required) - The size in bytes (computed by client).
+ hash.value (number, required) - The files hash (computed by client).
+ hash.algorithm (string, required) - The hash algorithm used (i.e. md5, sha256, sha1, etc.) - this must be the default algorithm supported by the target storage provider.

>**Response Properties**
- - - - -
+ chunks (object) - The chunks the client has requested to upload.
+ storage_location (object) - Object that contains physical file storage details.
+ status (object) - Object used to track status of overall file upload.

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" }
        }

+ Response 201 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5", "client_reported": true, "confirmed": false },
            "chunks": [ ],
            "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

### List chunked uploads [GET]
>**Permission:** create_file
- - - - -

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "content_type": "application/octet-stream",
                    "size": 30024000,
                    "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5", "client_reported": true, "confirmed": false },
                    "chunks": [ ],
                    "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" },
                    "status": {
                        "initiated_on": "2015-07-10T13:00:00Z",
                        "completed_on": null,
                        "error_on": null,
                        "error_message": null
                    },
                    "audit": { }
                }
            ]
        }

## Upload instance [/uploads/{id}]
+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

## View chunked upload [GET]

>**Permission:** create_file
- - - - -

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5", "client_reported": true, "confirmed": false },
            "chunks": [
              {
                "number": 1,
                "size": 10000,
                "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" }
              }
            ],
            "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Get pre-signed chunk URL  [PUT /uploads/{id}/chunks]
Generate a pre-signed URL that will be used by client to upload a file chunk to the storage provider. This step is repeated for each chunk.  If the chunk uploads fails, the client must call this endpoint again to get a new pre-signed URL for the chunk number, then retry the upload.

>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ number (number, required) - The chunk number.
+ size (number, required) - The size of the chunk in bytes (computed by client)
+ hash.value (string, required) - The chunk hash (computed by client).
+ hash.algorithm (string, required) - The hash algorithm used (i.e. md5, sha256, sha1, etc.) - this must be the default algorithm supported by storage provider.

>**Response Properties**
- - - - -
+ http_verb (string) - The http verb to use for uploading the next chunk.
+ host (string) - The storage provider host.
+ url (string) - The signed URL endpoint for uploading the next chunk to the storage provider.
+ http_headers (array) - Array of headers (i.e. key/value pairs) that must be included in the client upload request.

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Request (application/json)

        {
            "number": 1,
            "size": 5024000,
            "hash": { "value": "ey23df2207d99a74fbe169e3eba035e633b65d76", "algorithm": "md5" }
        }

+ Response 200 (application/json)

        {
            "http_verb": "PUT",
            "host": "duke_data_service_prod.s3.amazonaws.com",
            "url": "/666be35a-98e0-4c2e-9a17-7bc009f9bb23?partNumber=1&uploadId=EXAMPLEJZ6e0YupT2...&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN...",
            "http_headers": [
                    { "Content-Length": "5024000" }
            ]
        }

## Complete chunked file upload [PUT /uploads/{id}/complete]
This operation is called by the client after all file chunks have been successfully uploaded to the storage provider.

>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ If the storage provider requires the individual chunks to be assembled, such as Amazon S3, this operation will call the storage provider endpoint to assemble the parts into a single file object.
+ The client reported file hash for each chunk must equal the storage provider computed file hash for the same chunk, or an upload error is reported.
+ The client reported file size (bytes) must equal the storage provider reported file size, or an upload error is reported.
+ If there are no errors, the `upload_status.complete_on` is set to the current timestamp.

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5", "client_reported": true, "confirmed": true },
            "chunks": [
                {
                    "number": 1,
                    "size": 5024000,
                    "hash": { "value": "jw23df2207d99a74fbe169e3eba035e633b65d88", "algorithm": "md5" }
                },
                {
                    "number": 2,
                    "size": 5024000,
                    "hash": { "value": "ry23df2207d99a74fbe169e3eba035e633b65dkq", "algorithm": "md5" }
                }
            ],
            "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": "2015-07-10T13:00:00Z",
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Group Files
A research data file; a file resource represents the descriptive metadata about a physical data file.

## Files collection [/files]

### Create file [POST]
Creates a file metadata object; The client is responsible for the creation of this object after confirming the associated physical file has been successfully uploaded to a storage provider (see `Uploads`). 

>**Permission:** create_file
- - - - -

>**Properties**
- - - - -
+ parent.kind (string, required) - The kind of parent container for the file; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ parent.id (string, required) - The unique id of the parent.
+ upload.id (string, required) - The `upload.id` for an upload that completed successfully. (i.e. `upload.status.error_on is null`). 

>**Rules**
- - - - -
+ The current user must be the user who uploaded the physical file. 

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "ad9115b8-1e4a-4399-b606-56622eb462e1" },
            "upload": { "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23" }
        }

+ Response 201 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                    "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                },
            "audit": { }
        }

## File instance [/files/{id}]
+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

### View file [GET]
>**Permission:** view_project
- - - - -

+ Response 201 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
            ],
            "is_deleted": false,
            "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                    "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                },
            "audit": { }
        }

### Delete file [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ Logically deletes file (i.e. sets `"is_deleted": true`).

+ Response 204

## Download file [GET /files/{id}/download]
Generates a storage provider specific pre-signed URL to use for file download, then performs an HTTP redirect to download file from the storage provider.

>**Permission:** download_file
- - - - -

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

+ Response 301

## Move file [PUT /files/{id}/move]
>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ Current user must have `create_file` permission for source project and destination project.

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

+ Request (application/json)

        {
            "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
            ],
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
            },
            "audit": { }
        }

## Rename file [PUT /files/{id}/rename]
>**Permission:** create_file
- - - - -

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.


+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata",
            "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
            "ancestors": [
                { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
            ],
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
            },
            "audit": { }
        }

## Group Search Project/Folder Children
Search for the children (i.e. folders and files) of a project or folder.

## Search Project Children [GET /projects/{id}/children{?name_contains,kind}]

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the project unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the project hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
                    "name": "Raw Data",
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                        { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                        { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
                    ],
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                        "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                    },
                    "audit": { }
                }
            ]
        }

## Search Folder Children [GET /folders/{id}/children{?name_contains,kind}]

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the folder unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the folder hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the folder.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                 {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy" },
                    "name": "Raw Data",
                    "project": { "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                        { "kind": "dds-folder", "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy", "name": "Sequencing Core" }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e" },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": { "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a" },
                    "ancestors": [
                        { "kind": "dds-project", "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)" }, 
                        { "kind": "dds-folder", "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e", "name": "Sequencing Archive" }
                    ],
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hash": { "value": "cf23df2207d99a74fbe169e3eba035e633b65d94", "algorithm": "md5" },
                        "storage_provider": { "id": "g5579f73-0558-4f96-afc7-9d251e65bv33", "name": "duke_oit_swift", "description": "Duke OIT Storage" }
                    },
                    "audit": { }
                }
            ]
        }