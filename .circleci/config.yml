version: 2
jobs:
  build:
    parallelism: 4
    environment:
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      OPENID_CLIENT_ID: test
      BONSAI_URL: elastic.local:9200
      GRAPHENEDB_URL: http://neo4j.db.host:7474
      OPENID_CLIENT_SECRET: testpass
      OPENID_URL: http://oit.oauth.edu
      CLOUDAMQP_URL: amqp://rabbitmq.local:5672
      DDSURL: http://0.0.0.0:3001
      LOCALDEV: true

    docker:
      # Copied from rails circle demo
      - image: ruby:2.3.3
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: circleci-demo-ruby
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_ruby_test
          POSTGRES_PASSWORD: ""
      - image: elasticsearch:5.4.3
        environment:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        command: elasticsearch -E 'action.auto_create_index=false'
      - image: neo4j:3.0.2
        environment:
          NEO4J_AUTH: none
      - image: rabbitmq:3.5-management

    steps:
      - checkout
      - run: chmod +x docker/includes/install_node.sh
      - run: mkdir -p /root/installs
      - run:
          name: Install Node
          command: docker/includes/install_node.sh
          environment:
            LATEST_NODE: node-v0.12.7-linux-x64
            LATEST_NODE_URL: https://nodejs.org/dist/v0.12.7/node-v0.12.7-linux-x64.tar.gz
      - run:
          name: install dockerize
          command: wget https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz && tar -C /usr/local/bin -xzvf dockerize-latest.tar.gz && rm dockerize-latest.tar.gz

      - run:
          name: Set hostnames for external services
          command: |-
            printf '0.0.0.0       swift.local
            0.0.0.0       neo4j.db.host
            0.0.0.0       elastic.local
            0.0.0.0       rabbitmq.local
            ' | tee -a /etc/hosts

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Wait for Elasticsearch
          command: dockerize -wait tcp://localhost:9200 -timeout 1m

      - run:
          name: Wait for Neo4j
          command: dockerize -wait tcp://localhost:7474 -timeout 1m

      - run:
          name: Wait for RabbitMQ
          command: dockerize -wait tcp://localhost:5672 -timeout 1m

      - run: |-
          mkdir -p config && echo 'test:
            database: circle_ruby_test
            username: ubuntu
            pool: 5
            encoding: unicode
            adapter: postgresql
            host: localhost
          ' > config/database.yml

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: Load neo4j schema
          command: bundle exec rake neo4j:schema:load --trace

      # Run rspec in parallel
      - type: shell
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
