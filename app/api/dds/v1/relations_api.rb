module DDS
  module V1
    class RelationsAPI < Grape::API

      desc 'Create used relation' do
        detail 'Creates a WasUsedBy relationship.'
        named 'create used relation'
        failure [
          [200, 'This will never actually happen'],
          [201, 'Created Successfully'],
          [400, 'Activity and Entity are required'],
          [401, 'Unauthorized'],
          [403, 'Forbidden']
        ]
      end
      params do
        requires :activity, desc: "Activity", type: Hash do
          requires :id, type: String, desc: "Activity UUID"
        end
        requires :entity, desc: "Entity", type: Hash do
          requires :kind, type: String, desc: "Entity kind"
          requires :id, type: String, desc: "Entity UUID"
        end
      end
      post '/relations/used', root: false do
        authenticate!
        relation_params = declared(params, include_missing: false)
        activity = Activity.find(relation_params[:activity][:id])
        #todo change this when we allow other entities to be used by activities
        entity = FileVersion.find(relation_params[:entity][:id])

        relation = UsedProvRelation.new(
          relatable_from: activity,
          creator: current_user,
          relatable_to: entity
        )
        authorize relation, :create?
        Audited.audit_class.as_user(current_user) do
          if relation.save
            annotate_audits [relation.audits.last]
            relation
          else
            validation_error!(activity)
          end
        end
      end


      desc 'Create was generated by relation' do
        detail 'Creates a WasGeneratedBy relationship.'
        named 'create was generated by relation'
        failure [
          [200, 'This will never actually happen'],
          [201, 'Created Successfully'],
          [400, 'Activity and Entity are required'],
          [401, 'Unauthorized'],
          [403, 'Forbidden']
        ]
      end
      params do
        requires :activity, desc: "Activity", type: Hash do
          requires :id, type: String, desc: "Activity UUID"
        end
        requires :entity, desc: "Entity", type: Hash do
          requires :kind, type: String, desc: "Entity kind"
          requires :id, type: String, desc: "Entity UUID"
        end
      end
      post '/relations/was_generated_by', root: false do
        authenticate!
        relation_params = declared(params, include_missing: false)
        activity = Activity.find(relation_params[:activity][:id])
        #todo change this when we allow other entities to be generated by activities
        entity = FileVersion.find(relation_params[:entity][:id])

        relation = GeneratedByActivityProvRelation.new(
          relatable_to: activity,
          creator: current_user,
          relatable_from: entity
        )
        authorize relation, :create?
        Audited.audit_class.as_user(current_user) do
          if relation.save
            annotate_audits [relation.audits.last]
            relation
          else
            validation_error!(activity)
          end
        end
      end

      desc 'Create was derived from relation' do
        detail 'Creates a WasDerivedFrom relationship.'
        named 'create was derived from relation'
        failure [
          [200, 'This will never actually happen'],
          [201, 'Created Successfully'],
          [400, 'Activity and Entity are required'],
          [401, 'Unauthorized'],
          [403, 'Forbidden']
        ]
      end
      params do
        requires :used_entity, desc: "Entity used by the derivation", type: Hash do
          requires :kind, type: String, desc: "Entity kind"
          requires :id, type: String, desc: "Entity UUID"
        end
        requires :generated_entity, desc: "Entity generated by the derivation", type: Hash do
          requires :kind, type: String, desc: "Entity kind"
          requires :id, type: String, desc: "Entity UUID"
        end
      end
      post '/relations/was_derived_from', root: false do
        authenticate!
        relation_params = declared(params, include_missing: false)
        #todo change these when we allow other entities to be used and generated by derivations
        used_entity = FileVersion.find(relation_params[:used_entity][:id])
        generated_entity = FileVersion.find(relation_params[:generated_entity][:id])

        relation = DerivedFromFileVersionProvRelation.new(
          creator: current_user,
          relatable_from: generated_entity,
          relatable_to: used_entity
        )
        authorize relation, :create?
        Audited.audit_class.as_user(current_user) do
          if relation.save
            annotate_audits [relation.audits.last]
            relation
          else
            validation_error!(activity)
          end
        end
      end

    end
  end
end
