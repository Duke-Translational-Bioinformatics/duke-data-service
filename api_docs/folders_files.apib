FORMAT: 1A

# Folder and File Resources

## Group << API Summary

## Group Storage Providers
Represents an external service that provides physical storage space for files.

## Storage Providers collection [/storage_providers]

### List storage providers [GET]
>**Permission:** authenticated
- - - - -
**Response messages:**
* 200: Success
* 401: Unauthorized

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                    "name": "duke_oit_swift",
                    "description": "Duke OIT Storage",
                    "chunk_hash_algorithm": "md5",
                    "is_deprecated": false
                },
                {
                    "id": "t4479f73-0774-4f96-afc7-9d251e65by88",
                    "name": "amazon_s3_glacier",
                    "description": "Amazon Glacier Cloud Storage",
                    "chunk_hash_algorithm": "sha1",
                    "is_deprecated": false
                }
            ]
        }

## Storage Provider instance [/storage_providers/{id}]
+ Parameters
    + id (string, required, `g5579f73-0558-4f96-afc7-9d251e65bv33`) ... The unique `id` of the storage provider.


### View storage provider [GET]
>**Permission:** authenticated
- - - - -
**Response messages:**
* 200: Success
* 401: Unauthorized
* 404: StorageProvider Does not Exist

+ Response 200 (application/json)

        {
            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
            "name": "duke_oit_swift",
            "description": "Duke Office of Information Technology Storage",
            "chunk_hash_algorithm": "md5",
            "is_deprecated": false
        }

## Group Folders
A folder is a container for files and sub-folders; folders are located in the top-level project root or a parent folder.

## Folders collection [/folders]

### Create folder [POST]
>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **parent.kind (string, required)** - The kind of parent container for the folder; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ **parent.id (string, required)** - The unique id of the parent.
+ **name (string, required)** - A short name for the folder.

>**Response Properties**
- - - - -
+ **ancestors (object[ ])** - Represents entire ancestral path, from the root node (project or folder), down to its parent, in hierarchical order.

**Response messages:**
* 200: This will never happen
* 201: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Project Does not Exist, Parent Folder does not exist in Project

+ Request (application/json)

        {
            "parent": {
                "kind": "dds-folder",
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc"
            },
            "name": "Raw Data"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": {
                "kind": "dds-folder",
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy"
            },
            "name": "Raw Data",
            "project": {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy",
                    "name": "Sequencing Core"
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Folder instance [/folders/{id}]
+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

### View folder [GET]
>**Permission:** view_project
- - - - -
**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Folder does not exist

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": {
                "kind": "dds-folder",
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy"
            },
            "name": "Raw Data",
            "project": {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy",
                    "name": "Sequencing Core"
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

### Delete folder [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ This operation places the specified folder, and all of its descendants (i.e.
folders,files, and file versions), into the trash bin. If the folder is a
subfolder of another folder when it is deleted, it will be placed into the root
of the project trash bin.

**Response messages:**
* 200: This will never happen
* 204: Successfully Deleted
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Folder does not exist

+ Response 204

## Move folder [PUT /folders/{id}/move]
>**Permission:** create_file
- - - - -

>**Rules**
- - - - -
+ The destination folder cannot be a child of the folder being moved.

**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Folder does not exist, Parent does not exist.

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "parent": {
                "kind": "dds-folder",
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc"
            }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": {
                "kind": "dds-folder",
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc"
            },
            "name": "Raw Data",
            "project": {
                "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc",
                    "name": "Flow Core"
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Rename folder [PUT /folders/{id}/rename]
>**Permission:** create_file
- - - - -
**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Folder does not exist

+ Parameters
    + id (string, required, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... The unique `id` of the folder.

+ Request (application/json)

        {
            "name": "Model Data"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-folder",
            "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
            "parent": {
                "kind": "dds-folder",
                "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc"
            },
            "name": "Model Data",
            "project": {"id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"},
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "482be8c5-209d-4e3b-afaf-cb66686ffbcc",
                    "name": "Flow Core"
                }
            ],
            "is_deleted": false,
            "audit": { }
        }

## Group Uploads

## Uploads collection [/projects/{id}/uploads]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the project.

### Initiate upload [POST]
This is the first step in uploading a file. An upload object is created along with a composite status object that can be polled by client agents to track the progress of the upload.
>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **name (string, required)** - The name of the client file to upload.
+ **content_type (string, optional)** - Valid content type per [media types](https://en.wikipedia.org/wiki/Internet_media_type).
+ **size (number, required)** - The size in bytes of entire file (computed by client).
+ **storage_provider.id (string, optional)** - The unique id for a storage provider.
+ **chunked (boolean, optional)** - The default is true, returning the established chunked upload payload. When false, chunks are omitted and a signed upload url is returned with the payload.

>**Response Properties**
- - - - -
+ **chunks (object)** - The chunks the client has requested to upload, when chunked is true.
+ **storage_location (object)** - Object that contains target storage details.
+ **status (object)** - Object used to track status of overall file upload.
+ **signed_url (object)** - Object that contains url upload information for non-chunked uploads.

**Response messages:**
* 200: This will never happen
* 201: Created Successfully
* 401: Unauthorized
* 404: Project Does not Exist

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "storage_provider": {
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33"
            }
        }

+ Response 201 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hashes": [ ],
            "chunks": [ ],
            "storage_provider": {
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                "name": "duke_oit_swift", "description":
                "Duke OIT Storage"
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "purged_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "storage_provider": {
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33"
            },
            "chunked": false
        }

+ Response 201 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hashes": [ ],
            "storage_provider": {
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                "name": "duke_oit_swift", "description":
                "Duke OIT Storage"
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "purged_on": null,
                "error_on": null,
                "error_message": null
            },
            "signed_url": {
                "http_verb": "PUT",
                "host": "duke_data_service_prod.s3.amazonaws.com",
                "url": "/666be35a-98e0-4c2e-9a17-7bc009f9bb23?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN...",
                "http_headers": [
                  { "Content-Length": "30024000" }
                ]
            },
            "audit": { }
        }

### List uploads [GET]
>**Permission:** view_project
- - - - -
**Response messages:**
* 200: Success
* 401: Unauthorized
* 404: Project Does not Exist

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "content_type": "application/octet-stream",
                    "hashes": [ ],
                    "chunks": [ ],
                    "storage_provider": {
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                        "name": "duke_oit_swift",
                        "description": "Duke OIT Storage"
                    },
                    "status": {
                        "initiated_on": "2015-07-10T13:00:00Z",
                        "completed_on": null,
                        "purged_on": null,
                        "error_on": null,
                        "error_message": null
                    },
                    "audit": { }
                }
            ]
        }

## Upload instance [/uploads/{id}]
+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

### View upload [GET]
>**Permission:** view_project
- - - - -
**Response messages:**
* 200: Success
* 401: Unauthorized
* 404: Upload does not exist

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hashes": [ ],
            "chunks": [
                {
                    "number": 1,
                    "size": 10000,
                    "hash": {
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                        "algorithm": "md5"
                    }
                }
            ],
            "storage_provider": {
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                "name": "duke_oit_swift",
                "description":
                "Duke OIT Storage"
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": null,
                "purged_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

+ Response 200 (application/json)

        {
          "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
          "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
          "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
          "content_type": "application/octet-stream",
          "size": 30024000,
          "hashes": [ ],
          "storage_provider": {
            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
            "name": "duke_oit_swift", "description":
            "Duke OIT Storage"
          },
          "status": {
            "initiated_on": "2015-07-10T13:00:00Z",
            "completed_on": null,
            "purged_on": null,
            "error_on": null,
            "error_message": null
          },
          "signed_url": {
              "http_verb": "PUT",
              "host": "duke_data_service_prod.s3.amazonaws.com",
              "url": "/666be35a-98e0-4c2e-9a17-7bc009f9bb23?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN...",
              "http_headers": [
                { "Content-Length": "30024000" }
              ]
          },
          "audit": { }
        }

## Get pre-signed chunk URL  [PUT /uploads/{id}/chunks]
Generates and returns a pre-signed URL that can be used by client to upload a file chunk to the storage provider. This step is repeated for each chunk.  If the chunk's upload fails, the client must call this action again to get a new pre-signed URL for the chunk number, then retry the chunk upload.
>**Permission:** create_file
- - - - -

>**Request Properties**
- - - - -
+ **number (number, required)** - The chunk number.
+ **size (number, required)** - The size of the chunk in bytes (computed by client).
+ **hash.value (string, required)** - The chunk hash (computed by client).
+ **hash.algorithm (string, required)** - The hash algorithm used (i.e. md5, sha256, sha1, etc.); this must be the default algorithm (i.e. `chunk_hash_algorithm`) supported by storage provider (see **Storage Providers** actions)

>**Response Properties**
- - - - -
+ **http_verb (string)** - The http verb to use for uploading the next chunk.
+ **host (string)** - The storage provider host.
+ **url (string)** - The pre-signed URL for uploading the chunk to the storage provider.
+ **http_headers (object[ ])** - Array of headers (i.e. key/value pairs) that must be included in the client upload request.

**Response messages:**
* 200: Success
* 401: Unauthorized
* 404: Upload does not exist
* 500: Unexpected StorageProviderException experienced

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the chunked upload.

+ Request (application/json)

        {
            "number": 1,
            "size": 5024000,
            "hash": {
                "value": "ey23df2207d99a74fbe169e3eba035e633b65d76",
                "algorithm": "md5"
            }
        }

+ Response 200 (application/json)

        {
            "http_verb": "PUT",
            "host": "duke_data_service_prod.s3.amazonaws.com",
            "url": "/666be35a-98e0-4c2e-9a17-7bc009f9bb23?partNumber=1&uploadId=EXAMPLEJZ6e0YupT2...&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN...",
            "http_headers": [
                { "Content-Length": "5024000" }
            ]
        }

## Complete file upload [PUT /uploads/{id}/complete]
This operation is called by the client after file has been successfully uploaded to the storage provider.
>**Permission:** create_file
- - - - -

>**Properties**
- - - - -
+ **hash.value (string, required)** - The entire file hash (computed by client).
+ **hash.algorithm (string, required)** - The algorithm used by client to compute entire file hash (i.e. md5, sha256, sha1, etc.).

>**Rules**
- - - - -
+ If the storage provider requires the individual chunks to be assembled, such as Amazon S3, this operation will call the storage provider actions to assemble the parts into a single file object.
+ The reported `hash.value` must be a valid algorithm - supported/valid algorithms are: `md5`, `sha256`, and `sha1`.
+ The client hash for each chunk must equal the storage provider hash for the same chunk, or an upload error is reported.
+ The client reported file size (bytes) must equal the storage provider reported file size, or an upload error is reported.
+ If there are no errors, the `upload_status.completed_on` is set to the current timestamp.
+ When completing a non-chunked upload, the hash.algorithm must work with the upload's storage provider, which is currently md5 for all existing storage providers.

**Response messages:**
* 200: Success
* 400: IntegrityException: reported file size or chunk hashes do not match that computed by StorageProvider
* 401: Unauthorized
* 404: Upload does not exist
* 500: Unexpected StorageProviderException experienced

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Request

        {
            "hash": {
                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                "algorithm": "md5"
            }
        }

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hashes": [
                {
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                    "algorithm": "md5",
                    "audit": { }
                }
            ],
            "chunks": [
                {
                    "number": 1,
                    "size": 5024000,
                    "hash": {
                        "value": "jw23df2207d99a74fbe169e3eba035e633b65d88",
                        "algorithm": "md5"
                    }
                },
                {
                    "number": 2,
                    "size": 5024000,
                    "hash": {
                        "value": "ry23df2207d99a74fbe169e3eba035e633b65dkq",
                        "algorithm": "md5"
                    }
                }
            ],
            "storage_provider": {
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                "name": "duke_oit_swift",
                "description": "Duke OIT Storage"
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": "2015-07-10T13:00:00Z",
                "purged_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Report upload hash [PUT /uploads/{id}/hashes]
Report a hash (fingerprint) for the uploaded file.
>**Permission:** update_file
- - - - -

>**Properties**
- - - - -
+ **value (string, required)** - The entire file hash (computed by client).
+ **algorithm (string, required)** - The algorithm used by client to compute entire file hash (i.e. md5, sha256, sha1, etc.).

>**Rules**
- - - - -
+ The reported `value` must be a valid algorithm - supported/valid algorithms are: `md5`, `sha256`, and `sha1`.
+ The upload must be in a completed state (i.e. `upload_status.completed_on`).

**Response messages:**
* 200: Success
* 400: Validation Error
* 401: Unauthorized
* 404: Upload does not exist
* 500: Unexpected StorageProviderException experienced

+ Parameters
    + id (string, required, `666be35a-98e0-4c2e-9a17-7bc009f9bb23`) ... The unique `id` of the upload.

+ Request

        {
            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
            "algorithm": "md5"
        }

+ Response 200 (application/json)

        {
            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
            "project": {"id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"},
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "content_type": "application/octet-stream",
            "size": 30024000,
            "hashes": [
                {
                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                    "algorithm": "md5",
                    "audit": { }
                }
            ],
            "chunks": [
                {
                    "number": 1,
                    "size": 5024000,
                    "hash": {
                        "value": "jw23df2207d99a74fbe169e3eba035e633b65d88",
                        "algorithm": "md5"
                    }
                },
                {
                    "number": 2,
                    "size": 5024000,
                    "hash": {
                        "value": "ry23df2207d99a74fbe169e3eba035e633b65dkq",
                        "algorithm": "md5"
                    }
                }
            ],
            "storage_provider": {
                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                "name": "duke_oit_swift",
                "description": "Duke OIT Storage"
            },
            "status": {
                "initiated_on": "2015-07-10T13:00:00Z",
                "completed_on": "2015-07-10T13:00:00Z",
                "purged_on": null,
                "error_on": null,
                "error_message": null
            },
            "audit": { }
        }

## Group Files
A file resource represents a virtual container for a physical data file (i.e. `upload`) that is persisted in a storage backend supported by Duke Data Services (e.g. Duke OIT Swift Service).

## Files collection [/files]

### Create file [POST]
Creates a file metadata resource; the client is responsible for the creation of this resource after confirming the associated physical file has been successfully uploaded to a storage provider (see `Uploads` actions).

*Note: A file is a versionable resource; this action creates the initial version of a file.  New file versions can be created (uploaded) via the* `/file/{id}/update` *action.  Versions can be managed via the* **File Versions** *actions.*

>**Permission:** create_file
- - - - -

>**Properties**
- - - - -
+ **parent.kind (string, required)** - The kind of parent container for the file; this can be a project (i.e. `dds-project`) or a folder (i.e. `dds-folder`).
+ **parent.id (string, required)** - The unique id of the parent.
+ **upload.id (string, required)** - The unique id for an upload that completed successfully.
+ **label (string, optional)** - An optional version label for the file.

>**Rules**
- - - - -
+ The current user must be the user who uploaded the file.
+ The parent object (`dds-project` or `dds-folder`) must be associated with the same project that the upload is associated with.
+ The upload must be in a completed state (i.e. `upload.completed_on != null`).

**Response messages:**
* 200: This will never happen
* 201: Successfully Created
* 400: Upload has an IntegrityException
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Project Does not Exist, Parent Folder or Upload does not exist in Project

+ Request (application/json)

        {
            "parent": {
                "kind": "dds-folder",
                "id": "ad9115b8-1e4a-4399-b606-56622eb462e1"
            },
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23"
            },
            "label": "Initial raw data from device"
        }

+ Response 201 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": {
                "kind": "dds-folder",
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy"
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": {
                "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1", "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy",
                    "name": "Sequencing Core"
                }
            ],
            "is_deleted": false,
            "current_version": {
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                "version": 1,
                "label": "Initial raw data from device",
                "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hashes": [
                        {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                            "algorithm": "md5",
                            "audit": { }
                        }
                    ],
                    "storage_provider": {
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                        "name": "duke_oit_swift",
                        "description": "Duke OIT Storage"
                    }
                }
            },
            "audit": { }
        }

## File instance [/files/{id}]
+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

### View file [GET]
>**Permission:** view_project
- - - - -
**Response messages:**
* 200: Success
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": {
                "kind": "dds-folder",
                "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy"
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": {
                "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy",
                    "name": "Sequencing Core"
                }
            ],
            "is_deleted": false,
            "current_version": {
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                "version": 1,
                "label": "Initial raw data from device",
                "upload": {
                    "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                    "size": 30024000,
                    "hashes": [
                        {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                            "algorithm": "md5",
                            "audit": { }
                        }
                    ],
                    "storage_provider": {
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                        "name": "duke_oit_swift",
                        "description": "Duke OIT Storage"
                    }
                }
            },
            "audit": { }
        }

### Update file [PUT]
Updates one or more file resource properties; if this action includes an `upload.id` property in the request, a new file version is created and associated to the file - this becomes the `current_version` of the file (see **File Versions**).

*Note: Only the* `upload` *and* `label` *properties for the file are versioned; all other file properties and relationships, such as name, tags, metadata properties, etc. are not versioned, and they will not vary from version to version.*

>**Permission:** update_file
- - - - -

>**Properties**
- - - - -
+ **upload.id (string, optional)** - An optional unique id for an upload that completed successfully; if specified, a new file version is created.
+ **label (string, optional)** - An optional version label for the file.

>**Rules**
- - - - -
+ The current user must be the user who uploaded the file.
+ The upload must be in a completed state (i.e. `upload.completed_on != null`).
+ Only `upload.id`, `label` properties can be updated via this action.
+ New versions are assigned the next sequential `version` number. (see **File Versions**)

**Response messages:**
* 200: Success
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Request (application/json)

        {
            "upload": {
                "id": "422f8778-a62c-4918-8b1b-f398a041345a"
            },
            "label": "Post pairwise sequence alignment"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": {
                "kind": "dds-folder",
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e"
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata",
            "project": {
                "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e",
                    "name": "Sequencing Archive"
                }
            ],
            "is_deleted": false,
            "current_version": {
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                "version": 2,
                "label": "Post pairwise sequence alignment",
                "upload": {
                    "id": "56a0431f-5a89-455a-aa2d-996ae9226601",
                    "size": 30024000,
                    "hashes": [
                        {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                            "algorithm": "md5",
                            "audit": { }
                        }
                    ],
                    "storage_provider": {
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                        "name": "duke_oit_swift",
                        "description": "Duke OIT Storage"
                    }
                }
            },
            "audit": { }
        }

### Delete file [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ This operation places the specified file, and all of its file_versions, into
the trash bin. If the file is inside a folder when it is deleted, it will be placed
into the root of the project trash bin.

**Response messages:**
* 200: This will never happen
* 204: Successfully Deleted
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Response 204

## Get file download URL [GET /files/{id}/url]
Generates and returns a storage provider specific pre-signed URL that client can use to download file; the download URL is for the current version of the specified file.

*Note: This action returns URL to download current version of the file - to download a prior version see* **File Versions** *actions.*

>**Permission:** download_file
- - - - -
**Response messages:**
* 200: Success
* 301: Redirect to file
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

+ Response 200 (application/json)

        {
            "http_verb": "GET",
            "host": "swift.oit.duke.edu",
            "url": "/v1/AUTH_dev/418da9e8-7d01-4761-982c-811d95ac6653/0618a1bc-5042-48d2-af66-ed171354bf6b?temp_url_sig=93b5c5a2c920f0d4962c391d932e4054ec76916c&temp_url_expires=1448918738",
            "http_headers": [ ]
        }

## Move file [PUT /files/{id}/move]
Move file to a different parent project or parent folder.

>**Permission:** create_file
- - - - -
**Response messages:**
* 200: Success
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist, Parent does not exist in Project

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

+ Request (application/json)

        {
            "parent": {
                "kind": "dds-folder",
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e"
            }
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": {
                "kind": "dds-folder",
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e"
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
            "project": {
                "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e",
                    "name": "Sequencing Archive"
                }
            ],
            "is_deleted": false,
            "current_version": {
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                "version": 2,
                "label": "Post pairwise sequence alignment",
                "upload": {
                    "id": "56a0431f-5a89-455a-aa2d-996ae9226601",
                    "size": 30024000,
                    "hashes": [
                        {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                            "algorithm": "md5",
                            "audit": { }
                        }
                    ],
                    "storage_provider": {
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                        "name": "duke_oit_swift",
                        "description": "Duke OIT Storage"
                    }
                }
            },
            "audit": { }
        }

## Rename file [PUT /files/{id}/rename]
Change the name of a file.

>**Permission:** update_file
- - - - -
**Response messages:**
* 200: Success
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.


+ Request (application/json)

        {
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file",
            "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
            "parent": {
                "kind": "dds-folder",
                "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e"
            },
            "name": "RSEM_Normalized_PI3K_RNASeq_Matrix_V2.Rdata",
            "project": {
                "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"
            },
            "ancestors": [
                {
                    "kind": "dds-project",
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                    "name": "Knockout Mouse Project (KOMP)"
                },
                {
                    "kind": "dds-folder",
                    "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e",
                    "name": "Sequencing Archive"
                }
            ],
            "is_deleted": false,
            "current_version": {
                "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                "version": 2,
                "label": "Post pairwise sequence alignment",
                "upload": {
                    "id": "56a0431f-5a89-455a-aa2d-996ae9226601",
                    "size": 30024000,
                    "hashes": [
                        {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                            "algorithm": "md5",
                            "audit": { }
                        }
                    ],
                    "storage_provider": {
                        "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                        "name": "duke_oit_swift",
                        "description": "Duke OIT Storage"
                    }
                }
            },
            "audit": { }
        }

## Project Files collection [/projects/{id}/files]
+ Parameters
    + id (required, string, `d5ae02a4-b9e6-473d-87c4-66f4c881ae7a`) ... Globally unique `id` of the project.

### List files [GET]
This action can be used to list all files in a project.

>**Permission:** download_file
- - - - -

>**Rules**
- - - - -
+ Files that have been deleted (i.e. `"is_deleted": true`) are not included.

**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Project does not exist

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "ancestors": [
                        {
                            "kind": "dds-project",
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                            "name": "Knockout Mouse Project (KOMP)"
                        },
                        {
                            "kind": "dds-folder",
                            "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e",
                            "name": "Sequencing Archive"
                        }
                    ],
                    "size": 30024000,
                    "hashes": [
                        {
                            "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                            "algorithm": "md5"
                        }
                    ],
                    "file_url": {
                        "http_verb": "GET",
                        "host": "https://swift.oit.duke.edu",
                        "url": "/v1/AUTH_dev/418da9e8-7d01-4761-982c-811d95ac6653/0618a1bc-5042-48d2-af66-ed171354bf6b?temp_url_sig=93b5c5a2c920f0d4962c391d932e4054ec76916c&temp_url_expires=1448918738&filename=RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                        "http_headers": [ ]
                    }
                }
            ]
        }

## Group File Versions
The actions herein are used to interact with prior versions of a file resource.

*Note: Only the* `upload` *and* `label` *properties for the file are versioned; all other file properties and relationships, such as name, tags, etc. are not versioned, and they will not vary from version to version.*

## File Versions collection [/files/{id}/versions]
+ Parameters
    + id (string, required, `777be35a-98e0-4c2e-9a17-7bc009f9b111`) ... The unique `id` of the file.

### List file versions [GET]
This action can be used to list all prior versions of a file, including the current version.

>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ File versions that have been deleted (i.e. `"is_deleted": true`) are included in this listing, but are immutable.

**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-file-version",
                    "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                    "file": {
                        "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                        "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                        "project": {
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
                        }
                    },
                    "version": 1,
                    "label": "Initial raw data from device",
                    "is_deleted": false,
                    "upload": {
                        "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                        "size": 30024000,
                        "hashes": [
                            {
                                "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                                "algorithm": "md5",
                                "audit": { }
                            }
                        ],
                        "storage_provider": {
                            "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                            "name": "duke_oit_swift",
                            "description": "Duke OIT Storage"
                        }
                    },
                    "audit": { }
                }
            ]
        }

## File Version instance [/file_versions/{id}]
+ Parameters
    + id (string, required, `89ef1e77-1a0b-40a8-aaca-260d13987f2b`) ... The unique `id` of the file version.

### View file version [GET]
>**Permission** view_project
- - - - -
**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Response 200 (application/json)

        {
            "kind": "dds-file-version",
            "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
            "file": {
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "project": {
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
                }
            },
            "version": 1,
            "label": "Initial raw data from device",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hashes": [
                    {
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                        "algorithm": "md5",
                        "audit": { }
                    }
                ],
                "storage_provider": {
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                    "name": "duke_oit_swift",
                    "description": "Duke OIT Storage"
                }
            },
            "audit": { }
        }

### Update file version [PUT]
>**Permission:** update_file
- - - - -

>**Rules**
- - - - -
+ Only the `label` property for a file version can be updated via this action.

**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File does not exist

+ Request (application/json)

        {
            "label": "Post pairwise sequence alignment (piecewise)"
        }

+ Response 200 (application/json)

        {
            "kind": "dds-file-version",
            "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
            "file": {
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "project": {
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
                }
            },
            "version": 1,
            "label": "Post pairwise sequence alignment (piecewise)",
            "is_deleted": false,
            "upload": {
                "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                "size": 30024000,
                "hashes": [
                    {
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                        "algorithm": "md5",
                        "audit": { }
                    }
                ],
                "storage_provider": {
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                    "name": "duke_oit_swift",
                    "description": "Duke OIT Storage"
                }
            },
            "audit": { }
        }

### Delete file version [DELETE]
>**Permission:** delete_file
- - - - -

>**Rules**
- - - - -
+ The current file version cannot be deleted.

**Response messages:**
* 200: This will never happen
* 204: Successfully Deleted
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File version does not exist

+ Response 204

## Get file version download URL [GET /file_versions/{id}/url]
Generates and returns a storage provider specific pre-signed URL that client can use to download the file version.
>**Permission:** download_file
- - - - -
**Response messages:**
* 200: Success
* 301: Redirect to file version
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File version does not exist

+ Parameters
    + id (string, required, `89ef1e77-1a0b-40a8-aaca-260d13987f2b`) ... The unique `id` of the file version.

+ Response 200 (application/json)

        {
            "http_verb": "GET",
            "host": "swift.oit.duke.edu",
            "url": "/v1/AUTH_dev/418da9e8-7d01-4761-982c-811d95ac6653/0618a1bc-5042-48d2-af66-ed171354bf6b?temp_url_sig=93b5c5a2c920f0d4962c391d932e4054ec76916c&temp_url_expires=1448918738",
            "http_headers": [ ]
        }

## Promote file version [POST /file_versions/{id}/current]
This action can be used to promote a prior file version to the current version. This actually mints a copy of the specified version and puts it on the top of the version stack.
>**Permission:** update_file
- - - - -

>**Rules**
- - - - -
+ The current file version cannot be promoted.

**Response messages:**
* 201: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: File version does not exist

+ Parameters
    + id (string, required, `89ef1e77-1a0b-40a8-aaca-260d13987f2b`) ... The unique `id` of the file version to be promoted to the current version.

+ Response 201 (application/json)

        {
            "kind": "dds-file-version",
            "id": "66ed147e-2312-4974-999a-58ec77230182",
            "file": {
                "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                "project": {
                    "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
                }
            },
            "version": 3,
            "label": "Post pairwise sequence alignment (piecewise)",
            "is_deleted": false,
            "upload": {
                "id": "56a0431f-5a89-455a-aa2d-996ae9226601",
                "size": 30024000,
                "hashes": [
                    {
                        "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                        "algorithm": "md5",
                        "audit": { }
                    }
                ],
                "storage_provider": {
                    "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                    "name": "duke_oit_swift",
                    "description": "Duke OIT Storage"
                }
            },
            "audit": { }
        }

## Group Search Children
Search for the children (i.e. folders and files) of a project or folder.

## Search project children [GET /projects/{id}/children{?name_contains,kind}]
>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the project unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the project hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Project does not exist

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the project.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": {
                        "kind": "dds-folder",
                        "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy"
                    },
                    "name": "Raw Data",
                    "project": {
                        "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
                    },
                    "ancestors": [
                        {
                            "kind": "dds-project",
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                            "name": "Knockout Mouse Project (KOMP)"
                        },
                        {
                            "kind": "dds-folder",
                            "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy",
                            "name": "Sequencing Core"
                        }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": {
                        "kind": "dds-folder",
                        "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e"
                    },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": {
                        "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"
                    },
                    "ancestors": [
                        {
                            "kind": "dds-project",
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                            "name": "Knockout Mouse Project (KOMP)"
                        },
                        {
                            "kind": "dds-folder",
                            "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e",
                            "name": "Sequencing Archive"
                        }
                    ],
                    "is_deleted": false,
                    "current_version": {
                        "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                        "version": 1,
                        "label": "Initial raw data from device",
                        "upload": {
                            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                            "size": 30024000,
                            "hashes": [
                                {
                                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                                    "algorithm": "md5",
                                    "audit": { }
                                }
                            ],
                            "storage_provider": {
                                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                                "name": "duke_oit_swift",
                                "description": "Duke OIT Storage"
                            }
                        }
                    },
                    "audit": { }
                }
            ]
        }

## Search folder children [GET /folders/{id}/children{?name_contains,kind}]
>**Permission:** view_project
- - - - -

>**Rules**
- - - - -
+ Searches the immediate children of the folder unless the `name_contains` parameter is specified; when specified, the `name_contains` parameter invokes a recursive search of the folder hierarchy.
+ Folders/files that have been deleted (i.e. `"is_deleted": true`) are not included in search.

**Response messages:**
* 200: Valid API Token in 'Authorization' Header
* 401: Missing, Expired, or Invalid API Token in 'Authorization' Header
* 404: Folder does not exist

+ Parameters
    + id (string, required, `ca29f7df-33ca-46dd-a015-92c46fdb6fd1`) ... The unique `id` of the folder.
    + name_contains (string, optional, `Sequencing`) ... Returns children where their `name` contains the specified string.
    + kind (string, optional, `dds-folder`) ... Returns children of the specified kind; supported kinds are `dds-folder` and `dds-file`.

+ Response 200 (application/json)

        {
            "results": [
                 {
                    "kind": "dds-folder",
                    "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a",
                    "parent": {
                        "kind": "dds-folder",
                        "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy"
                    },
                    "name": "Raw Data",
                    "project": {
                        "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1"
                    },
                    "ancestors": [
                        {
                            "kind": "dds-project",
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                            "name": "Knockout Mouse Project (KOMP)"
                        },
                        {
                            "kind": "dds-folder",
                            "id": "552be8c5-209d-4e3b-afaf-cb66686ffbyy",
                            "name": "Sequencing Core"
                        }
                    ],
                    "is_deleted": false,
                    "audit": { }
                },
                {
                    "kind": "dds-file",
                    "id": "777be35a-98e0-4c2e-9a17-7bc009f9b111",
                    "parent": {
                        "kind": "dds-folder",
                        "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e"
                    },
                    "name": "RSEM_Normalized_PI3K_RNASeq_Matrix.Rdata",
                    "project": {
                        "id": "d5ae02a4-b9e6-473d-87c4-66f4c881ae7a"
                    },
                    "ancestors": [
                        {
                            "kind": "dds-project",
                            "id": "ca29f7df-33ca-46dd-a015-92c46fdb6fd1",
                            "name": "Knockout Mouse Project (KOMP)"
                        },
                        {
                            "kind": "dds-folder",
                            "id": "2b91658a-2b0f-4ac6-83f5-287391610d0e",
                            "name": "Sequencing Archive"
                        }
                    ],
                    "is_deleted": false,
                    "current_version": {
                        "id": "89ef1e77-1a0b-40a8-aaca-260d13987f2b",
                        "version": 1,
                        "label": "Initial raw data from device",
                        "upload": {
                            "id": "666be35a-98e0-4c2e-9a17-7bc009f9bb23",
                            "size": 30024000,
                            "hashes": [
                                {
                                    "value": "cf23df2207d99a74fbe169e3eba035e633b65d94",
                                    "algorithm": "md5",
                                    "audit": { }
                                }
                            ],
                            "storage_provider": {
                                "id": "g5579f73-0558-4f96-afc7-9d251e65bv33",
                                "name": "duke_oit_swift",
                                "description": "Duke OIT Storage"
                            }
                        }
                    },
                    "audit": { }
                }
            ]
        }
