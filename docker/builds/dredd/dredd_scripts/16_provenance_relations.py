import dredd_hooks as hooks
import imp
import os
import json
import uuid
import pprint
#if you want to import another module for use in this workflow
utils = imp.load_source("utils",os.path.join(os.getcwd(),'utils.py'))

###############################################################################
###############################################################################
#           Provenance Relations
###############################################################################
###############################################################################
@hooks.before("Provenance Relations > Relations collection > Create used relation")
@hooks.before("Provenance Relations > Relations collection > Create was generated by relation")
def used_by16_1(transaction):
    global file_version_id
    name = str(uuid.uuid4())
    description = "Created by dredd under: Projects > Projects collection > Create project"
    neww = utils.create_a_project(name,description)
    proj_id = neww['id']
    upload_id = utils.upload_a_file(proj_id,unique=True)
    file_id = utils.create_a_file(proj_id,upload_id)
    file_version_id = utils.get_current_file_version(file_id)
    activity_id = utils.create_provenance_activity()
    requestBody = json.loads(transaction[u'request'][u'body'])
    requestBody['entity']['id'] = file_version_id
    requestBody['activity']['id'] = activity_id
    transaction[u'request'][u'body'] = json.dumps(requestBody)
@hooks.before("Provenance Relations > Relations collection > Create was derived from relation")
def derived16_1(transaction):
    name = str(uuid.uuid4())
    description = "Created by dredd under: Projects > Projects collection > Create project"
    neww = utils.create_a_project(name,description)
    proj_id = neww['id']
    upload_id = utils.upload_a_file(proj_id,unique=True)
    file_id = utils.create_a_file(proj_id,upload_id)
    file_version_id2 = utils.get_current_file_version(file_id)
    requestBody = json.loads(transaction[u'request'][u'body'])
    requestBody['generated_entity']['id'] = file_version_id
    requestBody['used_entity']['id'] = file_version_id2
    transaction[u'request'][u'body'] = json.dumps(requestBody)
@hooks.after("Provenance Relations > Relations collection > Create was derived from relation")
def get_prov_rel_id(transaction):
    global prov_rel_id
    requestBody = json.loads(transaction[u'real'][u'body'])
    prov_rel_id = str(requestBody[u'id'])
@hooks.before("Provenance Relations > Relations collection > Create was invalidated by relation")
def invalidate16_1(transaction):
    name = str(uuid.uuid4())
    description = "Created by dredd under: Projects > Projects collection > Create project"
    neww = utils.create_a_project(name,description)
    proj_id = neww['id']
    upload_id = utils.upload_a_file(proj_id,unique=True)
    file_id = utils.create_a_file(proj_id,upload_id)
    file_version_id2 = utils.get_current_file_version(file_id)
    utils.delete_a_file(file_id)
    activity_id = utils.create_provenance_activity()
    requestBody = json.loads(transaction[u'request'][u'body'])
    requestBody['entity']['id'] = file_version_id2
    requestBody['activity']['id'] = activity_id
    transaction[u'request'][u'body'] = json.dumps(requestBody)
@hooks.before("Provenance Relations > Relations collection > List provenance relations")
def change_activity_id16_2(transaction):
    print(transaction['name'])
    activity_id = utils.create_provenance_activity()
    url = transaction['fullPath']
    transaction['fullPath'] = str(url).replace('a1ff02a4-b7e9-999d-87x1-66f4c881jka1',activity_id)
@hooks.before("Provenance Relations > Relation instance > View relation")
@hooks.before("Provenance Relations > Relation instance > Delete relation")
def changeid216_2(transaction):
    url = transaction['fullPath']
    transaction['fullPath'] = str(url).replace('ac242faf-fba0-4293-a949-0b82ae7ba810',prov_rel_id)
@hooks.before("Search Provenance > Search Provenance > Search Provenance")
# def skippy16_3(transaction):
#     activity_id = utils.create_provenance_activity()
#     requestBody = json.loads(transaction[u'request'][u'body'])
#     requestBody['start_node']['id'] = activity_id
#     transaction[u'request'][u'body'] = json.dumps(requestBody)
@hooks.before("Search Provenance > NOT_IMPLEMENTED_NEW Search Provenance wasGeneratedBy > NOT_IMPLEMENTED_NEW Search Provenance wasGeneratedBy")
def skipy16_32(transaction):
    utils.skip_this_endpoint(transaction)
