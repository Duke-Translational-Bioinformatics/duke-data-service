{
  "name": "mdurl",
  "version": "1.0.1",
  "description": "URL utilities for markdown-it",
  "repository": {
    "type": "git",
    "url": "git://github.com/markdown-it/mdurl"
  },
  "license": "MIT",
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "mocha": "*",
    "eslint": "0.13.0",
    "eslint-plugin-nodeca": "^1.0.0",
    "istanbul": "*"
  },
  "readme": "# mdurl\n\n[![Build Status](https://img.shields.io/travis/markdown-it/mdurl/master.svg?style=flat)](https://travis-ci.org/markdown-it/mdurl)\n[![NPM version](https://img.shields.io/npm/v/mdurl.svg?style=flat)](https://www.npmjs.org/package/mdurl)\n\n> URL utilities for [markdown-it](https://github.com/markdown-it/markdown-it) parser.\n\n\n## API\n\n### .encode(str [, exclude, keepEncoded]) -> String\n\nPercent-encode a string, avoiding double encoding. Don't touch `/a-zA-Z0-9/` +\nexcluded chars + `/%[a-fA-F0-9]{2}/` (if not disabled). Broken surrorates are\nreplaced with `U+FFFD`.\n\nParams:\n\n- __str__ - input string.\n- __exclude__ - optional, `;/?:@&=+$,-_.!~*'()#`. Additional chars to keep intact\n  (except `/a-zA-Z0-9/`).\n- __keepEncoded__ - optional, `true`. By default it skips already encoded sequences\n  (`/%[a-fA-F0-9]{2}/`). If set to `false`, `%` will be encoded.\n\n\n### encode.defaultChars, encode.componentChars\n\nYou can use these constants as second argument to `encode` function.\n\n - `encode.defaultChars` is the same exclude set as in the standard `encodeURI()` function\n - `encode.componentChars` is the same exclude set as in the `encodeURIComponent()` function\n\nFor example, `encode('something', encode.componentChars, true)` is roughly the equivalent of\nthe `encodeURIComponent()` function (except `encode()` doesn't throw).\n\n\n### .decode(str [, exclude]) -> String\n\nDecode percent-encoded string. Invalid percent-encoded sequences (e.g. `%2G`)\nare left as is. Invalid UTF-8 characters are replaced with `U+FFFD`.\n\n\nParams:\n\n- __str__ - input string.\n- __exclude__ - set of characters to leave encoded, optional, `;/?:@&=+$,#`.\n\n\n### decode.defaultChars, decode.componentChars\n\nYou can use these constants as second argument to `decode` function.\n\n - `decode.defaultChars` is the same exclude set as in the standard `decodeURI()` function\n - `decode.componentChars` is the same exclude set as in the `decodeURIComponent()` function\n\nFor example, `decode('something', decode.defaultChars)` has the same behavior as\n`decodeURI('something')` on a correctly encoded input.\n\n\n### .parse(url, slashesDenoteHost) -> urlObs\n\nParse url string. Similar to node's [url.parse](http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost), but without any\nnormalizations and query string parse.\n\n - __url__ - input url (string)\n - __slashesDenoteHost__ - if url starts with `//`, expect a hostname after it. Optional, `false`.\n\nResult (hash):\n\n- protocol\n- slashes\n- auth\n- port\n- hostname\n- hash\n- search\n- pathname\n\nDifference with node's `url`:\n\n1. No leading slash in paths, e.g. in `url.parse('http://foo?bar')` pathname is\n   ``, not `/`\n2. Backslashes are not replaced with slashes, so `http:\\\\example.org\\` is\n   treated like a relative path\n3. Trailing colon is treated like a part of the path, i.e. in\n   `http://example.org:foo` pathname is `:foo`\n4. Nothing is URL-encoded in the resulting object, (in joyent/node some chars\n   in auth and paths are encoded)\n5. `url.parse()` does not have `parseQueryString` argument\n6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n   which can be constructed using other parts of the url.\n\n\n### .format(urlObject)\n\nFormat an object previously obtained with `.parse()` function. Similar to node's\n[url.format](http://nodejs.org/api/url.html#url_url_format_urlobj).\n\n\n## License\n\n[MIT](https://github.com/markdown-it/mdurl/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/markdown-it/mdurl/issues"
  },
  "_id": "mdurl@1.0.1",
  "_from": "mdurl@~1.0.1"
}
