// Generated by CoffeeScript 1.9.2
var JsonExample, JsonSchema, SchemaV4Generator, SchemaV4Properties, errors, jsonPointer, ref, type,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

errors = require('../errors');

JsonSchema = require('./json-schema').JsonSchema;

jsonPointer = require('json-pointer');

type = require('is-type');

ref = require('../utils/schema-v4-generator'), SchemaV4Generator = ref.SchemaV4Generator, SchemaV4Properties = ref.SchemaV4Properties;

JsonExample = (function(superClass) {
  extend(JsonExample, superClass);

  function JsonExample(real, expected) {
    var outError;
    this.real = real;
    this.expected = expected;
    if (!type.string(this.real)) {
      outError = new errors.MalformedDataError('JsonExample validator: provided real data is not string');
      outError['data'] = this.real;
      throw outError;
    }
    if (!type.string(this.expected)) {
      outError = new errors.MalformedDataError('JsonExample validator: provided expected data is not string');
      outError['data'] = this.expected;
      throw outError;
    }
    this.schema = this.getSchema(this.expected);
    JsonExample.__super__.constructor.call(this, this.real, this.schema);
  }

  JsonExample.prototype.getSchema = function(data) {
    var properties, schemaGenerator;
    properties = new SchemaV4Properties({});
    properties.set({
      keysStrict: false,
      valuesStrict: false,
      typesStrict: false
    });
    schemaGenerator = new SchemaV4Generator({
      json: data,
      properties: properties
    });
    return schemaGenerator.generate();
  };

  return JsonExample;

})(JsonSchema);

module.exports = {
  JsonExample: JsonExample
};
