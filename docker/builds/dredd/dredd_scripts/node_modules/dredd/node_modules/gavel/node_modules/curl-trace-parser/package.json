{
  "name": "curl-trace-parser",
  "version": "0.0.8",
  "description": "Parse curl --trace option output to raw HTTP message",
  "main": "lib/parser.js",
  "scripts": {
    "test": "scripts/test",
    "prepublish": "scripts/prepublish"
  },
  "bin": {
    "curl-trace-parser": "bin/curl-trace-parser"
  },
  "dependencies": {
    "commander": "1.2.0",
    "api-blueprint-http-formatter": "0.0.1",
    "http-string-parser": "0.0.4"
  },
  "devDependencies": {
    "coffee-script": "1.6.3",
    "mocha": "1.11.0",
    "chai": "1.7.1"
  },
  "keywords": [
    "curl",
    "parse",
    "trace",
    "raw",
    "http",
    "message",
    "request",
    "repsponse",
    "api",
    "blueprint",
    "apiary"
  ],
  "author": {
    "name": "Adam Kliment",
    "email": "adam@apiary.io"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/apiaryio/curl-trace-parser.git"
  },
  "homepage": "https://github.com/apiaryio/curl-trace-parser",
  "readme": "# The `curl --trace` parser\n\n[![Build Status](https://travis-ci.org/apiaryio/curl-trace-parser.png)](https://travis-ci.org/apiaryio/curl-trace-parser)\n[![Dependency Status](https://david-dm.org/apiaryio/curl-trace-parser.png)](https://david-dm.org/apiaryio/curl-trace-parser)\n[![devDependency Status](https://david-dm.org/apiaryio/curl-trace-parser/dev-status.png)](https://david-dm.org/apiaryio/curl-trace-parser#info=devDependencies)\n\n\n## The story\n\nDid you know that you can record raw HTTP communication of [Curl command-line tool](http://curl.haxx.se/docs/manpage.html) with the `--trace` and `--trace-ascii` option? It's the only way I know to get raw HTTP communication without using the [`tcpdump`](http://www.tcpdump.org/) or [`wireshark`](http://www.wireshark.org/). \nFor example, this trick is very useful for the proper introspection into HTTP communication of an undocumented RESTful API.\n\nThe only glitch is that cURL `--trace` saves data in [its custom format][gist], far from human-friendly, saving chunks as they are being received and splitting them by packets. If you want a human readable form then this parser is what you need. Delivered as a Node.js package. \n\n[gist]: https://gist.github.com/netmilk/6048533\n\n## Usage\n\n```\n$ curl --trace - http://httpbin.org/ip | curl-trace-parser\n```\n\n## Sample API\n\nWe will be using this [sample API][apiarydoc] created with the [Apiary.io mock server](http://apiary.io) to demonstrate tracing an HTTP communication and the use of the cURL trace parser.\n\n[apiarydoc]: http://docs.curltraceparser.apiary.io/\n\n## Install the cURL trace parser\n\n```bash\n$ npm install -g curl-trace-parser\n```\n\n## Record your first trace file\n    \n```bash\n$ curl --trace tracefile --header \"Content-Type: application/json\" \\\n--request POST \\\n--data-binary \"{ \\\"product\\\":\\\"1AB23ORM\\\", \\\"quantity\\\": 2 }\" \\\n\"http://curltraceparser.apiary.io/shopping-cart\"\n```\n\nNote this cURL example is copied and pasted from [Apiary interactive API documentation][example].\n\n[example]: http://docs.curltraceparser.apiary.io/#get-%2Fshopping-cart\n\n## Examples\n\n### `--raw` format\n\nThe output is ASCII representation of a raw [HTTP message][message] with few modifications:\n\n- Request line begins with `> `\n- Response line begins with `< `\n- Request and Response is delimited by CR+LF\n- Both Request and Response are terminated by an extra trailing LF\n\nNote: This is little bit tricky because HTTP RFC does not have declared delimiter for Request and Response, for obvious reasons. \n\n```bash\n$ cat tracefile | curl-trace-parser --raw\n> POST /shopping-cart HTTP/1.1\n> User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\n> Host: curltraceparser.apiary.io\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 39\n>\n> { \"product\":\"1AB23ORM\", \"quantity\": 2 }\n\n< HTTP/1.1 201 Created\n< Content-Type: application/json\n< Date: Tue, 30 Jul 2013 11:32:30 GMT\n< X-Apiary-Ratelimit-Limit: 120\n< X-Apiary-Ratelimit-Remaining: 119\n< Content-Length: 50\n< Connection: keep-alive\n<\n< { \"status\": \"created\", \"url\": \"/shopping-cart/2\" }\n```\n\n### `--blueprint` format\n\nThe output is HTTP Request and Response in the [API blueprint format](http://apiblueprint.org) which is the superset of markdown.\n\n```\n$ cat tracefile | ./bin/curl-trace-parser --blueprint\n# POST /shopping-cart\n+ Request\n    + Headers\n\n            User-Agent:curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\n            Host:curltraceparser.apiary.io\n            Accept:*/*\n            Content-Type:application/json\n            Content-Length:39\n\n    + Body\n\n            { \"product\":\"1AB23ORM\", \"quantity\": 2 }\n\n+ Response 201\n    + Headers\n\n            Content-Type:application/json\n            Date:Tue, 30 Jul 2013 11:32:30 GMT\n            X-Apiary-Ratelimit-Limit:120\n            X-Apiary-Ratelimit-Remaining:119\n            Content-Length:50\n            Connection:keep-alive\n\n    + Body\n\n            { \"status\": \"created\", \"url\": \"/shopping-cart/2\" }\n\n```\n\nNote: This format does not expect any CR+LF in body\n\n### Parse the trace to raw HTTP file using Node.JS\n\n```javascript\nvar fs = require('fs');\nvar parser = require('curl-trace-parser');\nfs.readFile('./tracefile', 'utf8', function (err,trace) {\n  console.log(parser.parse(trace));\n})\n```\n\n## Output format reverse parser \n\n```javascript\nvar fs = require('fs');\nvar parser = require('curl-trace-parser');\nfs.readFile('./tracefile', 'utf8', function (err,trace) {\n  console.log(parser.parseBack(trace));\n})\n```\n\n## API Reference\n\n`parse(traceString)` - parse string with trace to object with raw request and response\n\n`parseToString(traceString)` - parse string with trace to [output format]\n\n`parseBack(outputString)` - parse string with [output format] back to object with raw request an resposne \n\n\n[output format]: https://github.com/apiaryio/curl-trace-parser#output-format\n[message]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apiaryio/curl-trace-parser/issues"
  },
  "_id": "curl-trace-parser@0.0.8",
  "_from": "curl-trace-parser@0.0.8"
}
