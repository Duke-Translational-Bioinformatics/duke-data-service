// Generated by CoffeeScript 1.9.2
var ExpectedHttpResponse, HttpResponse, Validatable, clone,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Validatable = require('../mixins/validatable-http-message').Validatable;

clone = require('clone');

HttpResponse = (function(superClass) {
  extend(HttpResponse, superClass);

  HttpResponse.prototype.resourcesKeys = ['statusCode', 'statusMessage', 'headers', 'body', 'expected'];

  function HttpResponse(resources) {
    var i, len, ref, resourceKey;
    if (resources == null) {
      resources = {};
    }
    ref = this.resourcesKeys;
    for (i = 0, len = ref.length; i < len; i++) {
      resourceKey = ref[i];
      this[resourceKey] = clone(resources[resourceKey], false);
    }
    HttpResponse.__super__.constructor.call(this);
  }

  return HttpResponse;

})(Validatable);

ExpectedHttpResponse = (function() {
  ExpectedHttpResponse.prototype.resourcesKeys = ['statusCode', 'statusMessage', 'headers', 'body', 'headersSchema', 'bodySchema'];

  function ExpectedHttpResponse(resources) {
    var i, len, ref, resourceKey;
    if (resources == null) {
      resources = {};
    }
    ref = this.resourcesKeys;
    for (i = 0, len = ref.length; i < len; i++) {
      resourceKey = ref[i];
      this[resourceKey] = clone(resources[resourceKey], false);
    }
  }

  return ExpectedHttpResponse;

})();

module.exports = {
  HttpResponse: HttpResponse,
  ExpectedHttpResponse: ExpectedHttpResponse
};
