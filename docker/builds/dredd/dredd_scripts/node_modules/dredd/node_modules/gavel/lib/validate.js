// Generated by CoffeeScript 1.9.2
var ExpectedHttpRequest, ExpectedHttpResponse, HttpRequest, HttpResponse, errors, isValid, isValidatable, proxy, ref, ref1, validate;

errors = require('./errors');

ref = require('./model/http-request'), HttpRequest = ref.HttpRequest, ExpectedHttpRequest = ref.ExpectedHttpRequest;

ref1 = require('./model/http-response'), HttpResponse = ref1.HttpResponse, ExpectedHttpResponse = ref1.ExpectedHttpResponse;

proxy = function(validatableObject, method, cb) {
  var error, result;
  try {
    result = validatableObject[method]();
  } catch (_error) {
    error = _error;
    return cb(error, null);
  }
  return cb(null, result);
};

isValid = function(real, expected, type, cb) {
  var validatableObject;
  switch (type) {
    case 'request':
      validatableObject = new HttpRequest(real);
      validatableObject['expected'] = new ExpectedHttpRequest(expected);
      break;
    case 'response':
      validatableObject = new HttpResponse(real);
      validatableObject['expected'] = new ExpectedHttpResponse(expected);
  }
  return proxy(validatableObject, 'isValid', cb);
};

isValidatable = function(real, expected, type, cb) {
  var validatableObject;
  switch (type) {
    case 'request':
      validatableObject = new HttpRequest(real);
      validatableObject['expected'] = new ExpectedHttpRequest(expected);
      break;
    case 'response':
      validatableObject = new HttpResponse(real);
      validatableObject['expected'] = new ExpectedHttpResponse(expected);
  }
  return proxy(validatableObject, 'isValidatable', cb);
};

validate = function(real, expected, type, cb) {
  var validatableObject;
  switch (type) {
    case 'request':
      validatableObject = new HttpRequest(real);
      validatableObject['expected'] = new ExpectedHttpRequest(expected);
      break;
    case 'response':
      validatableObject = new HttpResponse(real);
      validatableObject['expected'] = new ExpectedHttpResponse(expected);
  }
  return proxy(validatableObject, 'validate', cb);
};

module.exports = {
  validate: validate,
  isValid: isValid,
  isValidatable: isValidatable
};
