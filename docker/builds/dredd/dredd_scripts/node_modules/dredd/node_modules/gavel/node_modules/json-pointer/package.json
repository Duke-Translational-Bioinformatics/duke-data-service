{
  "name": "json-pointer",
  "description": "Some utilities for JSON pointers described by RFC 6901",
  "version": "0.3.1",
  "author": {
    "name": "Manuel Stofer",
    "email": "manuel@takimata.ch"
  },
  "license": "MIT",
  "dependencies": {
    "foreach": "^2.0.4"
  },
  "homepage": "https://github.com/manuelstofer/json-pointer",
  "repository": {
    "type": "git",
    "url": "git://github.com/manuelstofer/json-pointer.git"
  },
  "devDependencies": {
    "mocha": "^1.9.0",
    "chai": "^1.9.1"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "# json-pointer\n\n[![Build Status](https://travis-ci.org/manuelstofer/json-pointer.png)](https://travis-ci.org/manuelstofer/json-pointer)\n\nSome utilities for JSON pointers described by RFC 6901\n\nProvides some additional stuff i needed but is not included in [node-jsonpointer](https://github.com/janl/node-jsonpointer)\n\n\n## Installation\n\n[node.js](http://nodejs.org)\n\n```bash\n$ npm install json-pointer\n```\n\n[component](https://github.com/component/component)\n\n```bash\n$ component install manuelstofer/json-pointer\n```\n\n\n## API\n\n```Javascript\nvar pointer = require('json-pointer');\n```\n\n\n### .get(object, pointer)\n\nLooks up a JSON pointer in an object.\n\n```Javascript\nvar obj = {\n    example: {\n        bla: 'hello'\n    }\n};\npointer.get(obj, '/example/bla');\n```\n\n\n### .set(object, pointer, value)\n\nSets a new value on object at the location described by pointer.\n\n```Javascript\nvar obj = {};\npointer.set(obj, '/example/bla', 'hello');\n```\n\n\n### .remove(object, pointer)\n\nRemoves an attribute of object referenced by pointer\n\n```Javascript\nvar obj = {\n    example: 'hello'\n};\npointer.remove(obj, '/example');\n// obj -> {}\n```\n\n\n### .dict(object)\n\nCreates a dictionary object (pointer -> value).\n\n```Javascript\nvar obj = {\n    hello: {bla: 'example'}\n};\npointer.dict(obj);\n\n// Returns:\n// {\n//    '/hello/bla': 'example'\n// }\n```\n\n\n### .walk(object, iterator)\n\nJust like:\n\n```Javascript\neach(pointer.dict(obj), iterator);\n```\n\n\n### .has(object, pointer)\n\nTests if an object has a value for a JSON pointer.\n\n```Javascript\nvar obj = {\n    bla: 'hello'\n};\n\npointer.has(obj, '/bla');               // -> true\npointer.has(obj, '/non/existing');      // -> false\n```\n\n\n### .escape(str)\n\nEscapes a reference token.\n\n```Javascript\npointer.escape('hello~bla');            // -> 'hello~0bla'\npointer.escape('hello/bla');            // -> 'hello~1bla'\n```\n\n\n### .unescape(str)\n\nUnescape a reference token.\n\n```Javascript\npointer.unescape('hello~0bla');         // -> 'hello~bla'\npointer.unescape('hello~1bla');         // -> 'hello/bla'\n```\n\n\n### .parse(str)\n\nConverts a JSON pointer into an array of reference tokens.\n\n```Javascript\npointer.parse('/hello/bla');            // -> ['hello', 'bla']\n```\n\n\n### .compile(array)\n\nBuilds a json pointer from an array of reference tokens.\n\n```Javascript\npointer.compile(['hello', 'bla']);      // -> '/hello/bla'\n```\n\n\n### pointer(object, [pointer, [value]])\n\nConvenience wrapper around the api.\n\n```Javascript\npointer(object)                 // bind object\npointer(object, pointer)        // get\npointer(object, pointer, value) // set\n```\n\nThe wrapper supports chainable object oriented style.\n\n```Javascript\nvar obj = {anything: 'bla'};\nvar objPointer = pointer(obj);\nobjPointer.set('/example', 'bla').dict();\n```\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/manuelstofer/json-pointer/issues"
  },
  "_id": "json-pointer@0.3.1",
  "dist": {
    "shasum": "a5b4b4d1e0dc347f3b951f1762f3cfaaeee91d49"
  },
  "_from": "json-pointer@^0.3.0",
  "_resolved": "https://registry.npmjs.org/json-pointer/-/json-pointer-0.3.1.tgz"
}
