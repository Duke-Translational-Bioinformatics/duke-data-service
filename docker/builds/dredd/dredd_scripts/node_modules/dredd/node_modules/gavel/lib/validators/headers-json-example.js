// Generated by CoffeeScript 1.9.2
var HeadersJsonExample, JsonSchema, SchemaV4Generator, SchemaV4Properties, errors, jsonPointer, ref, tv4ToHeadersMessage, type,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

errors = require('../errors');

JsonSchema = require('./json-schema').JsonSchema;

ref = require('../utils/schema-v4-generator'), SchemaV4Generator = ref.SchemaV4Generator, SchemaV4Properties = ref.SchemaV4Properties;

tv4ToHeadersMessage = require('../utils/tv4-to-headers-message');

jsonPointer = require('json-pointer');

type = require('is-type');

HeadersJsonExample = (function(superClass) {
  extend(HeadersJsonExample, superClass);

  function HeadersJsonExample(real, expected) {
    var header, j, len, ref1;
    this.real = real;
    this.expected = expected;
    if (!type.object(this.real)) {
      throw new errors.MalformedDataError("Real is not an Object");
    }
    if (!type.object(this.expected)) {
      throw new errors.MalformedDataError("Expected is not an Object");
    }
    this.expected = this.prepareHeaders(this.expected);
    this.real = this.prepareHeaders(this.real);
    this.schema = this.getSchema(this.expected);
    if (this.schema != null) {
      if (this.schema['properties'] != null) {
        ref1 = ['date', 'expires'];
        for (j = 0, len = ref1.length; j < len; j++) {
          header = ref1[j];
          if (this.schema['properties'][header] != null) {
            delete this.schema['properties'][header]['enum'];
          }
        }
      }
    }
    HeadersJsonExample.__super__.constructor.call(this, this.real, this.schema);
  }

  HeadersJsonExample.prototype.validate = function() {
    var i, j, ref1, result;
    result = HeadersJsonExample.__super__.validate.call(this);
    if (result.length > 0) {
      for (i = j = 0, ref1 = result.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
        result[i]['message'] = tv4ToHeadersMessage(result[i]['message'], this.expected);
      }
    }
    return result;
  };

  HeadersJsonExample.prototype.prepareHeaders = function(headers) {
    var key, transformedHeaders, value;
    if (!type.object(headers)) {
      return headers;
    }
    transformedHeaders = {};
    for (key in headers) {
      value = headers[key];
      transformedHeaders[key.toLowerCase()] = value;
    }
    return transformedHeaders;
  };

  HeadersJsonExample.prototype.getSchema = function(data) {
    var properties, schemaGenerator;
    properties = new SchemaV4Properties({});
    properties.set({
      keysStrict: false,
      typesStrict: false,
      valuesStrict: ['content-type', 'accept', 'accept-charset', 'accept-encoding', 'accept-language']
    });
    schemaGenerator = new SchemaV4Generator({
      json: data,
      properties: properties
    });
    return schemaGenerator.generate();
  };

  return HeadersJsonExample;

})(JsonSchema);

module.exports = {
  HeadersJsonExample: HeadersJsonExample
};
