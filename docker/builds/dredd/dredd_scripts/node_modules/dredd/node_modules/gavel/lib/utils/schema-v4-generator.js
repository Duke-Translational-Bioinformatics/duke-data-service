// Generated by CoffeeScript 1.9.2
var SCHEMA_VERSION, SchemaV4Generator, SchemaV4Properties, stringType, type,
  hasProp = {}.hasOwnProperty;

type = require('is-type');

stringType = require('./get-type');

SCHEMA_VERSION = "http://json-schema.org/draft-04/schema#";

SchemaV4Properties = (function() {
  function SchemaV4Properties(arg) {
    var keysStrict, typesStrict, valuesStrict;
    keysStrict = arg.keysStrict, valuesStrict = arg.valuesStrict, typesStrict = arg.typesStrict;
    this.set({
      keysStrict: keysStrict,
      valuesStrict: valuesStrict,
      typesStrict: typesStrict
    });
  }

  SchemaV4Properties.prototype.set = function(arg) {
    var keysStrict, typesStrict, valuesStrict;
    keysStrict = arg.keysStrict, valuesStrict = arg.valuesStrict, typesStrict = arg.typesStrict;
    this.keysStrict = keysStrict != null ? keysStrict : false;
    this.valuesStrict = valuesStrict != null ? valuesStrict : false;
    return this.typesStrict = typesStrict != null ? typesStrict : false;
  };

  return SchemaV4Properties;

})();

SchemaV4Generator = (function() {
  function SchemaV4Generator(arg) {
    var i, json, len, lowercased, properties, ref, val;
    json = arg.json, properties = arg.properties;
    if (type.string(json)) {
      this.json = JSON.parse(json);
    } else {
      this.json = json;
    }
    this.schema = void 0;
    this.properties = properties || new SchemaV4Properties({});
    if (Array.isArray(this.properties.valuesStrict)) {
      lowercased = [];
      ref = this.properties.valuesStrict;
      for (i = 0, len = ref.length; i < len; i++) {
        val = ref[i];
        lowercased.push(val.toLowerCase());
      }
      this.properties.valuesStrict = lowercased;
    }
  }

  SchemaV4Generator.prototype.generate = function() {
    this.schema = this.getSchemaForObject({
      baseObject: this.json,
      objectId: void 0,
      firstLevel: true,
      properties: this.properties
    });
    return this.schema;
  };

  SchemaV4Generator.prototype.getSchemaTypeFor = function(val) {
    var _type;
    _type = stringType(val);
    if (val == null) {
      return 'null';
    }
    if (_type === 'array') {
      return 'array';
    }
    if (_type === 'number' && val % 1 === 0) {
      return 'integer';
    }
    return _type;
  };

  SchemaV4Generator.prototype.isBaseType = function(_type) {
    return _type !== "array" && _type !== "object";
  };

  SchemaV4Generator.prototype.getSchemaForObject = function(arg) {
    var baseObject, firstLevel, getSchemaForObjectProperties, hasKeys, i, item, itemIndex, k, len, objectId, prop, properties, schemaDict, schemaType, v, value;
    baseObject = arg.baseObject, objectId = arg.objectId, firstLevel = arg.firstLevel, properties = arg.properties;
    if (firstLevel == null) {
      firstLevel = true;
    }
    hasKeys = false;
    properties || (properties = new SchemaProperties);
    schemaDict = {};
    if (firstLevel) {
      schemaDict["$schema"] = SCHEMA_VERSION;
      schemaDict["id"] = "#";
    }
    if (objectId != null) {
      schemaDict["id"] = objectId;
    }
    schemaType = this.getSchemaTypeFor(baseObject);
    if (type.object(baseObject)) {
      for (k in baseObject) {
        if (!hasProp.call(baseObject, k)) continue;
        v = baseObject[k];
        hasKeys = true;
        break;
      }
      if (!hasKeys) {
        schemaDict["empty"] = true;
      }
    }
    if (schemaType === 'object') {
      if (properties.keysStrict) {
        schemaDict['additionalProperties'] = false;
      } else {
        schemaDict['additionalProperties'] = true;
      }
    } else if (schemaType === 'array') {
      if (properties.keysStrict) {
        schemaDict['additionalItems'] = false;
      } else {
        schemaDict['additionalItems'] = true;
      }
    }
    if (properties.valuesStrict === true && this.isBaseType(schemaType)) {
      schemaDict['enum'] = [baseObject];
    } else if (Array.isArray(properties.valuesStrict) && this.isBaseType(schemaType)) {
      if (properties.valuesStrict.indexOf(objectId != null ? objectId.toLowerCase() : void 0) > -1) {
        schemaDict['enum'] = [baseObject];
      }
    }
    if ((properties.typesStrict && this.isBaseType(schemaType)) || (!this.isBaseType(schemaType)) || firstLevel === true) {
      schemaDict["type"] = schemaType;
    }
    if (schemaType === 'object' && hasKeys) {
      schemaDict["required"] = [];
      schemaDict["properties"] = {};
      for (prop in baseObject) {
        if (!hasProp.call(baseObject, prop)) continue;
        value = baseObject[prop];
        getSchemaForObjectProperties = {
          baseObject: value,
          objectId: prop,
          firstLevel: false,
          properties: properties
        };
        schemaDict["properties"][prop] = this.getSchemaForObject(getSchemaForObjectProperties);
        schemaDict["required"].push(prop);
      }
    } else if (schemaType === 'array' && baseObject.length > 0) {
      schemaDict['items'] = [];
      for (itemIndex = i = 0, len = baseObject.length; i < len; itemIndex = ++i) {
        item = baseObject[itemIndex];
        getSchemaForObjectProperties = {
          baseObject: item,
          objectId: itemIndex.toString(),
          firstLevel: false,
          properties: properties
        };
        schemaDict['items'].push(this.getSchemaForObject(getSchemaForObjectProperties));
      }
    }
    return schemaDict;
  };

  return SchemaV4Generator;

})();

module.exports = {
  SchemaV4Properties: SchemaV4Properties,
  SchemaV4Generator: SchemaV4Generator
};
