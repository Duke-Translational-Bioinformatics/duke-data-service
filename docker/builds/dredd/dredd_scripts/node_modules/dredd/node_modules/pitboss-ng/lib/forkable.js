var STATUS, clone, create, error, errorStatus, errorStatusMsg, isFatalError, message, run, script, timeout, util, vm;

vm = require('vm');

util = require('util');

clone = require('clone');

script = null;

errorStatus = 0;

errorStatusMsg = null;

STATUS = {
  'FATAL': 1
};

timeout = void 0;

process.on('message', function(msg) {
  if (msg['code']) {
    if (msg['timeout']) {
      timeout = parseInt(msg['timeout'], 10);
    }
    create(msg['code']);
  } else {
    run(msg);
  }
});

create = function(code) {
  var codeForVm, err;
  codeForVm = "\"use strict\";\n" + code;
  try {
    if (vm.Script) {
      script = new vm.Script(codeForVm, {
        filename: 'sandbox'
      });
    } else {
      script = vm.createScript(codeForVm);
    }
  } catch (_error) {
    err = _error;
    errorStatus = STATUS['FATAL'];
    errorStatusMsg = "VM Syntax Error: " + err;
  }
};

run = function(msg) {
  var context, err, i, len, lib, ref, ref1, res, varName;
  if (isFatalError()) {
    error(errorStatusMsg, msg.id);
    return false;
  }
  if (!script) {
    error("No code to run");
    return false;
  }
  if (msg.context == null) {
    msg.context = {};
  }
  context = vm.createContext(clone(msg.context));
  if (msg != null ? msg.libraries : void 0) {
    if (Array.isArray(msg != null ? msg.libraries : void 0)) {
      ref = msg != null ? msg.libraries : void 0;
      for (i = 0, len = ref.length; i < len; i++) {
        lib = ref[i];
        context[lib] = require(lib);
      }
    } else if (typeof (msg != null ? msg.libraries : void 0) === 'object') {
      ref1 = msg != null ? msg.libraries : void 0;
      for (varName in ref1) {
        lib = ref1[varName];
        context[varName] = require(lib);
      }
    } else {
      return error("Pitboss error: Libraries must be defined by an array or by an object.", msg.id);
    }
  }
  try {
    res = {
      result: script.runInNewContext(context || {}, {
        timeout: timeout
      }) || null,
      id: msg.id
    };
    message(res);
  } catch (_error) {
    err = _error;
    error("VM Runtime Error: " + err, msg.id);
  }
};

isFatalError = function() {
  if (errorStatus === STATUS['FATAL']) {
    return true;
  } else {
    return false;
  }
};

error = function(msg, id) {
  id || (id = null);
  return message({
    error: msg,
    id: id
  });
};

message = function(msg) {
  return process.send(msg);
};
