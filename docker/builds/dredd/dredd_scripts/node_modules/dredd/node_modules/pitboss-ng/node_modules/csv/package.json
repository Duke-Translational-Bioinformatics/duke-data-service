{
  "name": "csv",
  "version": "0.4.6",
  "description": "CSV parser with simple api, full of options and tested against large datasets.",
  "keywords": [
    "node",
    "csv",
    "tsv",
    "parser",
    "parse",
    "stringifier",
    "stringify"
  ],
  "homepage": "http://www.adaltas.com/projects/node-csv/",
  "bugs": {
    "url": "https://github.com/wdavidw/node-csv/issues"
  },
  "author": {
    "name": "David Worms",
    "email": "david@adaltas.com",
    "url": "http://www.adaltas.com"
  },
  "contributors": [
    {
      "name": "David Worms",
      "email": "david@adaltas.com",
      "url": "http://www.adaltas.com"
    }
  ],
  "license": "BSD-3-Clause",
  "engines": {
    "node": ">= 0.1.90"
  },
  "main": "./lib",
  "repository": {
    "type": "git",
    "url": "https://github.com/wdavidw/node-csv.git"
  },
  "dependencies": {
    "csv-generate": "^0.0.6",
    "csv-parse": "^1.0.0",
    "stream-transform": "^0.1.0",
    "csv-stringify": "^0.0.8"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "scripts": {},
  "readme": "\n<pre>\n     _   _           _        _____  _______      __\n    | \\ | |         | |      / ____|/ ____\\ \\    / /\n    |  \\| | ___   __| | ___ | |    | (___  \\ \\  / /\n    | . ` |/ _ \\ / _` |/ _ \\| |     \\___ \\  \\ \\/ /\n    | |\\  | (_) | (_| |  __/| |____ ____) |  \\  /\n    |_| \\_|\\___/ \\__,_|\\___| \\_____|_____/    \\/     New BSD License\n\n</pre>\n\nThis project provides CSV generation, parsing, transformation and serialization\nfor Node.js.\n\nIt has been tested and used by a large community over the years and should be\nconsidered reliable. It provides every option you would expect from an advanced\nCSV parser and stringifier.\n\n[![NPM](https://nodei.co/npm/csv.png?stars&downloads)](https://nodei.co/npm/csv/) [![NPM](https://nodei.co/npm-dl/csv.png)](https://nodei.co/npm/csv/)\n\nThe `csv` package is itself split into 4 packages:\n\n*   [`csv-generate`](https://github.com/wdavidw/node-csv-generate),\n    a flexible generator of CSV string and Javascript objects. \n    [![Build Status](https://secure.travis-ci.org/wdavidw/node-csv-generate.png)][travis-csv-generate]\n*   [`csv-parse`](https://github.com/wdavidw/node-csv-parse),\n    a parser converting CSV text into arrays or objects. \n    [![Build Status](https://secure.travis-ci.org/wdavidw/node-csv-parse.png)][travis-csv-parse]\n*   [`stream-transform`](https://github.com/wdavidw/node-stream-transform),\n    a transformation framework.\n    [![Build Status](https://secure.travis-ci.org/wdavidw/node-stream-transform.png)][travis-stream-transform]\n*   [`csv-stringify`](https://github.com/wdavidw/node-csv-stringify), \n    a stringifier converting records into a CSV text. \n    [![Build Status](https://secure.travis-ci.org/wdavidw/node-csv-stringify.png)][travis-csv-stringify]\n\n## Documentation\n\nThe full documentation for the current version 0.4 is available [here][new_doc] while the\nprevious documentation is still available [here][old_doc].\n\n## Usage\n\nInstallation command is `npm install csv`.\n\nEach package is fully compatible with the stream 2 and 3 specifications.\nAlso, a simple callback-based API is always provided for convenience.\n\n### Callback example\n\nExecute this script with the command `node samples/callback.js`.\n\n```javascript\nvar csv = require('csv');\n\ncsv.generate({seed: 1, columns: 2, length: 20}, function(err, data){\n  csv.parse(data, function(err, data){\n    csv.transform(data, function(data){\n      return data.map(function(value){return value.toUpperCase()});\n    }, function(err, data){\n      csv.stringify(data, function(err, data){\n        process.stdout.write(data);\n      });\n    });\n  });\n});\n```\n\n### Stream example\n\nExecute this script with the command `node samples/stream.js`.\n\n```javascript\nvar csv = require('csv');\n\nvar generator = csv.generate({seed: 1, columns: 2, length: 20});\nvar parser = csv.parse();\nvar transformer = csv.transform(function(data){\n  return data.map(function(value){return value.toUpperCase()});\n});\nvar stringifier = csv.stringify();\n\ngenerator.on('readable', function(){\n  while(data = generator.read()){\n    parser.write(data);\n  }\n});\n\nparser.on('readable', function(){\n  while(data = parser.read()){\n    transformer.write(data);\n  }\n});\n\ntransformer.on('readable', function(){\n  while(data = transformer.read()){\n    stringifier.write(data);\n  }\n});\n\nstringifier.on('readable', function(){\n  while(data = stringifier.read()){\n    process.stdout.write(data);\n  }\n});\n```\n\n### Pipe example\n\nExecute this script with the command `node samples/pipe.js`.\n\n```javascript\nvar csv = require('csv');\n\ncsv.generate({seed: 1, columns: 2, length: 20})\n  .pipe(csv.parse())\n  .pipe(csv.transform(function(record){\n     return record.map(function(value){\n       return value.toUpperCase()\n     });\n  }))\n  .pipe(csv.stringify ())\n  .pipe(process.stdout);\n```\n\nDevelopment\n-----------\n\nThis parent project doesn't have tests itself but instead delegates the\ntests to its child projects.\n\nRead the documentation of the child projects for addionnal information.\n\nRelated projects\n----------------\n\n*   Pavel Kolesnikov \"ya-csv\": <http://github.com/koles/ya-csv>\n*   Chris Williams \"node-csv\": <http://github.com/voodootikigod/node-csv>\n\n[travis]: https://travis-ci.org/\n[travis-csv-generate]: http://travis-ci.org/wdavidw/node-csv-generate\n[travis-csv-parse]: http://travis-ci.org/wdavidw/node-csv-parse\n[travis-stream-transform]: http://travis-ci.org/wdavidw/node-stream-transform\n[travis-csv-stringify]: http://travis-ci.org/wdavidw/node-csv-stringify\n[new_doc]: http://csv.adaltas.com\n[old_doc]: http://csv.adaltas.com/legacy/\n",
  "readmeFilename": "README.md",
  "_id": "csv@0.4.6",
  "_from": "csv@^0.4.2"
}
