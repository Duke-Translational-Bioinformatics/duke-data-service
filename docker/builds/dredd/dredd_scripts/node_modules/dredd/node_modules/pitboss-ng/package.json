{
  "name": "pitboss-ng",
  "version": "0.3.2",
  "description": "Run untrusted code in a seperate process using VM module. With timeout and memory limit management",
  "keywords": [
    "sandbox",
    "memory limit",
    "vm",
    "untrusted code"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/apiaryio/pitboss"
  },
  "bugs": {
    "url": "https://github.com/apiaryio/pitboss/issues"
  },
  "author": {
    "name": "Apiary Inc",
    "email": "support@apiary.io"
  },
  "scripts": {
    "test": "gulp test",
    "prepublish": "gulp build"
  },
  "dependencies": {
    "clone": "^1.0.2",
    "csv": "^0.4.2",
    "pidusage": "^0.1.1"
  },
  "devDependencies": {
    "chai": "^2.2.0",
    "coffee-script": "^1.9.2",
    "gulp": "^3.8.11",
    "gulp-coffee": "^2.3.1",
    "gulp-mocha": "^2.0.1",
    "gulp-util": "^3.0.4",
    "mocha": "^2.2.4"
  },
  "main": "./lib/pitboss-ng.js",
  "engines": {
    "node": ">= 0.10.x"
  },
  "license": "MIT",
  "readme": "[![Build Status](https://secure.travis-ci.org/apiaryio/pitboss.png)](http://travis-ci.org/apiaryio/pitboss)\n[![Build Status](https://ci.appveyor.com/api/projects/status/nctklpxwtt14vv4r?svg=true)](https://ci.appveyor.com/project/Apiary/pitboss)\n\n![Pitboss](http://s3.amazonaws.com/img.mdp.im/renobankclubinside4.jpg_%28705%C3%97453%29-20120923-100859.jpg)\n\n# Pitboss-NG (next gen)\n\n## A module for running untrusted code\n\n```javascript\nvar Pitboss = require('pitboss-ng').Pitboss;\n\nvar untrustedCode = \"var a = !true;\\n a\";\n\nvar sandbox = new Pitboss(untrustedCode, {\n  memoryLimit: 32*1024, // 32 MB memory limit (default is 64 MB)\n  timeout: 5*1000, // 5000 ms to perform tasks or die (default is 500 ms = 0.5 s)\n  heartBeatTick: 100 // interval between memory-limit checks (default is 100 ms)\n});\n\nsandbox.run({\n  context: {       // context is an object of variables/values accessible by the untrusted code\n    'foo': 'bar',  // context must be JSON.stringify positive\n    'key': 'value' //  = no RegExp, Date, circular references, Buffer or more crazy things\n  },\n  libraries: {\n    myModule: path.join(__dirname, './my/own/module'),\n    // will be available as global \"myModule\" variable for the untrusted code\n    'crypto': 'crypto', // you can also require system/installed packages\n    '_': 'underscore'   // require underscore the traditional way\n  }\n}, function callback (err, result) {\n  // result is synchronous \"return\" of the last line in your untrusted code, here \"a = !true\", so false\n  console.log('Result is:', result); // prints \"Result is: false\"\n  sandbox.kill(); // don't forget to kill the sandbox, if you don't need it anymore\n});\n\n// OR other option: libraries can be an array of system modules\nsandbox.run({\n  context: {}, // no data-variables are passed to context\n  libraries: ['console', 'lodash'] // we will be using global \"lodash\" & \"console\"\n}, function callback (err, result) {\n  // finished, kill the sandboxed process\n  sandbox.kill();\n});\n```\n\n### Runs JS code and returns the last eval'd statement\n\n```javascript\nvar assert = require('chai').assert;\nvar Pitboss = require('pitboss-ng').Pitboss;\n\nvar code = \"num = num % 5;\\nnum;\"\n\nvar sandbox = new Pitboss(code);\n\nsandbox.run({context: {'num': 23}}, function (err, result) {\n  assert.equal(3, result);\n  sandbox.kill(); // sandbox is not needed anymore, so kill the sandboxed process\n});\n```\n\n### Allows you to pass you own libraries into sandboxed content\n\n```javascript\nvar assert = require('chai').assert;\nvar Pitboss = require('pitboss-ng').Pitboss;\n\nvar code = \"num = num % 5;\\n console.log('from sandbox: ' + num);\\n num;\"\n\nvar sandbox = new Pitboss(code);\n\nsandbox.run({context: {'num': 23}, libraries: ['console']}, function (err, result) {\n  // will print \"from sandbox: 5\"\n  assert.equal(3, result);\n  sandbox.kill(); // sandbox is not needed anymore, so end it\n});\n```\n\n### Handles processes that take too damn long\n\n```javascript\nvar assert = require('chai').assert;\nvar Pitboss = require('pitboss-ng').Pitboss;\n\nvar code = \"while(true) { num % 3 };\";\n\nvar sandbox = new Pitboss(code, {timeout: 2000});\nsandbox.run({context: {'num': 23}}, function (err, result) {\n  assert.equal(\"Timedout\", err);\n  sandbox.kill();\n});\n```\n\n### Doesn't choke under pressure (or shitty code)\n\n```javascript\nvar assert = require('chai').assert;\nvar Pitboss = require('pitboss-ng').Pitboss;\n\nvar code = \"Not a JavaScript at all!\";\n\nvar sandbox = new Pitboss(code, {timeout: 2000});\n\nsandbox.run({context: {num: 23}}, function (err, result) {\n  assert.include(err, \"VM Syntax Error\");\n  assert.include(err, \"Unexpected identifier\");\n  sandbox.kill();\n});\n```\n\n### Doesn't handle this! But 'ulimit' or 'pidusage' does!\n\n```javascript\nvar assert = require('chai').assert;\nvar Pitboss = require('pitboss-ng').Pitboss;\n\nvar code = \"var str = ''; while (true) { str = str + 'Memory is a finite resource!'; }\";\n\nvar sandbox = new Pitboss(code, {timeout: 10000});\n\nsandbox.run({context: {num: 23}}, function (err, result) {\n  assert.equal(\"Process failed\", err);\n  sandbox.kill();\n});\n```\n\nAnd since Pitboss-NG forks each process, ulimit kills only the runner\n",
  "readmeFilename": "README.md",
  "_id": "pitboss-ng@0.3.2",
  "_from": "pitboss-ng@^0.3.1"
}
