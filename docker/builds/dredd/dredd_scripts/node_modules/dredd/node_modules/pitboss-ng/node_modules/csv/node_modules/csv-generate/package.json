{
  "version": "0.0.6",
  "name": "csv-generate",
  "description": "CSV and object generation implementing the Node.js `stream.Readable` API",
  "keywords": [
    "stream",
    "generate",
    "csv",
    "object"
  ],
  "license": "BSD-3-Clause",
  "repository": {
    "type": "git",
    "url": "http://www.github.com/wdavidw/node-csv-generate"
  },
  "homepage": "http://csv.adaltas.com/generate/",
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "latest",
    "mocha": "latest",
    "should": "latest"
  },
  "optionalDependencies": {},
  "main": "./lib",
  "scripts": {
    "coffee": "./node_modules/.bin/coffee -b -o lib src",
    "pretest": "./node_modules/.bin/coffee -b -o lib src",
    "test": "NODE_ENV=test ./node_modules/.bin/mocha --compilers coffee:coffee-script/register --reporter dot"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/wdavidw/node-csv-generate.png)](http://travis-ci.org/wdavidw/node-csv-generate)\n\nCSV and object generation\n=========================\n\nThis package provides a flexible generator of CSV strings and Javascript objects\nimplementing the Node.js `stream.Readable` API.\n\n[Documentation for the \"csv-generate\" package is available here][home].\n\nFeatures includes:\n\n*   random or pseudo-random seed based generation\n*   `stream.Readable` implementation\n*   BSD License\n\nUsage\n-----\n\nRun `npm install csv` to install the full csv module or run \n`npm install csv-generate` if you are only interested by the CSV parser.\n\nUse the callback style API for simplicity or the stream based API for \nscalability.\n\n### Using the callback API\n\nThe parser receive a string and return an array inside a user-provided \ncallback. This example is available with the command `node samples/callback.js`.\n\n```javascript\nvar generate = require('csv-generate');\n\ngenerate({seed: 1, columns: 2, length: 2}, function(err, output){\n  output.should.eql('OMH,ONKCHhJmjadoA\\nD,GeACHiN');\n});\n```\n\n### Using the stream API\n    \n```javascript\n// node samples/stream.js\nvar generate = require('csv-generate');\n\nvar data = []\nvar generator = generate({seed: 1, objectMode: true, columns: 2, length: 2});\ngenerator.on('readable', function(){\n  while(d = generator.read()){\n    data.push(d);\n  }\n});\ngenerator.on('error', function(err){\n  console.log(err);\n});\ngenerator.on('end', function(){\n  data.should.eql([ [ 'OMH', 'ONKCHhJmjadoA' ],[ 'D', 'GeACHiN' ] ]);\n});\n```\n\n### Using the pipe function\n\nOne usefull function part of the Stream API is `pipe` to interact between \nmultiple streams. You may use this function to pipe a `stream.Readable` string \nsource to a `stream.Writable` object destination. The next example available as \n`node samples/pipe.js` read the file, parse its content and transform it.\n\n```javascript\n// node samples/pipe.js\nvar generate = require('csv-generate');\n\nvar generator = generate({columns: ['int', 'bool'], length: 2});\ngenerator.pipe(process.stdout);\n```\n\nMigration\n---------\n\nMost of the generator is imported from its parent project [CSV][csv] in a effort \nto split it between the generator, the parser, the transformer and the stringifier.\n\nDevelopment\n-----------\n\nTests are executed with mocha. To install it, simple run `npm install` \nfollowed by `npm test`. It will install mocha and its dependencies in your \nproject \"node_modules\" directory and run the test suite. The tests run \nagainst the CoffeeScript source files.\n\nTo generate the JavaScript files, run `npm run coffee`.\n\nThe test suite is run online with [Travis][travis] against the versions \n0.9, 0.10 and 0.11 of Node.js.\n\nContributors\n------------\n\n*   David Worms: <https://github.com/wdavidw>\n\n[home]: http://csv.adaltas.com/generate/\n[csv]: https://github.com/wdavidw/node-csv\n[travis]: https://travis-ci.org/#!/wdavidw/node-csv-generate\n",
  "readmeFilename": "README.md",
  "_id": "csv-generate@0.0.6",
  "_from": "csv-generate@^0.0.6"
}
