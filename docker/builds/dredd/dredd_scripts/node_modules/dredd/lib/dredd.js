// Generated by CoffeeScript 1.10.0
var CONNECTION_ERRORS, Dredd, Runner, applyConfiguration, async, blueprintTransactions, blueprintUtils, configureReporters, fs, glob, handleRuntimeProblems, logger, options, protagonist, removeDuplicates, request, url,
  hasProp = {}.hasOwnProperty;

require('setimmediate');

glob = require('glob');

fs = require('fs');

protagonist = require('protagonist');

async = require('async');

request = require('request');

url = require('url');

logger = require('./logger');

options = require('./options');

Runner = require('./transaction-runner');

applyConfiguration = require('./apply-configuration');

handleRuntimeProblems = require('./handle-runtime-problems');

blueprintTransactions = require('blueprint-transactions');

configureReporters = require('./configure-reporters');

blueprintUtils = require('./blueprint-utils');

CONNECTION_ERRORS = ['ECONNRESET', 'ENOTFOUND', 'ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNREFUSED', 'EHOSTUNREACH', 'EPIPE'];

removeDuplicates = function(arr) {
  return arr.reduce(function(alreadyProcessed, currentItem) {
    if (alreadyProcessed.indexOf(currentItem) === -1) {
      return alreadyProcessed.concat(currentItem);
    }
    return alreadyProcessed;
  }, []);
};

Dredd = (function() {
  function Dredd(config) {
    this.init(config);
  }

  Dredd.prototype.init = function(config) {
    var base;
    this.tests = [];
    this.stats = {
      tests: 0,
      failures: 0,
      errors: 0,
      passes: 0,
      skipped: 0,
      start: 0,
      end: 0,
      duration: 0
    };
    this.configuration = applyConfiguration(config, this.stats);
    if ((base = this.configuration).options == null) {
      base.options = {};
    }
    this.compiledTransactions = {};
    this.runner = new Runner(this.configuration);
    return configureReporters(this.configuration, this.stats, this.tests, this.runner);
  };

  Dredd.prototype.run = function(callback) {
    var base, base1, key, passedConfigData, ref, val;
    this.configDataIsEmpty = true;
    if ((base = this.configuration).files == null) {
      base.files = [];
    }
    if ((base1 = this.configuration).data == null) {
      base1.data = {};
    }
    passedConfigData = {};
    ref = this.configuration.data || {};
    for (key in ref) {
      if (!hasProp.call(ref, key)) continue;
      val = ref[key];
      this.configDataIsEmpty = false;
      if (typeof val === 'string') {
        passedConfigData[key] = {
          filename: key,
          raw: val
        };
      } else if ((typeof val === 'object') && val.raw && val.filename) {
        passedConfigData[val.filename] = {
          filename: val.filename,
          raw: val.raw
        };
      }
    }
    if (!this.configDataIsEmpty) {
      this.configuration.data = passedConfigData;
    }
    this.configuration.options.path = removeDuplicates(this.configuration.options.path);
    return this.expandGlobs((function(_this) {
      return function(globsErr) {
        if (globsErr) {
          return callback(globsErr, _this.stats);
        }
        return _this.loadFiles(function(loadErr) {
          if (loadErr) {
            return callback(loadErr, _this.stats);
          }
          return _this.parseBlueprints(function(parseErr) {
            if (parseErr) {
              return callback(parseErr, _this.stats);
            }
            return _this.compileTransactions(function(compileErr) {
              if (compileErr) {
                return callback(compileErr, _this.stats);
              }
              return _this.emitStart(function(emitStartErr) {
                if (emitStartErr) {
                  return callback(emitStartErr, _this.stats);
                }
                return _this.startRunner(function(runnerErr) {
                  if (runnerErr) {
                    return callback(runnerErr, _this.stats);
                  }
                  return _this.transactionsComplete(callback);
                });
              });
            });
          });
        });
      };
    })(this));
  };

  Dredd.prototype.expandGlobs = function(callback) {
    return async.each(this.configuration.options.path, (function(_this) {
      return function(globToExpand, globCallback) {
        if (/^http(s)?:\/\//.test(globToExpand)) {
          _this.configuration.files = _this.configuration.files.concat(globToExpand);
          return globCallback();
        }
        return glob(globToExpand, function(err, match) {
          if (err) {
            globCallback(err);
          }
          _this.configuration.files = _this.configuration.files.concat(match);
          return globCallback();
        });
      };
    })(this), (function(_this) {
      return function(err) {
        if (err) {
          return callback(err, _this.stats);
        }
        if (_this.configDataIsEmpty && _this.configuration.files.length === 0) {
          err = new Error("Blueprint file or files not found on path: '" + _this.configuration.options.path + "'");
          return callback(err, _this.stats);
        }
        _this.configuration.files = removeDuplicates(_this.configuration.files);
        return callback(null, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.loadFiles = function(callback) {
    return async.eachLimit(this.configuration.files, 6, (function(_this) {
      return function(fileUrlOrPath, loadCallback) {
        var error, fileUrl, ref;
        try {
          fileUrl = url.parse(fileUrlOrPath);
        } catch (error) {
          fileUrl = null;
        }
        if (fileUrl && ((ref = fileUrl.protocol) === 'http:' || ref === 'https:') && fileUrl.host) {
          return _this.downloadFile(fileUrlOrPath, loadCallback);
        } else {
          return _this.readLocalFile(fileUrlOrPath, loadCallback);
        }
      };
    })(this), function(err) {
      if (err) {
        return callback(err, this.stats);
      }
      return callback();
    });
  };

  Dredd.prototype.downloadFile = function(fileUrl, callback) {
    return request.get({
      url: fileUrl,
      timeout: 5000,
      json: false
    }, (function(_this) {
      return function(downloadError, res, body) {
        var err;
        if (downloadError) {
          err = new Error("Error when loading file from URL '" + fileUrl + "'. Is the provided URL correct?");
          return callback(err, _this.stats);
        }
        if (!body || res.statusCode < 200 || res.statusCode >= 300) {
          err = new Error("Unable to load file from URL '" + fileUrl + "'. Server did not send any blueprint back and responded with status code " + res.statusCode + ".");
          return callback(err, _this.stats);
        }
        _this.configuration.data[fileUrl] = {
          raw: body,
          filename: fileUrl
        };
        return callback(null, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.readLocalFile = function(filePath, callback) {
    return fs.readFile(filePath, 'utf8', (function(_this) {
      return function(readError, data) {
        var err;
        if (readError) {
          err = new Error("Error when reading file '" + filePath + "' (" + readError.message + "). Is the provided path correct?");
          return callback(err);
        }
        _this.configuration.data[filePath] = {
          raw: data,
          filename: filePath
        };
        return callback(null, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.parseBlueprints = function(callback) {
    return async.each(Object.keys(this.configuration.data), (function(_this) {
      return function(file, parseCallback) {
        options = {
          type: 'ast'
        };
        return protagonist.parse(_this.configuration.data[file]['raw'], options, function(protagonistError, result) {
          if (protagonistError) {
            return parseCallback(protagonistError);
          }
          _this.configuration.data[file]['parsed'] = result;
          return parseCallback();
        });
      };
    })(this), (function(_this) {
      return function(err) {
        var data, file, i, len, message, pos, ranges, ref, ref1, result, warning;
        if (err) {
          return callback(err, _this.stats);
        }
        ref = _this.configuration.data;
        for (file in ref) {
          data = ref[file];
          result = data['parsed'];
          if (result['warnings'].length > 0) {
            ref1 = result['warnings'];
            for (i = 0, len = ref1.length; i < len; i++) {
              warning = ref1[i];
              message = ("Parser warning in file '" + file + "':") + ' (' + warning.code + ') ' + warning.message;
              ranges = blueprintUtils.warningLocationToRanges(warning['location'], data['raw']);
              if (ranges != null ? ranges.length : void 0) {
                pos = blueprintUtils.rangesToLinesText(ranges);
                message = message + ' on ' + pos;
              }
              logger.warn(message);
            }
          }
        }
        return callback(null, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.compileTransactions = function(callback) {
    var data, file, ref, runtimeError, transactions;
    this.compiledTransactions['warnings'] = [];
    this.compiledTransactions['errors'] = [];
    this.compiledTransactions['transactions'] = [];
    ref = this.configuration.data;
    for (file in ref) {
      data = ref[file];
      transactions = blueprintTransactions.compile(data['parsed']['ast'], file);
      this.compiledTransactions['warnings'] = this.compiledTransactions['warnings'].concat(transactions['warnings']);
      this.compiledTransactions['errors'] = this.compiledTransactions['errors'].concat(transactions['errors']);
      this.compiledTransactions['transactions'] = this.compiledTransactions['transactions'].concat(transactions['transactions']);
    }
    runtimeError = handleRuntimeProblems(this.compiledTransactions);
    if (runtimeError) {
      return callback(runtimeError, this.stats);
    }
    return callback(null, this.stats);
  };

  Dredd.prototype.emitStart = function(callback) {
    var reporterCount, reporterErrorOccurred;
    reporterCount = this.configuration.emitter.listeners('start').length;
    reporterErrorOccurred = false;
    return this.configuration.emitter.emit('start', this.configuration.data, (function(_this) {
      return function(reporterError) {
        reporterCount--;
        if (reporterError && reporterErrorOccurred === false) {
          reporterErrorOccurred = true;
          return callback(reporterError, _this.stats);
        }
        if (reporterCount === 0 && reporterErrorOccurred === false) {
          return callback(null, _this.stats);
        }
      };
    })(this));
  };

  Dredd.prototype.startRunner = function(callback) {
    this.runner.config(this.configuration);
    return this.runner.run(this.compiledTransactions['transactions'], callback);
  };

  Dredd.prototype.transactionsComplete = function(callback) {
    var reporterCount;
    reporterCount = this.configuration.emitter.listeners('end').length;
    return this.configuration.emitter.emit('end', (function(_this) {
      return function() {
        reporterCount--;
        if (reporterCount === 0) {
          return callback(null, _this.stats);
        }
      };
    })(this));
  };

  return Dredd;

})();

module.exports = Dredd;

module.exports.options = options;
