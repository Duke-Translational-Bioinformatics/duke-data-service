// Generated by CoffeeScript 1.10.0
var html, logger, prettifyResponse,
  hasProp = {}.hasOwnProperty;

html = require('html');

logger = require('./logger');

prettifyResponse = function(response) {
  var contentType, header, hkey, hval, key, prettifyBody, stringRepresentation, stringify, value;
  stringify = function(obj) {
    var e, error;
    try {
      if (typeof obj === 'string') {
        obj = JSON.parse(obj);
      }
      obj = JSON.stringify(obj, null, 2);
    } catch (error) {
      e = error;
      logger.debug("Could not stringify: " + obj);
    }
    return obj;
  };
  prettifyBody = function(body, contentType) {
    switch (contentType) {
      case 'application/json':
        body = stringify(body);
        break;
      case 'text/html':
        body = html.prettyPrint(body, {
          indent_size: 2
        });
    }
    return body;
  };
  if ((response != null ? response.headers : void 0) != null) {
    contentType = (response != null ? response.headers['content-type'] : void 0) || (response != null ? response.headers['Content-Type'] : void 0);
  }
  stringRepresentation = "";
  for (key in response) {
    if (!hasProp.call(response, key)) continue;
    value = response[key];
    if (key === 'body') {
      value = '\n' + prettifyBody(value, contentType);
    } else if (key === 'schema') {
      value = '\n' + stringify(value);
    } else if (key === 'headers') {
      header = '\n';
      for (hkey in value) {
        if (!hasProp.call(value, hkey)) continue;
        hval = value[hkey];
        header += "    " + hkey + ": " + hval + "\n";
      }
      value = header;
    }
    stringRepresentation += key + ": " + value + "\n";
  }
  return stringRepresentation;
};

module.exports = prettifyResponse;
