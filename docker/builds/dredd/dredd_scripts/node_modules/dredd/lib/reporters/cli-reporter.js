// Generated by CoffeeScript 1.10.0
var CliReporter, logger, prettifyResponse,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

logger = require('./../logger');

prettifyResponse = require('./../prettify-response');

CliReporter = (function() {
  function CliReporter(emitter, stats, tests, inlineErrors, details) {
    this.configureEmitter = bind(this.configureEmitter, this);
    this.type = "cli";
    this.stats = stats;
    this.tests = tests;
    this.configureEmitter(emitter);
    this.inlineErrors = inlineErrors;
    this.details = details;
    this.errors = [];
  }

  CliReporter.prototype.configureEmitter = function(emitter) {
    emitter.on('start', function(rawBlueprint, callback) {
      logger.info('Beginning Dredd testing...');
      return callback();
    });
    emitter.on('end', (function(_this) {
      return function(callback) {
        var i, len, ref, test;
        if (!_this.inlineErrors) {
          if (_this.errors.length !== 0) {
            logger.info("Displaying failed tests...");
          }
          ref = _this.errors;
          for (i = 0, len = ref.length; i < len; i++) {
            test = ref[i];
            logger.fail(test.title + (" duration: " + test.duration + "ms"));
            logger.fail(test.message);
            if (test.request) {
              logger.request("\n" + prettifyResponse(test.request) + "\n");
            }
            if (test.expected) {
              logger.expected("\n" + prettifyResponse(test.expected) + "\n");
            }
            if (test.actual) {
              logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
            }
          }
        }
        if (_this.stats.tests > 0) {
          logger.complete((_this.stats.passes + " passing, ") + (_this.stats.failures + " failing, ") + (_this.stats.errors + " errors, ") + (_this.stats.skipped + " skipped, ") + (_this.stats.tests + " total"));
        }
        logger.complete("Tests took " + _this.stats.duration + "ms");
        return callback();
      };
    })(this));
    emitter.on('test pass', (function(_this) {
      return function(test) {
        logger.pass(test.title + (" duration: " + test.duration + "ms"));
        if (_this.details) {
          logger.request("\n" + prettifyResponse(test.request) + "\n");
          logger.expected("\n" + prettifyResponse(test.expected) + "\n");
          return logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
        }
      };
    })(this));
    emitter.on('test skip', function(test) {
      return logger.skip(test.title);
    });
    emitter.on('test fail', (function(_this) {
      return function(test) {
        logger.fail(test.title + (" duration: " + test.duration + "ms"));
        if (_this.inlineErrors) {
          logger.fail(test.message);
          if (test.request) {
            logger.request("\n" + prettifyResponse(test.request) + "\n");
          }
          if (test.expected) {
            logger.expected("\n" + prettifyResponse(test.expected) + "\n");
          }
          if (test.actual) {
            return logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
          }
        } else {
          return _this.errors.push(test);
        }
      };
    })(this));
    return emitter.on('test error', (function(_this) {
      return function(error, test) {
        var connectionErrors;
        connectionErrors = ['ECONNRESET', 'ENOTFOUND', 'ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNREFUSED', 'EHOSTUNREACH', 'EPIPE'];
        if (connectionErrors.indexOf(error.code) > -1) {
          test.message = "Error connecting to server under test!";
        }
        if (!_this.inlineErrors) {
          _this.errors.push(test);
        }
        logger.error(test.title + (" duration: " + test.duration + "ms"));
        if (connectionErrors.indexOf(error.code) > -1) {
          return logger.error(test.message);
        } else {
          return logger.error(error.stack);
        }
      };
    })(this));
  };

  return CliReporter;

})();

module.exports = CliReporter;
