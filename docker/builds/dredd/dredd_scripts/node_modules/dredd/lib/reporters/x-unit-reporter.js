// Generated by CoffeeScript 1.10.0
var EventEmitter, XUnitReporter, file, fs, htmlencode, logger, prettifyResponse,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

fs = require('fs');

htmlencode = require('htmlencode');

file = require('file');

logger = require('./../logger');

prettifyResponse = require('./../prettify-response');

XUnitReporter = (function(superClass) {
  var appendLine, cdata, toTag, updateSuiteStats;

  extend(XUnitReporter, superClass);

  function XUnitReporter(emitter, stats, tests, path, details) {
    this.configureEmitter = bind(this.configureEmitter, this);
    XUnitReporter.__super__.constructor.call(this);
    this.type = "xUnit";
    this.stats = stats;
    this.tests = tests;
    this.path = this.sanitizedPath(path);
    this.details = details;
    this.configureEmitter(emitter);
  }

  XUnitReporter.prototype.sanitizedPath = function(path) {
    var filePath;
    filePath = path != null ? file.path.abspath(path) : file.path.abspath("./report.xml");
    if (fs.existsSync(filePath)) {
      logger.info("File exists at " + filePath + ", will be overwritten...");
      fs.unlinkSync(filePath);
    }
    return filePath;
  };

  XUnitReporter.prototype.configureEmitter = function(emitter) {
    emitter.on('start', (function(_this) {
      return function(rawBlueprint, callback) {
        appendLine(_this.path, toTag('testsuite', {
          name: 'Dredd Tests',
          tests: _this.stats.tests,
          failures: _this.stats.failures,
          errors: _this.stats.errors,
          skip: _this.stats.skipped,
          timestamp: (new Date()).toUTCString(),
          time: _this.stats.duration / 1000
        }, false));
        return callback();
      };
    })(this));
    emitter.on('end', (function(_this) {
      return function(callback) {
        return updateSuiteStats(_this.path, _this.stats, callback);
      };
    })(this));
    emitter.on('test pass', (function(_this) {
      return function(test) {
        var attrs, deets;
        attrs = {
          name: htmlencode.htmlEncode(test.title),
          time: test.duration / 1000
        };
        if (_this.details) {
          deets = "\nRequest:\n" + (prettifyResponse(test.request)) + "\nExpected:\n" + (prettifyResponse(test.expected)) + "\nActual:\n" + (prettifyResponse(test.actual));
          return appendLine(_this.path, toTag('testcase', attrs, false, toTag('system-out', null, false, cdata(deets))));
        } else {
          return appendLine(_this.path, toTag('testcase', attrs, true));
        }
      };
    })(this));
    emitter.on('test skip', (function(_this) {
      return function(test) {
        var attrs;
        attrs = {
          name: htmlencode.htmlEncode(test.title),
          time: test.duration / 1000
        };
        return appendLine(_this.path, toTag('testcase', attrs, false, toTag('skipped', null, true)));
      };
    })(this));
    emitter.on('test fail', (function(_this) {
      return function(test) {
        var attrs, diff;
        attrs = {
          name: htmlencode.htmlEncode(test.title),
          time: test.duration / 1000
        };
        diff = "Message:\n" + test.message + "\nRequest:\n" + (prettifyResponse(test.request)) + "\nExpected:\n" + (prettifyResponse(test.expected)) + "\nActual:\n" + (prettifyResponse(test.actual));
        return appendLine(_this.path, toTag('testcase', attrs, false, toTag('failure', null, false, cdata(diff))));
      };
    })(this));
    return emitter.on('test error', (function(_this) {
      return function(error, test) {
        var attrs, errorMessage;
        attrs = {
          name: htmlencode.htmlEncode(test.title),
          time: test.duration / 1000
        };
        errorMessage = "\nError: \n" + error + "\nStacktrace: \n" + error.stack;
        return appendLine(_this.path, toTag('testcase', attrs, false, toTag('failure', null, false, cdata(errorMessage))));
      };
    })(this));
  };

  updateSuiteStats = function(path, stats, callback) {
    return fs.readFile(path, function(err, data) {
      var newStats, position, restOfFile, xmlHeader;
      if (!err) {
        data = data.toString();
        position = data.toString().indexOf('\n');
        if (position !== -1) {
          restOfFile = data.substr(position + 1);
          newStats = toTag('testsuite', {
            name: 'Dredd Tests',
            tests: stats.tests,
            failures: stats.failures,
            errors: stats.errors,
            skip: stats.skipped,
            timestamp: (new Date()).toUTCString(),
            time: stats.duration / 1000
          }, false);
          xmlHeader = '<?xml version="1.0" encoding="UTF-8"?>';
          return fs.writeFile(path, xmlHeader + '\n' + newStats + '\n' + restOfFile + '</testsuite>', function(err) {
            if (err) {
              logger.error(err);
            }
            return callback();
          });
        } else {
          return callback();
        }
      } else {
        logger.error(err);
        return callback();
      }
    });
  };

  cdata = function(str) {
    return '<![CDATA[' + str + ']]>';
  };

  appendLine = function(path, line) {
    return fs.appendFileSync(path, line + "\n");
  };

  toTag = function(name, attrs, close, content) {
    var end, key, pairs, tag;
    end = (close ? "/>" : ">");
    pairs = [];
    tag = void 0;
    for (key in attrs) {
      pairs.push(key + "=\"" + attrs[key] + "\"");
    }
    tag = "<" + name + (pairs.length ? " " + pairs.join(" ") : "") + end;
    if (content) {
      tag += content + "</" + name + end;
    }
    return tag;
  };

  return XUnitReporter;

})(EventEmitter);

module.exports = XUnitReporter;
