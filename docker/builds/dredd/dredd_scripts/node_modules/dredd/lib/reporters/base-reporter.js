// Generated by CoffeeScript 1.10.0
var BaseReporter,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

BaseReporter = (function() {
  function BaseReporter(emitter, stats, tests) {
    this.configureEmitter = bind(this.configureEmitter, this);
    this.type = "base";
    this.stats = stats;
    this.tests = tests;
    this.configureEmitter(emitter);
  }

  BaseReporter.prototype.configureEmitter = function(emitter) {
    emitter.on('start', (function(_this) {
      return function(rawBlueprint, callback) {
        _this.stats.start = new Date();
        return callback();
      };
    })(this));
    emitter.on('end', (function(_this) {
      return function(callback) {
        _this.stats.end = new Date();
        _this.stats.duration = _this.stats.end - _this.stats.start;
        return callback();
      };
    })(this));
    emitter.on('test start', (function(_this) {
      return function(test) {
        _this.tests.push(test);
        _this.stats.tests += 1;
        return test['start'] = new Date();
      };
    })(this));
    emitter.on('test pass', (function(_this) {
      return function(test) {
        _this.stats.passes += 1;
        test['end'] = new Date();
        return test['duration'] = test.end - test.start;
      };
    })(this));
    emitter.on('test skip', (function(_this) {
      return function(test) {
        return _this.stats.skipped += 1;
      };
    })(this));
    emitter.on('test fail', (function(_this) {
      return function(test) {
        _this.stats.failures += 1;
        test['end'] = new Date();
        return test['duration'] = test.end - test.start;
      };
    })(this));
    return emitter.on('test error', (function(_this) {
      return function(error, test) {
        _this.stats.errors += 1;
        test['end'] = new Date();
        return test['duration'] = test.end - test.start;
      };
    })(this));
  };

  return BaseReporter;

})();

module.exports = BaseReporter;
