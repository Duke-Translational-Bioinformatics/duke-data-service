// Generated by CoffeeScript 1.10.0
var DotReporter, logger, prettifyResponse,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

logger = require('./../logger');

prettifyResponse = require('./../prettify-response');

DotReporter = (function() {
  function DotReporter(emitter, stats, tests) {
    this.configureEmitter = bind(this.configureEmitter, this);
    this.type = "dot";
    this.stats = stats;
    this.tests = tests;
    this.configureEmitter(emitter);
    this.errors = [];
  }

  DotReporter.prototype.configureEmitter = function(emitter) {
    emitter.on('start', function() {
      return logger.info('Beginning Dredd testing...');
    });
    emitter.on('end', (function(_this) {
      return function(callback) {
        var i, len, ref, test;
        if (_this.stats.tests > 0) {
          if (_this.errors.length > 0) {
            _this.write("\n");
            logger.info("Displaying failed tests...");
            ref = _this.errors;
            for (i = 0, len = ref.length; i < len; i++) {
              test = ref[i];
              logger.fail(test.title + (" duration: " + test.duration + "ms"));
              logger.fail(test.message);
              logger.request("\n" + prettifyResponse(test.request) + "\n");
              logger.expected("\n" + prettifyResponse(test.expected) + "\n");
              logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
            }
          }
          _this.write("\n");
          logger.complete(_this.stats.passes + " passing, " + _this.stats.failures + " failing, " + _this.stats.errors + " errors, " + _this.stats.skipped + " skipped");
          logger.complete("Tests took " + _this.stats.duration + "ms");
          return callback();
        }
      };
    })(this));
    emitter.on('test pass', (function(_this) {
      return function(test) {
        return _this.write(".");
      };
    })(this));
    emitter.on('test skip', (function(_this) {
      return function(test) {
        return _this.write("-");
      };
    })(this));
    emitter.on('test fail', (function(_this) {
      return function(test) {
        _this.write("F");
        return _this.errors.push(test);
      };
    })(this));
    return emitter.on('test error', (function(_this) {
      return function(error, test) {
        _this.write("E");
        test.message = "\nError: \n" + error + "\nStacktrace: \n" + error.stack + "\n";
        return _this.errors.push(test);
      };
    })(this));
  };

  DotReporter.prototype.write = function(str) {
    return process.stdout.write(str);
  };

  return DotReporter;

})();

module.exports = DotReporter;
